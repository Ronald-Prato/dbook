
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function custom_event(type, detail, bubbles = false) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.44.1' }, detail), true));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    const USERS = "users";
    const BOOKS = "books";
    const PAGES = "pages";

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    function commonjsRequire (target) {
    	throw new Error('Could not dynamically require "' + target + '". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.');
    }

    var gun$1 = createCommonjsModule(function (module) {
    (function(){

      /* UNBUILD */
      function USE(arg, req){
        return req? commonjsRequire(arg) : arg.slice? USE[R(arg)] : function(mod, path){
          arg(mod = {exports: {}});
          USE[R(path)] = mod.exports;
        }
        function R(p){
          return p.split('/').slice(-1).toString().replace('.js','');
        }
      }
      { var MODULE = module; }
    USE(function(module){
    		// Shim for generic javascript utilities.
    		String.random = function(l, c){
    			var s = '';
    			l = l || 24; // you are not going to make a 0 length random number, so no need to check type
    			c = c || '0123456789ABCDEFGHIJKLMNOPQRSTUVWXZabcdefghijklmnopqrstuvwxyz';
    			while(l-- > 0){ s += c.charAt(Math.floor(Math.random() * c.length)); }
    			return s;
    		};
    		String.match = function(t, o){ var tmp, u;
    			if('string' !== typeof t){ return false }
    			if('string' == typeof o){ o = {'=': o}; }
    			o = o || {};
    			tmp = (o['='] || o['*'] || o['>'] || o['<']);
    			if(t === tmp){ return true }
    			if(u !== o['=']){ return false }
    			tmp = (o['*'] || o['>']);
    			if(t.slice(0, (tmp||'').length) === tmp){ return true }
    			if(u !== o['*']){ return false }
    			if(u !== o['>'] && u !== o['<']){
    				return (t >= o['>'] && t <= o['<'])? true : false;
    			}
    			if(u !== o['>'] && t >= o['>']){ return true }
    			if(u !== o['<'] && t <= o['<']){ return true }
    			return false;
    		};
    		String.hash = function(s, c){ // via SO
    			if(typeof s !== 'string'){ return }
    	    c = c || 0; // CPU schedule hashing by
    	    if(!s.length){ return c }
    	    for(var i=0,l=s.length,n; i<l; ++i){
    	      n = s.charCodeAt(i);
    	      c = ((c<<5)-c)+n;
    	      c |= 0;
    	    }
    	    return c;
    	  };
    		var has = Object.prototype.hasOwnProperty;
    		Object.plain = function(o){ return o? (o instanceof Object && o.constructor === Object) || Object.prototype.toString.call(o).match(/^\[object (\w+)\]$/)[1] === 'Object' : false };
    		Object.empty = function(o, n){
    			for(var k in o){ if(has.call(o, k) && (!n || -1==n.indexOf(k))){ return false } }
    			return true;
    		};
    		Object.keys = Object.keys || function(o){
    			var l = [];
    			for(var k in o){ if(has.call(o, k)){ l.push(k); } }
    			return l;
    		}
    		;(function(){ // max ~1ms or before stack overflow 
    			var u, sT = setTimeout, l = 0, c = 0, sI = (typeof setImmediate !== ''+u && setImmediate) || sT; // queueMicrotask faster but blocks UI
    			sT.poll = sT.poll || function(f){ //f(); return; // for testing
    				if((1 >= (+new Date - l)) && c++ < 3333){ f(); return }
    				sI(function(){ l = +new Date; f(); },c=0);
    			};
    		}());
    (function(){ // Too many polls block, this "threads" them in turns over a single thread in time.
    			var sT = setTimeout, t = sT.turn = sT.turn || function(f){ 1 == s.push(f) && p(T); }
    			, s = t.s = [], p = sT.poll, i = 0, f, T = function(){
    				if(f = s[i++]){ f(); }
    				if(i == s.length || 99 == i){
    					s = t.s = s.slice(i);
    					i = 0;
    				}
    				if(s.length){ p(T); }
    			};
    		}());
    (function(){
    			var u, sT = setTimeout, T = sT.turn;
    			(sT.each = sT.each || function(l,f,e,S){ S = S || 9; (function t(s,L,r){
    			  if(L = (s = (l||[]).splice(0,S)).length){
    			  	for(var i = 0; i < L; i++){
    			  		if(u !== (r = f(s[i]))){ break }
    			  	}
    			  	if(u === r){ T(t); return }
    			  } e && e(r);
    			}());})();
    		}());
    	})(USE, './shim');
    USE(function(module){
    		// On event emitter generic javascript utility.
    		module.exports = function onto(tag, arg, as){
    			if(!tag){ return {to: onto} }
    			var u, f = 'function' == typeof arg, tag = (this.tag || (this.tag = {}))[tag] || f && (
    				this.tag[tag] = {tag: tag, to: onto._ = { next: function(arg){ var tmp;
    					if(tmp = this.to){ tmp.next(arg); }
    			}}});
    			if(f){
    				var be = {
    					off: onto.off ||
    					(onto.off = function(){
    						if(this.next === onto._.next){ return !0 }
    						if(this === this.the.last){
    							this.the.last = this.back;
    						}
    						this.to.back = this.back;
    						this.next = onto._.next;
    						this.back.to = this.to;
    						if(this.the.last === this.the){
    							delete this.on.tag[this.the.tag];
    						}
    					}),
    					to: onto._,
    					next: arg,
    					the: tag,
    					on: this,
    					as: as,
    				};
    				(be.back = tag.last || tag).to = be;
    				return tag.last = be;
    			}
    			if((tag = tag.to) && u !== arg){ tag.next(arg); }
    			return tag;
    		};
    	})(USE, './onto');
    USE(function(module){
    		USE('./shim');
    		module.exports = function(v){ // Valid values are a subset of JSON: null, binary, number (!Infinity), text, or a soul relation. Arrays need special algorithms to handle concurrency, so they are not supported directly. Use an extension that supports them if needed but research their problems first.
    			if(v === undefined){ return false }
    			if(v === null){ return true } // "deletes", nulling out keys.
    			if(v === Infinity){ return false } // we want this to be, but JSON does not support it, sad face.
    			if(v !== v){ return false } // can you guess what this checks for? ;)
    			if('string' == typeof v // text!
    			|| 'boolean' == typeof v
    			|| 'number' == typeof v){
    				return true; // simple values are valid.
    			}
    			if(v && ('string' == typeof (v['#']||0)) && Object.empty(v, ['#'])){ return v['#'] } // is link
    			return false; // If not, everything else remaining is an invalid data type. Custom extensions can be built on top of these primitives to support other types.
    		};
    	})(USE, './valid');
    USE(function(module){
    		USE('./shim');
    		function State(){
    			var t = +new Date;
    			if(last < t){
    				return N = 0, last = t + State.drift;
    			}
    			return last = t + ((N += 1) / D) + State.drift;
    		}
    		State.drift = 0;
    		var NI = -Infinity, N = 0, D = 999, last = NI, u; // WARNING! In the future, on machines that are D times faster than 2016AD machines, you will want to increase D by another several orders of magnitude so the processing speed never out paces the decimal resolution (increasing an integer effects the state accuracy).
    		State.is = function(n, k, o){ // convenience function to get the state on a key on a node and return it.
    			var tmp = (k && n && n._ && n._['>']) || o;
    			if(!tmp){ return }
    			return ('number' == typeof (tmp = tmp[k]))? tmp : NI;
    		};
    		State.ify = function(n, k, s, v, soul){ // put a key's state on a node.
    			(n = n || {})._ = n._ || {}; // safety check or init.
    			if(soul){ n._['#'] = soul; } // set a soul if specified.
    			var tmp = n._['>'] || (n._['>'] = {}); // grab the states data.
    			if(u !== k && k !== '_'){
    				if('number' == typeof s){ tmp[k] = s; } // add the valid state.
    				if(u !== v){ n[k] = v; } // Note: Not its job to check for valid values!
    			}
    			return n;
    		};
    		module.exports = State;
    	})(USE, './state');
    USE(function(module){
    		USE('./shim');
    		function Dup(opt){
    			var dup = {s:{}}, s = dup.s;
    			opt = opt || {max: 999, age: 1000 * 9};//*/ 1000 * 9 * 3};
    			dup.check = function(id){
    				if(!s[id]){ return false }
    				return dt(id);
    			};
    			var dt = dup.track = function(id){
    				var it = s[id] || (s[id] = {});
    				it.was = dup.now = +new Date;
    				if(!dup.to){ dup.to = setTimeout(dup.drop, opt.age + 9); }
    				return it;
    			};
    			dup.drop = function(age){
    				dup.to = null;
    				dup.now = +new Date;
    				var l = Object.keys(s);
    				console.STAT && console.STAT(dup.now, +new Date - dup.now, 'dup drop keys'); // prev ~20% CPU 7% RAM 300MB // now ~25% CPU 7% RAM 500MB
    				setTimeout.each(l, function(id){ var it = s[id]; // TODO: .keys( is slow?
    					if(it && (age || opt.age) > (dup.now - it.was)){ return }
    					delete s[id];
    				},0,99);
    			};
    			return dup;
    		}
    		module.exports = Dup;
    	})(USE, './dup');
    USE(function(module){
    		// request / response module, for asking and acking messages.
    		USE('./onto'); // depends upon onto!
    		module.exports = function ask(cb, as){
    			if(!this.on){ return }
    			var lack = (this.opt||{}).lack || 9000;
    			if(!('function' == typeof cb)){
    				if(!cb){ return }
    				var id = cb['#'] || cb, tmp = (this.tag||'')[id];
    				if(!tmp){ return }
    				if(as){
    					tmp = this.on(id, as);
    					clearTimeout(tmp.err);
    					tmp.err = setTimeout(function(){ tmp.off(); }, lack);
    				}
    				return true;
    			}
    			var id = (as && as['#']) || random(9);
    			if(!cb){ return id }
    			var to = this.on(id, cb, as);
    			to.err = to.err || setTimeout(function(){ to.off();
    				to.next({err: "Error: No ACK yet.", lack: true});
    			}, lack);
    			return id;
    		};
    		var random = String.random || function(){ return Math.random().toString(36).slice(2) };
    	})(USE, './ask');
    USE(function(module){

    		function Gun(o){
    			if(o instanceof Gun){ return (this._ = {$: this}).$ }
    			if(!(this instanceof Gun)){ return new Gun(o) }
    			return Gun.create(this._ = {$: this, opt: o});
    		}

    		Gun.is = function($){ return ($ instanceof Gun) || ($ && $._ && ($ === $._.$)) || false };

    		Gun.version = 0.2020;

    		Gun.chain = Gun.prototype;
    		Gun.chain.toJSON = function(){};

    		USE('./shim');
    		Gun.valid = USE('./valid');
    		Gun.state = USE('./state');
    		Gun.on = USE('./onto');
    		Gun.dup = USE('./dup');
    		Gun.ask = USE('./ask');
    (function(){
    			Gun.create = function(at){
    				at.root = at.root || at;
    				at.graph = at.graph || {};
    				at.on = at.on || Gun.on;
    				at.ask = at.ask || Gun.ask;
    				at.dup = at.dup || Gun.dup();
    				var gun = at.$.opt(at.opt);
    				if(!at.once){
    					at.on('in', universe, at);
    					at.on('out', universe, at);
    					at.on('put', map, at);
    					Gun.on('create', at);
    					at.on('create', at);
    				}
    				at.once = 1;
    				return gun;
    			};
    			function universe(msg){
    				//if(!F){ var eve = this; setTimeout(function(){ universe.call(eve, msg,1) },Math.random() * 100);return; } // ADD F TO PARAMS!
    				if(!msg){ return }
    				if(msg.out === universe){ this.to.next(msg); return }
    				var eve = this, as = eve.as, at = as.at || as, gun = at.$, dup = at.dup, tmp, DBG = msg.DBG;
    				(tmp = msg['#']) || (tmp = msg['#'] = text_rand(9));
    				if(dup.check(tmp)){ return } dup.track(tmp);
    				tmp = msg._; msg._ = ('function' == typeof tmp)? tmp : function(){};
    				(msg.$ && (msg.$ === (msg.$._||'').$)) || (msg.$ = gun);
    				if(msg['@'] && !msg.put){ ack(msg); }
    				if(!at.ask(msg['@'], msg)){ // is this machine listening for an ack?
    					DBG && (DBG.u = +new Date);
    					if(msg.put){ put(msg); return } else
    					if(msg.get){ Gun.on.get(msg, gun); }
    				}
    				DBG && (DBG.uc = +new Date);
    				eve.to.next(msg);
    				DBG && (DBG.ua = +new Date);
    				if(msg.nts || msg.NTS){ return } // TODO: This shouldn't be in core, but fast way to prevent NTS spread. Delete this line after all peers have upgraded to newer versions.
    				msg.out = universe; at.on('out', msg);
    				DBG && (DBG.ue = +new Date);
    			}
    			function put(msg){
    				if(!msg){ return }
    				var ctx = msg._||'', root = ctx.root = ((ctx.$ = msg.$||'')._||'').root;
    				if(msg['@'] && ctx.faith && !ctx.miss){ // TODO: AXE may split/route based on 'put' what should we do here? Detect @ in AXE? I think we don't have to worry, as DAM will route it on @.
    					msg.out = universe;
    					root.on('out', msg);
    					return;
    				}
    				ctx.latch = root.hatch; ctx.match = root.hatch = [];
    				var put = msg.put;
    				var DBG = ctx.DBG = msg.DBG, S = +new Date;
    				if(put['#'] && put['.']){ /*root && root.on('put', msg);*/ return } // TODO: BUG! This needs to call HAM instead.
    				DBG && (DBG.p = S);
    				ctx['#'] = msg['#'];
    				ctx.msg = msg;
    				ctx.all = 0;
    				ctx.stun = 1;
    				var nl = Object.keys(put);//.sort(); // TODO: This is unbounded operation, large graphs will be slower. Write our own CPU scheduled sort? Or somehow do it in below? Keys itself is not O(1) either, create ES5 shim over ?weak map? or custom which is constant.
    				console.STAT && console.STAT(S, ((DBG||ctx).pk = +new Date) - S, 'put sort');
    				var ni = 0, nj, kl, soul, node, states, err, tmp;
    				(function pop(o){
    					if(nj != ni){ nj = ni;
    						if(!(soul = nl[ni])){
    							console.STAT && console.STAT(S, ((DBG||ctx).pd = +new Date) - S, 'put');
    							fire(ctx);
    							return;
    						}
    						if(!(node = put[soul])){ err = ERR+cut(soul)+"no node."; } else
    						if(!(tmp = node._)){ err = ERR+cut(soul)+"no meta."; } else
    						if(soul !== tmp['#']){ err = ERR+cut(soul)+"soul not same."; } else
    						if(!(states = tmp['>'])){ err = ERR+cut(soul)+"no state."; }
    						kl = Object.keys(node||{}); // TODO: .keys( is slow
    					}
    					if(err){
    						msg.err = ctx.err = err; // invalid data should error and stun the message.
    						fire(ctx);
    						//console.log("handle error!", err) // handle!
    						return;
    					}
    					var i = 0, key; o = o || 0;
    					while(o++ < 9 && (key = kl[i++])){
    						if('_' === key){ continue }
    						var val = node[key], state = states[key];
    						if(u === state){ err = ERR+cut(key)+"on"+cut(soul)+"no state."; break }
    						if(!valid(val)){ err = ERR+cut(key)+"on"+cut(soul)+"bad "+(typeof val)+cut(val); break }
    						//ctx.all++; //ctx.ack[soul+key] = '';
    						ham(val, key, soul, state, msg);
    					}
    					if((kl = kl.slice(i)).length){ turn(pop); return }
    					++ni; kl = null; pop(o);
    				}());
    			} Gun.on.put = put;
    			// TODO: MARK!!! clock below, reconnect sync, SEA certify wire merge, User.auth taking multiple times, // msg put, put, say ack, hear loop...
    			// WASIS BUG! first .once( undef 2nd good. .off othe rpeople: .open
    			function ham(val, key, soul, state, msg){
    				var ctx = msg._||'', root = ctx.root, graph = root.graph, tmp;
    				var vertex = graph[soul] || empty, was = state_is(vertex, key, 1), known = vertex[key];
    				
    				var DBG = ctx.DBG; if(tmp = console.STAT){ if(!graph[soul] || !known){ tmp.has = (tmp.has || 0) + 1; } }

    				var now = State();
    				if(state > now){
    					setTimeout(function(){ ham(val, key, soul, state, msg); }, (tmp = state - now) > MD? MD : tmp); // Max Defer 32bit. :(
    					console.STAT && console.STAT(((DBG||ctx).Hf = +new Date), tmp, 'future');
    					return;
    				}
    				if(state < was){ /*old;*/ if(!ctx.miss){ return } } // but some chains have a cache miss that need to re-fire. // TODO: Improve in future. // for AXE this would reduce rebroadcast, but GUN does it on message forwarding.
    				if(!ctx.faith){ // TODO: BUG? Can this be used for cache miss as well? // Yes this was a bug, need to check cache miss for RAD tests, but should we care about the faith check now? Probably not.
    					if(state === was && (val === known || L(val) <= L(known))){ /*console.log("same");*/ /*same;*/ if(!ctx.miss){ return } } // same
    				}
    				ctx.stun++; // TODO: 'forget' feature in SEA tied to this, bad approach, but hacked in for now. Any changes here must update there.
    				var aid = msg['#']+ctx.all++, id = {toString: function(){ return aid }, _: ctx}; id.toJSON = id.toString; // this *trick* makes it compatible between old & new versions.
    				DBG && (DBG.ph = DBG.ph || +new Date);
    				root.on('put', {'#': id, '@': msg['@'], put: {'#': soul, '.': key, ':': val, '>': state}, _: ctx});
    			}
    			function map(msg){
    				var DBG; if(DBG = (msg._||'').DBG){ DBG.pa = +new Date; DBG.pm = DBG.pm || +new Date;}
          	var eve = this, root = eve.as, graph = root.graph, ctx = msg._, put = msg.put, soul = put['#'], key = put['.'], val = put[':'], state = put['>']; msg['#']; var tmp;
          	if((tmp = ctx.msg) && (tmp = tmp.put) && (tmp = tmp[soul])){ state_ify(tmp, key, state, val, soul); } // necessary! or else out messages do not get SEA transforms.
    				graph[soul] = state_ify(graph[soul], key, state, val, soul);
    				if(tmp = (root.next||'')[soul]){ tmp.on('in', msg); }
    				fire(ctx);
    				eve.to.next(msg);
    			}
    			function fire(ctx, msg){ var root;
    				if(ctx.stop){ return }
    				if(!ctx.err && 0 < --ctx.stun){ return } // TODO: 'forget' feature in SEA tied to this, bad approach, but hacked in for now. Any changes here must update there.
    				ctx.stop = 1;
    				if(!(root = ctx.root)){ return }
    				var tmp = ctx.match; tmp.end = 1;
    				if(tmp === root.hatch){ if(!(tmp = ctx.latch) || tmp.end){ delete root.hatch; } else { root.hatch = tmp; } }
    				ctx.hatch && ctx.hatch(); // TODO: rename/rework how put & this interact.
    				setTimeout.each(ctx.match, function(cb){cb && cb();}); 
    				if(!(msg = ctx.msg) || ctx.err || msg.err){ return }
    				msg.out = universe;
    				ctx.root.on('out', msg);
    			}
    			function ack(msg){ // aggregate ACKs.
    				var id = msg['@'] || '', ctx;
    				if(!(ctx = id._)){ return }
    				ctx.acks = (ctx.acks||0) + 1;
    				if(ctx.err = msg.err){
    					msg['@'] = ctx['#'];
    					fire(ctx); // TODO: BUG? How it skips/stops propagation of msg if any 1 item is error, this would assume a whole batch/resync has same malicious intent.
    				}
    				if(!ctx.stop && !ctx.crack){ ctx.crack = ctx.match && ctx.match.push(function(){back(ctx);}); } // handle synchronous acks
    				back(ctx);
    			}
    			function back(ctx){
    				if(!ctx || !ctx.root){ return }
    				if(ctx.stun || ctx.acks !== ctx.all){ return }
    				ctx.root.on('in', {'@': ctx['#'], err: ctx.err, ok: ctx.err? u : {'':1}});
    			}

    			var ERR = "Error: Invalid graph!";
    			var cut = function(s){ return " '"+(''+s).slice(0,9)+"...' " };
    			var L = JSON.stringify, MD = 2147483647, State = Gun.state;

    		}());
    (function(){
    			Gun.on.get = function(msg, gun){
    				var root = gun._, get = msg.get, soul = get['#'], node = root.graph[soul], has = get['.'];
    				var next = root.next || (root.next = {}); next[soul];
    				// queue concurrent GETs?
    				// TODO: consider tagging original message into dup for DAM.
    				// TODO: ^ above? In chat app, 12 messages resulted in same peer asking for `#user.pub` 12 times. (same with #user GET too, yipes!) // DAM note: This also resulted in 12 replies from 1 peer which all had same ##hash but none of them deduped because each get was different.
    				// TODO: Moving quick hacks fixing these things to axe for now.
    				// TODO: a lot of GET #foo then GET #foo."" happening, why?
    				// TODO: DAM's ## hash check, on same get ACK, producing multiple replies still, maybe JSON vs YSON?
    				// TMP note for now: viMZq1slG was chat LEX query #.
    				/*if(gun !== (tmp = msg.$) && (tmp = (tmp||'')._)){
    					if(tmp.Q){ tmp.Q[msg['#']] = ''; return } // chain does not need to ask for it again.
    					tmp.Q = {};
    				}*/
    				/*if(u === has){
    					if(at.Q){
    						//at.Q[msg['#']] = '';
    						//return;
    					}
    					at.Q = {};
    				}*/
    				var ctx = msg._||{}, DBG = ctx.DBG = msg.DBG;
    				DBG && (DBG.g = +new Date);
    				//console.log("GET:", get, node, has);
    				if(!node){ return root.on('get', msg) }
    				if(has){
    					if('string' != typeof has || u === node[has]){ return root.on('get', msg) }
    					node = state_ify({}, has, state_is(node, has), node[has], soul);
    					// If we have a key in-memory, do we really need to fetch?
    					// Maybe... in case the in-memory key we have is a local write
    					// we still need to trigger a pull/merge from peers.
    				}
    				//Gun.window? Gun.obj.copy(node) : node; // HNPERF: If !browser bump Performance? Is this too dangerous to reference root graph? Copy / shallow copy too expensive for big nodes. Gun.obj.to(node); // 1 layer deep copy // Gun.obj.copy(node); // too slow on big nodes
    				node && ack(msg, node);
    				root.on('get', msg); // send GET to storage adapters.
    			};
    			function ack(msg, node){
    				var S = +new Date, ctx = msg._||{}, DBG = ctx.DBG = msg.DBG;
    				var to = msg['#'], id = text_rand(9), keys = Object.keys(node||'').sort(), soul = ((node||'')._||'')['#']; keys.length; var root = msg.$._.root, F = (node === root.graph[soul]);
    				console.STAT && console.STAT(S, ((DBG||ctx).gk = +new Date) - S, 'got keys');
    				// PERF: Consider commenting this out to force disk-only reads for perf testing? // TODO: .keys( is slow
    				node && (function go(){
    					S = +new Date;
    					var i = 0, k, put = {}, tmp;
    					while(i < 9 && (k = keys[i++])){
    						state_ify(put, k, state_is(node, k), node[k], soul);
    					}
    					keys = keys.slice(i);
    					(tmp = {})[soul] = put; put = tmp;
    					var faith; if(F){ faith = function(){}; faith.ram = faith.faith = true; } // HNPERF: We're testing performance improvement by skipping going through security again, but this should be audited.
    					tmp = keys.length;
    					console.STAT && console.STAT(S, -(S - (S = +new Date)), 'got copied some');
    					DBG && (DBG.ga = +new Date);
    					root.on('in', {'@': to, '#': id, put: put, '%': (tmp? (id = text_rand(9)) : u), $: root.$, _: faith, DBG: DBG});
    					console.STAT && console.STAT(S, +new Date - S, 'got in');
    					if(!tmp){ return }
    					setTimeout.turn(go);
    				}());
    				if(!node){ root.on('in', {'@': msg['#']}); } // TODO: I don't think I like this, the default lS adapter uses this but "not found" is a sensitive issue, so should probably be handled more carefully/individually.
    			} Gun.on.get.ack = ack;
    		}());
    (function(){
    			Gun.chain.opt = function(opt){
    				opt = opt || {};
    				var gun = this, at = gun._, tmp = opt.peers || opt;
    				if(!Object.plain(opt)){ opt = {}; }
    				if(!Object.plain(at.opt)){ at.opt = opt; }
    				if('string' == typeof tmp){ tmp = [tmp]; }
    				if(tmp instanceof Array){
    					if(!Object.plain(at.opt.peers)){ at.opt.peers = {};}
    					tmp.forEach(function(url){
    						var p = {}; p.id = p.url = url;
    						at.opt.peers[url] = at.opt.peers[url] || p;
    					});
    				}
    				at.opt.peers = at.opt.peers || {};
    				obj_each(opt, function each(k){ var v = this[k];
    					if((this && this.hasOwnProperty(k)) || 'string' == typeof v || Object.empty(v)){ this[k] = v; return }
    					if(v && v.constructor !== Object && !(v instanceof Array)){ return }
    					obj_each(v, each);
    				});
    				Gun.on('opt', at);
    				at.opt.uuid = at.opt.uuid || function uuid(l){ return Gun.state().toString(36).replace('.','') + String.random(l||12) };
    				return gun;
    			};
    		}());

    		var obj_each = function(o,f){ Object.keys(o).forEach(f,o); }, text_rand = String.random, turn = setTimeout.turn, valid = Gun.valid, state_is = Gun.state.is, state_ify = Gun.state.ify, u, empty = {}, C;

    		Gun.log = function(){ return (!Gun.log.off && C.log.apply(C, arguments)), [].slice.call(arguments).join(' ') };
    		Gun.log.once = function(w,s,o){ return (o = Gun.log.once)[w] = o[w] || 0, o[w]++ || Gun.log(s) };

    		if(typeof window !== "undefined"){ (window.GUN = window.Gun = Gun).window = window; }
    		try{ if(typeof MODULE !== "undefined"){ MODULE.exports = Gun; } }catch(e){}
    		module.exports = Gun;
    		
    		(Gun.window||{}).console = (Gun.window||{}).console || {log: function(){}};
    		(C = console).only = function(i, s){ return (C.only.i && i === C.only.i && C.only.i++) && (C.log.apply(C, arguments) || s) };
    		Gun.log.once("welcome", "Hello wonderful person! :) Thanks for using GUN, please ask for help on http://chat.gun.eco if anything takes you longer than 5min to figure out!");
    	})(USE, './root');
    USE(function(module){
    		var Gun = USE('./root');
    		Gun.chain.back = function(n, opt){ var tmp;
    			n = n || 1;
    			if(-1 === n || Infinity === n){
    				return this._.root.$;
    			} else
    			if(1 === n){
    				return (this._.back || this._).$;
    			}
    			var gun = this, at = gun._;
    			if(typeof n === 'string'){
    				n = n.split('.');
    			}
    			if(n instanceof Array){
    				var i = 0, l = n.length, tmp = at;
    				for(i; i < l; i++){
    					tmp = (tmp||empty)[n[i]];
    				}
    				if(u !== tmp){
    					return opt? gun : tmp;
    				} else
    				if((tmp = at.back)){
    					return tmp.$.back(n, opt);
    				}
    				return;
    			}
    			if('function' == typeof n){
    				var yes, tmp = {back: at};
    				while((tmp = tmp.back)
    				&& u === (yes = n(tmp, opt))){}
    				return yes;
    			}
    			if('number' == typeof n){
    				return (at.back || at).$.back(n - 1);
    			}
    			return this;
    		};
    		var empty = {}, u;
    	})(USE, './back');
    USE(function(module){
    		// WARNING: GUN is very simple, but the JavaScript chaining API around GUN
    		// is complicated and was extremely hard to build. If you port GUN to another
    		// language, consider implementing an easier API to build.
    		var Gun = USE('./root');
    		Gun.chain.chain = function(sub){
    			var gun = this, at = gun._, chain = new (sub || gun).constructor(gun), cat = chain._, root;
    			cat.root = root = at.root;
    			cat.id = ++root.once;
    			cat.back = gun._;
    			cat.on = Gun.on;
    			cat.on('in', Gun.on.in, cat); // For 'in' if I add my own listeners to each then I MUST do it before in gets called. If I listen globally for all incoming data instead though, regardless of individual listeners, I can transform the data there and then as well.
    			cat.on('out', Gun.on.out, cat); // However for output, there isn't really the global option. I must listen by adding my own listener individually BEFORE this one is ever called.
    			return chain;
    		};

    		function output(msg){
    			var get, at = this.as, back = at.back, root = at.root, tmp;
    			if(!msg.$){ msg.$ = at.$; }
    			this.to.next(msg);
    			if(at.err){ at.on('in', {put: at.put = u, $: at.$}); return }
    			if(get = msg.get){
    				/*if(u !== at.put){
    					at.on('in', at);
    					return;
    				}*/
    				if(root.pass){ root.pass[at.id] = at; } // will this make for buggy behavior elsewhere?
    				if(at.lex){ Object.keys(at.lex).forEach(function(k){ tmp[k] = at.lex[k]; }, tmp = msg.get = msg.get || {}); }
    				if(get['#'] || at.soul){
    					get['#'] = get['#'] || at.soul;
    					msg['#'] || (msg['#'] = text_rand(9)); // A3120 ?
    					back = (root.$.get(get['#'])._);
    					if(!(get = get['.'])){ // soul
    						tmp = back.ask && back.ask['']; // check if we have already asked for the full node
    						(back.ask || (back.ask = {}))[''] = back; // add a flag that we are now.
    						if(u !== back.put){ // if we already have data,
    							back.on('in', back); // send what is cached down the chain
    							if(tmp){ return } // and don't ask for it again.
    						}
    						msg.$ = back.$;
    					} else
    					if(obj_has(back.put, get)){ // TODO: support #LEX !
    						tmp = back.ask && back.ask[get];
    						(back.ask || (back.ask = {}))[get] = back.$.get(get)._;
    						back.on('in', {get: get, put: {'#': back.soul, '.': get, ':': back.put[get], '>': state_is(root.graph[back.soul], get)}});
    						if(tmp){ return }
    					}
    						/*put = (back.$.get(get)._);
    						if(!(tmp = put.ack)){ put.ack = -1 }
    						back.on('in', {
    							$: back.$,
    							put: Gun.state.ify({}, get, Gun.state(back.put, get), back.put[get]),
    							get: back.get
    						});
    						if(tmp){ return }
    					} else
    					if('string' != typeof get){
    						var put = {}, meta = (back.put||{})._;
    						Gun.obj.map(back.put, function(v,k){
    							if(!Gun.text.match(k, get)){ return }
    							put[k] = v;
    						})
    						if(!Gun.obj.empty(put)){
    							put._ = meta;
    							back.on('in', {$: back.$, put: put, get: back.get})
    						}
    						if(tmp = at.lex){
    							tmp = (tmp._) || (tmp._ = function(){});
    							if(back.ack < tmp.ask){ tmp.ask = back.ack }
    							if(tmp.ask){ return }
    							tmp.ask = 1;
    						}
    					}
    					*/
    					root.ask(ack, msg); // A3120 ?
    					return root.on('in', msg);
    				}
    				//if(root.now){ root.now[at.id] = root.now[at.id] || true; at.pass = {} }
    				if(get['.']){
    					if(at.get){
    						msg = {get: {'.': at.get}, $: at.$};
    						(back.ask || (back.ask = {}))[at.get] = msg.$._; // TODO: PERFORMANCE? More elegant way?
    						return back.on('out', msg);
    					}
    					msg = {get: at.lex? msg.get : {}, $: at.$};
    					return back.on('out', msg);
    				}
    				(at.ask || (at.ask = {}))[''] = at;	 //at.ack = at.ack || -1;
    				if(at.get){
    					get['.'] = at.get;
    					(back.ask || (back.ask = {}))[at.get] = msg.$._; // TODO: PERFORMANCE? More elegant way?
    					return back.on('out', msg);
    				}
    			}
    			return back.on('out', msg);
    		} Gun.on.out = output;

    		function input(msg, cat){ cat = cat || this.as; // TODO: V8 may not be able to optimize functions with different parameter calls, so try to do benchmark to see if there is any actual difference.
    			var root = cat.root, gun = msg.$ || (msg.$ = cat.$), at = (gun||'')._ || empty, tmp = msg.put||'', soul = tmp['#'], key = tmp['.'], change = (u !== tmp['='])? tmp['='] : tmp[':'], state = tmp['>'] || -Infinity, sat; // eve = event, at = data at, cat = chain at, sat = sub at (children chains).
    			if(u !== msg.put && (u === tmp['#'] || u === tmp['.'] || (u === tmp[':'] && u === tmp['=']) || u === tmp['>'])){ // convert from old format
    				if(!valid(tmp)){
    					if(!(soul = ((tmp||'')._||'')['#'])){ console.log("chain not yet supported for", tmp, '...', msg, cat); return; }
    					gun = cat.root.$.get(soul);
    					return setTimeout.each(Object.keys(tmp).sort(), function(k){ // TODO: .keys( is slow // BUG? ?Some re-in logic may depend on this being sync?
    						if('_' == k || u === (state = state_is(tmp, k))){ return }
    						cat.on('in', {$: gun, put: {'#': soul, '.': k, '=': tmp[k], '>': state}, VIA: msg});
    					});
    				}
    				cat.on('in', {$: at.back.$, put: {'#': soul = at.back.soul, '.': key = at.has || at.get, '=': tmp, '>': state_is(at.back.put, key)}, via: msg}); // TODO: This could be buggy! It assumes/approxes data, other stuff could have corrupted it.
    				return;
    			}
    			if((msg.seen||'')[cat.id]){ return } (msg.seen || (msg.seen = function(){}))[cat.id] = cat; // help stop some infinite loops

    			if(cat !== at){ // don't worry about this when first understanding the code, it handles changing contexts on a message. A soul chain will never have a different context.
    				Object.keys(msg).forEach(function(k){ tmp[k] = msg[k]; }, tmp = {}); // make copy of message
    				tmp.get = cat.get || tmp.get;
    				if(!cat.soul && !cat.has){ // if we do not recognize the chain type
    					tmp.$$$ = tmp.$$$ || cat.$; // make a reference to wherever it came from.
    				} else
    				if(at.soul){ // a has (property) chain will have a different context sometimes if it is linked (to a soul chain). Anything that is not a soul or has chain, will always have different contexts.
    					tmp.$ = cat.$;
    					tmp.$$ = tmp.$$ || at.$;
    				}
    				msg = tmp; // use the message with the new context instead;
    			}
    			unlink(msg, cat);

    			if(((cat.soul/* && (cat.ask||'')['']*/) || msg.$$) && state >= state_is(root.graph[soul], key)){ // The root has an in-memory cache of the graph, but if our peer has asked for the data then we want a per deduplicated chain copy of the data that might have local edits on it.
    				(tmp = root.$.get(soul)._).put = state_ify(tmp.put, key, state, change, soul);
    			}
    			if(!at.soul /*&& (at.ask||'')['']*/ && state >= state_is(root.graph[soul], key) && (sat = (root.$.get(soul)._.next||'')[key])){ // Same as above here, but for other types of chains. // TODO: Improve perf by preventing echoes recaching.
    				sat.put = change; // update cache
    				if('string' == typeof (tmp = valid(change))){
    					sat.put = root.$.get(tmp)._.put || change; // share same cache as what we're linked to.
    				}
    			}

    			this.to && this.to.next(msg); // 1st API job is to call all chain listeners.
    			// TODO: Make input more reusable by only doing these (some?) calls if we are a chain we recognize? This means each input listener would be responsible for when listeners need to be called, which makes sense, as they might want to filter.
    			cat.any && setTimeout.each(Object.keys(cat.any), function(any){ (any = cat.any[any]) && any(msg); },0,99); // 1st API job is to call all chain listeners. // TODO: .keys( is slow // BUG: Some re-in logic may depend on this being sync.
    			cat.echo && setTimeout.each(Object.keys(cat.echo), function(lat){ (lat = cat.echo[lat]) && lat.on('in', msg); },0,99); // & linked at chains // TODO: .keys( is slow // BUG: Some re-in logic may depend on this being sync.

    			if(((msg.$$||'')._||at).soul){ // comments are linear, but this line of code is non-linear, so if I were to comment what it does, you'd have to read 42 other comments first... but you can't read any of those comments until you first read this comment. What!? // shouldn't this match link's check?
    				// is there cases where it is a $$ that we do NOT want to do the following? 
    				if((sat = cat.next) && (sat = sat[key])){ // TODO: possible trick? Maybe have `ionmap` code set a sat? // TODO: Maybe we should do `cat.ask` instead? I guess does not matter.
    					tmp = {}; Object.keys(msg).forEach(function(k){ tmp[k] = msg[k]; });
    					tmp.$ = (msg.$$||msg.$).get(tmp.get = key); delete tmp.$$; delete tmp.$$$;
    					sat.on('in', tmp);
    				}
    			}

    			link(msg, cat);
    		} Gun.on.in = input;

    		function link(msg, cat){ cat = cat || this.as || msg.$._;
    			if(msg.$$ && this !== Gun.on){ return } // $$ means we came from a link, so we are at the wrong level, thus ignore it unless overruled manually by being called directly.
    			if(!msg.put || cat.soul){ return } // But you cannot overrule being linked to nothing, or trying to link a soul chain - that must never happen.
    			var put = msg.put||'', link = put['=']||put[':'], tmp;
    			var root = cat.root, tat = root.$.get(put['#']).get(put['.'])._;
    			if('string' != typeof (link = valid(link))){
    				if(this === Gun.on){ (tat.echo || (tat.echo = {}))[cat.id] = cat; } // allow some chain to explicitly force linking to simple data.
    				return; // by default do not link to data that is not a link.
    			}
    			if((tat.echo || (tat.echo = {}))[cat.id] // we've already linked ourselves so we do not need to do it again. Except... (annoying implementation details)
    				&& !(root.pass||'')[cat.id]){ return } // if a new event listener was added, we need to make a pass through for it. The pass will be on the chain, not always the chain passed down. 
    			if(tmp = root.pass){ if(tmp[link+cat.id]){ return } tmp[link+cat.id] = 1; } // But the above edge case may "pass through" on a circular graph causing infinite passes, so we hackily add a temporary check for that.

    			(tat.echo||(tat.echo={}))[cat.id] = cat; // set ourself up for the echo! // TODO: BUG? Echo to self no longer causes problems? Confirm.

    			if(cat.has){ cat.link = link; }
    			var sat = root.$.get(tat.link = link)._; // grab what we're linking to.
    			(sat.echo || (sat.echo = {}))[tat.id] = tat; // link it.
    			var tmp = cat.ask||''; // ask the chain for what needs to be loaded next!
    			if(tmp[''] || cat.lex){ // we might need to load the whole thing // TODO: cat.lex probably has edge case bugs to it, need more test coverage.
    				sat.on('out', {get: {'#': link}});
    			}
    			setTimeout.each(Object.keys(tmp), function(get, sat){ // if sub chains are asking for data. // TODO: .keys( is slow // BUG? ?Some re-in logic may depend on this being sync?
    				if(!get || !(sat = tmp[get])){ return }
    				sat.on('out', {get: {'#': link, '.': get}}); // go get it.
    			},0,99);
    		} Gun.on.link = link;

    		function unlink(msg, cat){ // ugh, so much code for seemingly edge case behavior.
    			var put = msg.put||'', change = (u !== put['='])? put['='] : put[':'], root = cat.root, link, tmp;
    			if(u === change){ // 1st edge case: If we have a brand new database, no data will be found.
    				// TODO: BUG! because emptying cache could be async from below, make sure we are not emptying a newer cache. So maybe pass an Async ID to check against?
    				// TODO: BUG! What if this is a map? // Warning! Clearing things out needs to be robust against sync/async ops, or else you'll see `map val get put` test catastrophically fail because map attempts to link when parent graph is streamed before child value gets set. Need to differentiate between lack acks and force clearing.
    				if(cat.soul && u !== cat.put){ return } // data may not be found on a soul, but if a soul already has data, then nothing can clear the soul as a whole.
    				//if(!cat.has){ return }
    				tmp = (msg.$$||msg.$||'')._||'';
    				if(msg['@'] && (u !== tmp.put || u !== cat.put)){ return } // a "not found" from other peers should not clear out data if we have already found it.
    				//if(cat.has && u === cat.put && !(root.pass||'')[cat.id]){ return } // if we are already unlinked, do not call again, unless edge case. // TODO: BUG! This line should be deleted for "unlink deeply nested".
    				if(link = cat.link || msg.linked){
    					delete (root.$.get(link)._.echo||'')[cat.id];
    				}
    				if(cat.has){ // TODO: Empty out links, maps, echos, acks/asks, etc.?
    					cat.link = null;
    				}
    				cat.put = u; // empty out the cache if, for example, alice's car's color no longer exists (relative to alice) if alice no longer has a car.
    				// TODO: BUG! For maps, proxy this so the individual sub is triggered, not all subs.
    				setTimeout.each(Object.keys(cat.next||''), function(get, sat){ // empty out all sub chains. // TODO: .keys( is slow // BUG? ?Some re-in logic may depend on this being sync? // TODO: BUG? This will trigger deeper put first, does put logic depend on nested order? // TODO: BUG! For map, this needs to be the isolated child, not all of them.
    					if(!(sat = cat.next[get])){ return }
    					//if(cat.has && u === sat.put && !(root.pass||'')[sat.id]){ return } // if we are already unlinked, do not call again, unless edge case. // TODO: BUG! This line should be deleted for "unlink deeply nested".
    					if(link){ delete (root.$.get(link).get(get)._.echo||'')[sat.id]; }
    					sat.on('in', {get: get, put: u, $: sat.$}); // TODO: BUG? Add recursive seen check?
    				},0,99);
    				return;
    			}
    			if(cat.soul){ return } // a soul cannot unlink itself.
    			if(msg.$$){ return } // a linked chain does not do the unlinking, the sub chain does. // TODO: BUG? Will this cancel maps?
    			link = valid(change); // need to unlink anytime we are not the same link, though only do this once per unlink (and not on init).
    			tmp = msg.$._||'';
    			if(link === tmp.link || (cat.has && !tmp.link)){
    				if((root.pass||'')[cat.id] && 'string' !== typeof link); else {
    					return;
    				}
    			}
    			delete (tmp.echo||'')[cat.id];
    			unlink({get: cat.get, put: u, $: msg.$, linked: msg.linked = msg.linked || tmp.link}, cat); // unlink our sub chains.
    		} Gun.on.unlink = unlink;

    		function ack(msg, ev){
    			//if(!msg['%'] && (this||'').off){ this.off() } // do NOT memory leak, turn off listeners! Now handled by .ask itself
    			// manhattan:
    			var as = this.as, at = as.$._; at.root; var get = as.get||'', tmp = (msg.put||'')[get['#']]||'';
    			if(!msg.put || ('string' == typeof get['.'] && u === tmp[get['.']])){
    				if(u !== at.put){ return }
    				if(!at.soul && !at.has){ return } // TODO: BUG? For now, only core-chains will handle not-founds, because bugs creep in if non-core chains are used as $ but we can revisit this later for more powerful extensions.
    				at.ack = (at.ack || 0) + 1;
    				at.on('in', {
    					get: at.get,
    					put: at.put = u,
    					$: at.$,
    					'@': msg['@']
    				});
    				/*(tmp = at.Q) && setTimeout.each(Object.keys(tmp), function(id){ // TODO: Temporary testing, not integrated or being used, probably delete.
    					Object.keys(msg).forEach(function(k){ tmp[k] = msg[k] }, tmp = {}); tmp['@'] = id; // copy message
    					root.on('in', tmp);
    				}); delete at.Q;*/
    				return;
    			}
    			(msg._||{}).miss = 1;
    			Gun.on.put(msg);
    			return; // eom
    		}

    		var empty = {}, u, text_rand = String.random, valid = Gun.valid, obj_has = function(o, k){ return o && Object.prototype.hasOwnProperty.call(o, k) }, state = Gun.state, state_is = state.is, state_ify = state.ify;
    	})(USE, './chain');
    USE(function(module){
    		var Gun = USE('./root');
    		Gun.chain.get = function(key, cb, as){
    			var gun, tmp;
    			if(typeof key === 'string'){
    				if(key.length == 0) {	
    					(gun = this.chain())._.err = {err: Gun.log('0 length key!', key)};
    					if(cb){ cb.call(gun, gun._.err); }
    					return gun;
    				}
    				var back = this, cat = back._;
    				var next = cat.next || empty;
    				if(!(gun = next[key])){
    					gun = key && cache(key, back);
    				}
    				gun = gun && gun.$;
    			} else
    			if('function' == typeof key){
    				if(true === cb){ return soul(this, key, cb, as), this }
    				gun = this;
    				var cat = gun._, opt = cb || {}, root = cat.root, id;
    				opt.at = cat;
    				opt.ok = key;
    				var wait = {}; // can we assign this to the at instead, like in once?
    				//var path = []; cat.$.back(at => { at.get && path.push(at.get.slice(0,9))}); path = path.reverse().join('.');
    				function any(msg, eve, f){
    					if(any.stun){ return }
    					if((tmp = root.pass) && !tmp[id]){ return }
    					var at = msg.$._, sat = (msg.$$||'')._, data = (sat||at).put, odd = (!at.has && !at.soul), test = {}, tmp;
    					if(odd || u === data){ // handles non-core
    						data = (u === ((tmp = msg.put)||'')['='])? (u === (tmp||'')[':'])? tmp : tmp[':'] : tmp['='];
    					}
    					if(('string' == typeof (tmp = Gun.valid(data)))){
    						data = (u === (tmp = root.$.get(tmp)._.put))? opt.not? u : data : tmp;
    					}
    					if(opt.not && u === data){ return }
    					if(u === opt.stun){
    						if((tmp = root.stun) && tmp.on){
    							cat.$.back(function(a){ // our chain stunned?
    								tmp.on(''+a.id, test = {});
    								if((test.run || 0) < any.id){ return test } // if there is an earlier stun on gapless parents/self.
    							});
    							!test.run && tmp.on(''+at.id, test = {}); // this node stunned?
    							!test.run && sat && tmp.on(''+sat.id, test = {}); // linked node stunned?
    							if(any.id > test.run){
    								if(!test.stun || test.stun.end){
    									test.stun = tmp.on('stun');
    									test.stun = test.stun && test.stun.last;
    								}
    								if(test.stun && !test.stun.end){
    									//if(odd && u === data){ return }
    									//if(u === msg.put){ return } // "not found" acks will be found if there is stun, so ignore these.
    									(test.stun.add || (test.stun.add = {}))[id] = function(){ any(msg,eve,1); }; // add ourself to the stun callback list that is called at end of the write.
    									return;
    								}
    							}
    						}
    						if(/*odd &&*/ u === data){ f = 0; } // if data not found, keep waiting/trying.
    						/*if(f && u === data){
    							cat.on('out', opt.out);
    							return;
    						}*/
    						if((tmp = root.hatch) && !tmp.end && u === opt.hatch && !f){ // quick hack! // What's going on here? Because data is streamed, we get things one by one, but a lot of developers would rather get a callback after each batch instead, so this does that by creating a wait list per chain id that is then called at the end of the batch by the hatch code in the root put listener.
    							if(wait[at.$._.id]){ return } wait[at.$._.id] = 1;
    							tmp.push(function(){any(msg,eve,1);});
    							return;
    						} wait = {}; // end quick hack.
    					}
    					// call:
    					if(root.pass){ if(root.pass[id+at.id]){ return } root.pass[id+at.id] = 1; }
    					if(opt.on){ opt.ok.call(at.$, data, at.get, msg, eve || any); return } // TODO: Also consider breaking `this` since a lot of people do `=>` these days and `.call(` has slower performance.
    					if(opt.v2020){ opt.ok(msg, eve || any); return }
    					Object.keys(msg).forEach(function(k){ tmp[k] = msg[k]; }, tmp = {}); msg = tmp; msg.put = data; // 2019 COMPATIBILITY! TODO: GET RID OF THIS!
    					opt.ok.call(opt.as, msg, eve || any); // is this the right
    				}				any.at = cat;
    				//(cat.any||(cat.any=function(msg){ setTimeout.each(Object.keys(cat.any||''), function(act){ (act = cat.any[act]) && act(msg) },0,99) }))[id = String.random(7)] = any; // maybe switch to this in future?
    				(cat.any||(cat.any={}))[id = String.random(7)] = any;
    				any.off = function(){ any.stun = 1; if(!cat.any){ return } delete cat.any[id]; };
    				any.rid = rid; // logic from old version, can we clean it up now?
    				any.id = opt.run || ++root.once; // used in callback to check if we are earlier than a write. // will this ever cause an integer overflow?
    				tmp = root.pass; (root.pass = {})[id] = 1; // Explanation: test trade-offs want to prevent recursion so we add/remove pass flag as it gets fulfilled to not repeat, however map map needs many pass flags - how do we reconcile?
    				opt.out = opt.out || {get: {}};
    				cat.on('out', opt.out);
    				root.pass = tmp;
    				return gun;
    			} else
    			if('number' == typeof key){
    				return this.get(''+key, cb, as);
    			} else
    			if('string' == typeof (tmp = valid(key))){
    				return this.get(tmp, cb, as);
    			} else
    			if(tmp = this.get.next){
    				gun = tmp(this, key);
    			}
    			if(!gun){
    				(gun = this.chain())._.err = {err: Gun.log('Invalid get request!', key)}; // CLEAN UP
    				if(cb){ cb.call(gun, gun._.err); }
    				return gun;
    			}
    			if(cb && 'function' == typeof cb){
    				gun.get(cb, as);
    			}
    			return gun;
    		};
    		function cache(key, back){
    			var cat = back._, next = cat.next, gun = back.chain(), at = gun._;
    			if(!next){ next = cat.next = {}; }
    			next[at.get = key] = at;
    			if(back === cat.root.$){
    				at.soul = key;
    			} else
    			if(cat.soul || cat.has){
    				at.has = key;
    				//if(obj_has(cat.put, key)){
    					//at.put = cat.put[key];
    				//}
    			}
    			return at;
    		}
    		function soul(gun, cb, opt, as){
    			var cat = gun._, acks = 0, tmp;
    			if(tmp = cat.soul || cat.link){ return cb(tmp, as, cat) }
    			if(cat.jam){ return cat.jam.push([cb, as]) }
    			cat.jam = [[cb,as]];
    			gun.get(function go(msg, eve){
    				if(u === msg.put && !cat.root.opt.super && (tmp = Object.keys(cat.root.opt.peers).length) && ++acks <= tmp){ // TODO: super should not be in core code, bring AXE up into core instead to fix? // TODO: .keys( is slow
    					return;
    				}
    				eve.rid(msg);
    				var at = ((at = msg.$) && at._) || {}, i = 0, as;
    				tmp = cat.jam; delete cat.jam; // tmp = cat.jam.splice(0, 100);
    				//if(tmp.length){ process.nextTick(function(){ go(msg, eve) }) }
    				while(as = tmp[i++]){ //Gun.obj.map(tmp, function(as, cb){
    					var cb = as[0]; as = as[1];
    					cb && cb(at.link || at.soul || Gun.valid(msg.put) || ((msg.put||{})._||{})['#'], as, msg, eve);
    				} //);
    			}, {out: {get: {'.':true}}});
    			return gun;
    		}
    		function rid(at){
    			var cat = this.at || this.on;
    			if(!at || cat.soul || cat.has){ return this.off() }
    			if(!(at = (at = (at = at.$ || at)._ || at).id)){ return }
    			cat.map; var seen;
    			//if(!map || !(tmp = map[at]) || !(tmp = tmp.at)){ return }
    			if((seen = this.seen || (this.seen = {}))[at]){ return true }
    			seen[at] = true;
    			return;
    		}
    		var empty = {}, valid = Gun.valid, u;
    	})(USE, './get');
    USE(function(module){
    		var Gun = USE('./root');
    		Gun.chain.put = function(data, cb, as){ // I rewrote it :)
    			var gun = this, at = gun._, root = at.root;
    			as = as || {};
    			as.root = at.root;
    			as.run || (as.run = root.once);
    			stun(as, at.id); // set a flag for reads to check if this chain is writing.
    			as.ack = as.ack || cb;
    			as.via = as.via || gun;
    			as.data = as.data || data;
    			as.soul || (as.soul = at.soul || ('string' == typeof cb && cb));
    			var s = as.state = as.state || Gun.state();
    			if('function' == typeof data){ data(function(d){ as.data = d; gun.put(u,u,as); }); return gun }
    			if(!as.soul){ return get(as), gun }
    			as.$ = root.$.get(as.soul); // TODO: This may not allow user chaining and similar?
    			as.todo = [{it: as.data, ref: as.$}];
    			as.turn = as.turn || turn;
    			as.ran = as.ran || ran;
    			//var path = []; as.via.back(at => { at.get && path.push(at.get.slice(0,9)) }); path = path.reverse().join('.');
    			// TODO: Perf! We only need to stun chains that are being modified, not necessarily written to.
    			(function walk(){
    				var to = as.todo, at = to.pop(), d = at.it; at.ref && at.ref._.id; var v, k, cat, tmp, g;
    				stun(as, at.ref);
    				if(tmp = at.todo){
    					k = tmp.pop(); d = d[k];
    					if(tmp.length){ to.push(at); }
    				}
    				k && (to.path || (to.path = [])).push(k);
    				if(!(v = valid(d)) && !(g = Gun.is(d))){
    					if(!Object.plain(d)){ (as.ack||noop).call(as, as.out = {err: as.err = Gun.log("Invalid data: " + ((d && (tmp = d.constructor) && tmp.name) || typeof d) + " at " + (as.via.back(function(at){at.get && tmp.push(at.get);}, tmp = []) || tmp.join('.'))+'.'+(to.path||[]).join('.'))}); as.ran(as); return }
    					var seen = as.seen || (as.seen = []), i = seen.length;
    					while(i--){ if(d === (tmp = seen[i]).it){ v = d = tmp.link; break } }
    				}
    				if(k && v){ at.node = state_ify(at.node, k, s, d); } // handle soul later.
    				else {
    					as.seen.push(cat = {it: d, link: {}, todo: g? [] : Object.keys(d).sort().reverse(), path: (to.path||[]).slice(), up: at}); // Any perf reasons to CPU schedule this .keys( ?
    					at.node = state_ify(at.node, k, s, cat.link);
    					!g && cat.todo.length && to.push(cat);
    					// ---------------
    					var id = as.seen.length;
    					(as.wait || (as.wait = {}))[id] = '';
    					tmp = (cat.ref = (g? d : k? at.ref.get(k) : at.ref))._;
    					(tmp = (d && (d._||'')['#']) || tmp.soul || tmp.link)? resolve({soul: tmp}) : cat.ref.get(resolve, {run: as.run, /*hatch: 0,*/ v2020:1, out:{get:{'.':' '}}}); // TODO: BUG! This should be resolve ONLY soul to prevent full data from being loaded. // Fixed now?
    					//setTimeout(function(){ if(F){ return } console.log("I HAVE NOT BEEN CALLED!", path, id, cat.ref._.id, k) }, 9000); var F; // MAKE SURE TO ADD F = 1 below!
    					function resolve(msg, eve){
    						var end = cat.link['#'];
    						if(eve){ eve.off(); eve.rid(msg); } // TODO: Too early! Check all peers ack not found.
    						// TODO: BUG maybe? Make sure this does not pick up a link change wipe, that it uses the changign link instead.
    						var soul = end || msg.soul || (tmp = (msg.$$||msg.$)._||'').soul || tmp.link || ((tmp = tmp.put||'')._||'')['#'] || tmp['#'] || (((tmp = msg.put||'') && msg.$$)? tmp['#'] : (tmp['=']||tmp[':']||'')['#']);
    						!end && stun(as, msg.$);
    						if(!soul && !at.link['#']){ // check soul link above us
    							(at.wait || (at.wait = [])).push(function(){ resolve(msg, eve); }); // wait
    							return;
    						}
    						if(!soul){
    							soul = [];
    							(msg.$$||msg.$).back(function(at){
    								if(tmp = at.soul || at.link){ return soul.push(tmp) }
    								soul.push(at.get);
    							});
    							soul = soul.reverse().join('/');
    						}
    						cat.link['#'] = soul;
    						!g && (((as.graph || (as.graph = {}))[soul] = (cat.node || (cat.node = {_:{}})))._['#'] = soul);
    						delete as.wait[id];
    						cat.wait && setTimeout.each(cat.wait, function(cb){ cb && cb(); });
    						as.ran(as);
    					}					// ---------------
    				}
    				if(!to.length){ return as.ran(as) }
    				as.turn(walk);
    			}());
    			return gun;
    		};

    		function stun(as, id){
    			if(!id){ return } id = (id._||'').id||id;
    			var run = as.root.stun || (as.root.stun = {on: Gun.on}), test = {}, tmp;
    			as.stun || (as.stun = run.on('stun', function(){ }));
    			if(tmp = run.on(''+id)){ tmp.the.last.next(test); }
    			if(test.run >= as.run){ return }
    			run.on(''+id, function(test){
    				if(as.stun.end){
    					this.off();
    					this.to.next(test);
    					return;
    				}
    				test.run = test.run || as.run;
    				test.stun = test.stun || as.stun; return;
    			});
    		}

    		function ran(as){
    			if(as.err){ ran.end(as.stun, as.root); return } // move log handle here.
    			if(as.todo.length || as.end || !Object.empty(as.wait)){ return } as.end = 1;
    			var cat = (as.$.back(-1)._), root = cat.root, ask = cat.ask(function(ack){
    				root.on('ack', ack);
    				if(ack.err){ Gun.log(ack); }
    				if(++acks > (as.acks || 0)){ this.off(); } // Adjustable ACKs! Only 1 by default.
    				if(!as.ack){ return }
    				as.ack(ack, this);
    			}, as.opt), acks = 0, stun = as.stun, tmp;
    			(tmp = function(){ // this is not official yet, but quick solution to hack in for now.
    				if(!stun){ return }
    				ran.end(stun, root);
    				setTimeout.each(Object.keys(stun = stun.add||''), function(cb){ if(cb = stun[cb]){cb();} }); // resume the stunned reads // Any perf reasons to CPU schedule this .keys( ?
    			}).hatch = tmp; // this is not official yet ^
    			//console.log(1, "PUT", as.run, as.graph);
    			(as.via._).on('out', {put: as.out = as.graph, opt: as.opt, '#': ask, _: tmp});
    		} ran.end = function(stun,root){
    			stun.end = noop; // like with the earlier id, cheaper to make this flag a function so below callbacks do not have to do an extra type check.
    			if(stun.the.to === stun && stun === stun.the.last){ delete root.stun; }
    			stun.off();
    		};

    		function get(as){
    			var at = as.via._, tmp;
    			as.via = as.via.back(function(at){
    				if(at.soul || !at.get){ return at.$ }
    				tmp = as.data; (as.data = {})[at.get] = tmp;
    			});
    			if(!as.via || !as.via._.soul){
    				as.via = at.root.$.get(((as.data||'')._||'')['#'] || at.$.back('opt.uuid')());
    			}
    			as.via.put(as.data, as.ack, as);
    			

    			return;
    		}

    		var u, noop = function(){}, turn = setTimeout.turn, valid = Gun.valid, state_ify = Gun.state.ify;
    	})(USE, './put');
    USE(function(module){
    		var Gun = USE('./root');
    		USE('./chain');
    		USE('./back');
    		USE('./put');
    		USE('./get');
    		module.exports = Gun;
    	})(USE, './index');
    USE(function(module){
    		var Gun = USE('./index');
    		Gun.chain.on = function(tag, arg, eas, as){ // don't rewrite!
    			var gun = this, cat = gun._; cat.root; var act;
    			if(typeof tag === 'string'){
    				if(!arg){ return cat.on(tag) }
    				act = cat.on(tag, arg, eas || cat, as);
    				if(eas && eas.$){
    					(eas.subs || (eas.subs = [])).push(act);
    				}
    				return gun;
    			}
    			var opt = arg;
    			(opt = (true === opt)? {change: true} : opt || {}).not = 1; opt.on = 1;
    			gun.get(tag, opt);
    			/*gun.get(function on(data,key,msg,eve){ var $ = this;
    				if(tmp = root.hatch){ // quick hack!
    					if(wait[$._.id]){ return } wait[$._.id] = 1;
    					tmp.push(function(){on.call($, data,key,msg,eve)});
    					return;
    				}; wait = {}; // end quick hack.
    				tag.call($, data,key,msg,eve);
    			}, opt); // TODO: PERF! Event listener leak!!!?*/
    			/*
    			function one(msg, eve){
    				if(one.stun){ return }
    				var at = msg.$._, data = at.put, tmp;
    				if(tmp = at.link){ data = root.$.get(tmp)._.put }
    				if(opt.not===u && u === data){ return }
    				if(opt.stun===u && (tmp = root.stun) && (tmp = tmp[at.id] || tmp[at.back.id]) && !tmp.end){ // Remember! If you port this into `.get(cb` make sure you allow stun:0 skip option for `.put(`.
    					tmp[id] = function(){one(msg,eve)};
    					return;
    				}
    				//tmp = one.wait || (one.wait = {}); console.log(tmp[at.id] === ''); if(tmp[at.id] !== ''){ tmp[at.id] = tmp[at.id] || setTimeout(function(){tmp[at.id]='';one(msg,eve)},1); return } delete tmp[at.id];
    				// call:
    				if(opt.as){
    					opt.ok.call(opt.as, msg, eve || one);
    				} else {
    					opt.ok.call(at.$, data, msg.get || at.get, msg, eve || one);
    				}
    			};
    			one.at = cat;
    			(cat.act||(cat.act={}))[id = String.random(7)] = one;
    			one.off = function(){ one.stun = 1; if(!cat.act){ return } delete cat.act[id] }
    			cat.on('out', {get: {}});*/
    			return gun;
    		};
    		// Rules:
    		// 1. If cached, should be fast, but not read while write.
    		// 2. Should not retrigger other listeners, should get triggered even if nothing found.
    		// 3. If the same callback passed to many different once chains, each should resolve - an unsubscribe from the same callback should not effect the state of the other resolving chains, if you do want to cancel them all early you should mutate the callback itself with a flag & check for it at top of callback
    		Gun.chain.once = function(cb, opt){ opt = opt || {}; // avoid rewriting
    			if(!cb){ return none(this) }
    			var gun = this, cat = gun._, root = cat.root; cat.put; var id = String.random(7), tmp;
    			gun.get(function(data,key,msg,eve){
    				var $ = this, at = $._, one = (at.one||(at.one={}));
    				if(eve.stun){ return } if('' === one[id]){ return }
    				if(true === (tmp = Gun.valid(data))){ once(); return }
    				if('string' == typeof tmp){ return } // TODO: BUG? Will this always load?
    				clearTimeout((cat.one||'')[id]); // clear "not found" since they only get set on cat.
    				clearTimeout(one[id]); one[id] = setTimeout(once, opt.wait||99); // TODO: Bug? This doesn't handle plural chains.
    				function once(){
    					if(!at.has && !at.soul){ at = {put: data, get: key}; } // handles non-core messages.
    					if(u === (tmp = at.put)){ tmp = ((msg.$$||'')._||'').put; }
    					if('string' == typeof Gun.valid(tmp)){ tmp = root.$.get(tmp)._.put; if(tmp === u){return} }
    					if(eve.stun){ return } if('' === one[id]){ return } one[id] = '';
    					if(cat.soul || cat.has){ eve.off(); } // TODO: Plural chains? // else { ?.off() } // better than one check?
    					cb.call($, tmp, at.get);
    				}			}, {on: 1});
    			return gun;
    		};
    		function none(gun,opt,chain){
    			Gun.log.once("valonce", "Chainable val is experimental, its behavior and API may change moving forward. Please play with it and report bugs and ideas on how to improve it.");
    			(chain = gun.chain())._.nix = gun.once(function(data, key){ chain._.on('in', this._); });
    			chain._.lex = gun._.lex; // TODO: Better approach in future? This is quick for now.
    			return chain;
    		}

    		Gun.chain.off = function(){
    			// make off more aggressive. Warning, it might backfire!
    			var gun = this, at = gun._, tmp;
    			var cat = at.back;
    			if(!cat){ return }
    			at.ack = 0; // so can resubscribe.
    			if(tmp = cat.next){
    				if(tmp[at.get]){
    					delete tmp[at.get];
    				}
    			}
    			// TODO: delete cat.one[map.id]?
    			if(tmp = cat.ask){
    				delete tmp[at.get];
    			}
    			if(tmp = cat.put){
    				delete tmp[at.get];
    			}
    			if(tmp = at.soul){
    				delete cat.root.graph[tmp];
    			}
    			if(tmp = at.map){
    				Object.keys(tmp).forEach(function(i,at){ at = tmp[i]; //obj_map(tmp, function(at){
    					if(at.link){
    						cat.root.$.get(at.link).off();
    					}
    				});
    			}
    			if(tmp = at.next){
    				Object.keys(tmp).forEach(function(i,neat){ neat = tmp[i]; //obj_map(tmp, function(neat){
    					neat.$.off();
    				});
    			}
    			at.on('off', {});
    			return gun;
    		};
    		var u;
    	})(USE, './on');
    USE(function(module){
    		var Gun = USE('./index'), next = Gun.chain.get.next;
    		Gun.chain.get.next = function(gun, lex){ var tmp;
    			if(!Object.plain(lex)){ return (next||noop)(gun, lex) }
    			if(tmp = ((tmp = lex['#'])||'')['='] || tmp){ return gun.get(tmp) }
    			(tmp = gun.chain()._).lex = lex; // LEX!
    			gun.on('in', function(eve){
    				if(String.match(eve.get|| (eve.put||'')['.'], lex['.'] || lex['#'] || lex)){
    					tmp.on('in', eve);
    				}
    				this.to.next(eve);
    			});
    			return tmp.$;
    		};
    		Gun.chain.map = function(cb, opt, t){
    			var gun = this, cat = gun._, lex, chain;
    			if(Object.plain(cb)){ lex = cb['.']? cb : {'.': cb}; cb = u; }
    			if(!cb){
    				if(chain = cat.each){ return chain }
    				(cat.each = chain = gun.chain())._.lex = lex || chain._.lex || cat.lex;
    				chain._.nix = gun.back('nix');
    				gun.on('in', map, chain._);
    				return chain;
    			}
    			Gun.log.once("mapfn", "Map functions are experimental, their behavior and API may change moving forward. Please play with it and report bugs and ideas on how to improve it.");
    			chain = gun.chain();
    			gun.map().on(function(data, key, msg, eve){
    				var next = (cb||noop).call(this, data, key, msg, eve);
    				if(u === next){ return }
    				if(data === next){ return chain._.on('in', msg) }
    				if(Gun.is(next)){ return chain._.on('in', next._) }
    				var tmp = {}; Object.keys(msg.put).forEach(function(k){ tmp[k] = msg.put[k]; }, tmp); tmp['='] = next; 
    				chain._.on('in', {get: key, put: tmp});
    			});
    			return chain;
    		};
    		function map(msg){ this.to.next(msg);
    			var cat = this.as, gun = msg.$, at = gun._, put = msg.put, tmp;
    			if(!at.soul && !msg.$$){ return } // this line took hundreds of tries to figure out. It only works if core checks to filter out above chains during link tho. This says "only bother to map on a node" for this layer of the chain. If something is not a node, map should not work.
    			if((tmp = cat.lex) && !String.match(msg.get|| (put||'')['.'], tmp['.'] || tmp['#'] || tmp)){ return }
    			Gun.on.link(msg, cat);
    		}
    		var noop = function(){}, u;
    	})(USE, './map');
    USE(function(module){
    		var Gun = USE('./index');
    		Gun.chain.set = function(item, cb, opt){
    			var gun = this, root = gun.back(-1), soul, tmp;
    			cb = cb || function(){};
    			opt = opt || {}; opt.item = opt.item || item;
    			if(soul = ((item||'')._||'')['#']){ (item = {})['#'] = soul; } // check if node, make link.
    			if('string' == typeof (tmp = Gun.valid(item))){ return gun.get(soul = tmp).put(item, cb, opt) } // check if link
    			if(!Gun.is(item)){
    				if(Object.plain(item)){
    					item = root.get(soul = gun.back('opt.uuid')()).put(item);
    				}
    				return gun.get(soul || root.back('opt.uuid')(7)).put(item, cb, opt);
    			}
    			gun.put(function(go){
    				item.get(function(soul, o, msg){ // TODO: BUG! We no longer have this option? & go error not handled?
    					if(!soul){ return cb.call(gun, {err: Gun.log('Only a node can be linked! Not "' + msg.put + '"!')}) }
    					(tmp = {})[soul] = {'#': soul}; go(tmp);
    				},true);
    			});
    			return item;
    		};
    	})(USE, './set');
    USE(function(module){
    		USE('./shim');

    		function Mesh(root){
    			var mesh = function(){};
    			var opt = root.opt || {};
    			opt.log = opt.log || console.log;
    			opt.gap = opt.gap || opt.wait || 0;
    			opt.max = opt.max || (opt.memory? (opt.memory * 999 * 999) : 300000000) * 0.3;
    			opt.pack = opt.pack || (opt.max * 0.01 * 0.01);
    			opt.puff = opt.puff || 9; // IDEA: do a start/end benchmark, divide ops/result.
    			var puff = setTimeout.turn || setTimeout;
    			var parse = JSON.parseAsync || function(t,cb,r){ var u; try{ cb(u, JSON.parse(t,r)); }catch(e){ cb(e); } };
    			var json = JSON.stringifyAsync || function(v,cb,r,s){ var u; try{ cb(u, JSON.stringify(v,r,s)); }catch(e){ cb(e); } };

    			var dup = root.dup, dup_check = dup.check, dup_track = dup.track;

    			var hear = mesh.hear = function(raw, peer){
    				if(!raw){ return }
    				if(opt.max <= raw.length){ return mesh.say({dam: '!', err: "Message too big!"}, peer) }
    				if(mesh === this){
    					/*if('string' == typeof raw){ try{
    						var stat = console.STAT || {};
    						//console.log('HEAR:', peer.id, (raw||'').slice(0,250), ((raw||'').length / 1024 / 1024).toFixed(4));
    						
    						//console.log(setTimeout.turn.s.length, 'stacks', parseFloat((-(LT - (LT = +new Date))/1000).toFixed(3)), 'sec', parseFloat(((LT-ST)/1000 / 60).toFixed(1)), 'up', stat.peers||0, 'peers', stat.has||0, 'has', stat.memhused||0, stat.memused||0, stat.memax||0, 'heap mem max');
    					}catch(e){ console.log('DBG err', e) }}*/
    					hear.d += raw.length||0 ; ++hear.c; } // STATS!
    				var S = peer.SH = +new Date;
    				var tmp = raw[0], msg;
    				//raw && raw.slice && console.log("hear:", ((peer.wire||'').headers||'').origin, raw.length, raw.slice && raw.slice(0,50)); //tc-iamunique-tc-package-ds1
    				if('[' === tmp){
    					parse(raw, function(err, msg){
    						if(err || !msg){ return mesh.say({dam: '!', err: "DAM JSON parse error."}, peer) }
    						console.STAT && console.STAT(+new Date, msg.length, '# on hear batch');
    						var P = opt.puff;
    						(function go(){
    							var S = +new Date;
    							var i = 0, m; while(i < P && (m = msg[i++])){ hear(m, peer); }
    							msg = msg.slice(i); // slicing after is faster than shifting during.
    							console.STAT && console.STAT(S, +new Date - S, 'hear loop');
    							flush(peer); // force send all synchronously batched acks.
    							if(!msg.length){ return }
    							puff(go, 0);
    						}());
    					});
    					raw = ''; // 
    					return;
    				}
    				if('{' === tmp || ((raw['#'] || Object.plain(raw)) && (msg = raw))){
    					if(msg){ return hear.one(msg, peer, S) }
    					parse(raw, function(err, msg){
    						if(err || !msg){ return mesh.say({dam: '!', err: "DAM JSON parse error."}, peer) }
    						hear.one(msg, peer, S);
    					});
    					return;
    				}
    			};
    			hear.one = function(msg, peer, S){ // S here is temporary! Undo.
    				var id, hash, tmp, ash, DBG;
    				if(msg.DBG){ msg.DBG = DBG = {DBG: msg.DBG}; }
    				DBG && (DBG.h = S);
    				DBG && (DBG.hp = +new Date);
    				if(!(id = msg['#'])){ id = msg['#'] = String.random(9); }
    				if(tmp = dup_check(id)){ return }
    				// DAM logic:
    				if(!(hash = msg['##']) && false && u !== msg.put); // disable hashing for now // TODO: impose warning/penalty instead (?)
    				if(hash && (tmp = msg['@'] || (msg.get && id)) && dup.check(ash = tmp+hash)){ return } // Imagine A <-> B <=> (C & D), C & D reply with same ACK but have different IDs, B can use hash to dedup. Or if a GET has a hash already, we shouldn't ACK if same.
    				(msg._ = function(){}).via = mesh.leap = peer;
    				if((tmp = msg['><']) && 'string' == typeof tmp){ tmp.slice(0,99).split(',').forEach(function(k){ this[k] = 1; }, (msg._).yo = {}); } // Peers already sent to, do not resend.
    				// DAM ^
    				if(tmp = msg.dam){
    					if(tmp = mesh.hear[tmp]){
    						tmp(msg, peer, root);
    					}
    					dup_track(id);
    					return;
    				}
    				var S = +new Date;
    				DBG && (DBG.is = S); peer.SI = id;
    				root.on('in', mesh.last = msg);
    				//ECHO = msg.put || ECHO; !(msg.ok !== -3740) && mesh.say({ok: -3740, put: ECHO, '@': msg['#']}, peer);
    				DBG && (DBG.hd = +new Date);
    				console.STAT && console.STAT(S, +new Date - S, msg.get? 'msg get' : msg.put? 'msg put' : 'msg');
    				(tmp = dup_track(id)).via = peer; // don't dedup message ID till after, cause GUN has internal dedup check.
    				if(msg.get){ tmp.it = msg; }
    				if(ash){ dup_track(ash); } //dup.track(tmp+hash, true).it = it(msg);
    				mesh.leap = mesh.last = null; // warning! mesh.leap could be buggy.
    			};
    			hear.c = hear.d = 0;
    (function(){
    				var SMIA = 0;
    				var loop;
    				mesh.hash = function(msg, peer){ var h, s, t;
    					var S = +new Date;
    					json(msg.put, function hash(err, text){
    						var ss = (s || (s = t = text||'')).slice(0, 32768); // 1024 * 32
    					  h = String.hash(ss, h); s = s.slice(32768);
    					  if(s){ puff(hash, 0); return }
    						console.STAT && console.STAT(S, +new Date - S, 'say json+hash');
    					  msg._.$put = t;
    					  msg['##'] = h;
    					  say(msg, peer);
    					  delete msg._.$put;
    					}, sort);
    				};
    				function sort(k, v){ var tmp;
    					if(!(v instanceof Object)){ return v }
    					Object.keys(v).sort().forEach(sorta, {to: tmp = {}, on: v});
    					return tmp;
    				} function sorta(k){ this.to[k] = this.on[k]; }

    				var say = mesh.say = function(msg, peer){ var tmp;
    					if((tmp = this) && (tmp = tmp.to) && tmp.next){ tmp.next(msg); } // compatible with middleware adapters.
    					if(!msg){ return false }
    					var id, raw, ack = msg['@'];
    //if(opt.super && (!ack || !msg.put)){ return } // TODO: MANHATTAN STUB //OBVIOUSLY BUG! But squelch relay. // :( get only is 100%+ CPU usage :(
    					var meta = msg._||(msg._=function(){});
    					var DBG = msg.DBG, S = +new Date; meta.y = meta.y || S; if(!peer){ DBG && (DBG.y = S); }
    					if(!(id = msg['#'])){ id = msg['#'] = String.random(9); }
    					!loop && dup_track(id);//.it = it(msg); // track for 9 seconds, default. Earth<->Mars would need more! // always track, maybe move this to the 'after' logic if we split function.
    					if(msg.put && (msg.err || (dup.s[id]||'').err)){ return false } // TODO: in theory we should not be able to stun a message, but for now going to check if it can help network performance preventing invalid data to relay.
    					if(!(msg['##']) && u !== msg.put && !meta.via && ack){ mesh.hash(msg, peer); return } // TODO: Should broadcasts be hashed?
    					if(!peer && ack){ peer = ((tmp = dup.s[ack]) && (tmp.via || ((tmp = tmp.it) && (tmp = tmp._) && tmp.via))) || ((tmp = mesh.last) && ack === tmp['#'] && mesh.leap); } // warning! mesh.leap could be buggy! mesh last check reduces this.
    					if(!peer && ack){ // still no peer, then ack daisy chain lost.
    						if(dup.s[ack]){ return } // in dups but no peer hints that this was ack to self, ignore.
    						console.STAT && console.STAT(+new Date, ++SMIA, 'total no peer to ack to');
    						return false;
    					} // TODO: Temporary? If ack via trace has been lost, acks will go to all peers, which trashes browser bandwidth. Not relaying the ack will force sender to ask for ack again. Note, this is technically wrong for mesh behavior.
    					if(!peer && mesh.way){ return mesh.way(msg) }
    					DBG && (DBG.yh = +new Date);
    					if(!(raw = meta.raw)){ mesh.raw(msg, peer); return }
    					DBG && (DBG.yr = +new Date);
    					if(!peer || !peer.id){
    						if(!Object.plain(peer || opt.peers)){ return false }
    						var S = +new Date;
    						opt.puff; var ps = opt.peers, pl = Object.keys(peer || opt.peers || {}); // TODO: .keys( is slow
    						console.STAT && console.STAT(S, +new Date - S, 'peer keys');
    (function go(){
    							var S = +new Date;
    							//Type.obj.map(peer || opt.peers, each); // in case peer is a peer list.
    							loop = 1; var wr = meta.raw; meta.raw = raw; // quick perf hack
    							var i = 0, p; while(i < 9 && (p = (pl||'')[i++])){
    								if(!(p = ps[p])){ continue }
    								say(msg, p);
    							}
    							meta.raw = wr; loop = 0;
    							pl = pl.slice(i); // slicing after is faster than shifting during.
    							console.STAT && console.STAT(S, +new Date - S, 'say loop');
    							if(!pl.length){ return }
    							puff(go, 0);
    							ack && dup_track(ack); // keep for later
    						}());
    						return;
    					}
    					// TODO: PERF: consider splitting function here, so say loops do less work.
    					if(!peer.wire && mesh.wire){ mesh.wire(peer); }
    					if(id === peer.last){ return } peer.last = id;  // was it just sent?
    					if(peer === meta.via){ return false } // don't send back to self.
    					if((tmp = meta.yo) && (tmp[peer.url] || tmp[peer.pid] || tmp[peer.id]) /*&& !o*/){ return false }
    					console.STAT && console.STAT(S, ((DBG||meta).yp = +new Date) - (meta.y || S), 'say prep');
    					!loop && ack && dup_track(ack); // streaming long responses needs to keep alive the ack.
    					if(peer.batch){
    						peer.tail = (tmp = peer.tail || 0) + raw.length;
    						if(peer.tail <= opt.pack){
    							peer.batch += (tmp?',':'')+raw;
    							return;
    						}
    						flush(peer);
    					}
    					peer.batch = '['; // Prevents double JSON!
    					var ST = +new Date;
    					setTimeout(function(){
    						console.STAT && console.STAT(ST, +new Date - ST, '0ms TO');
    						flush(peer);
    					}, opt.gap); // TODO: queuing/batching might be bad for low-latency video game performance! Allow opt out?
    					send(raw, peer);
    					console.STAT && (ack === peer.SI) && console.STAT(S, +new Date - peer.SH, 'say ack');
    				};
    				mesh.say.c = mesh.say.d = 0;
    				// TODO: this caused a out-of-memory crash!
    				mesh.raw = function(msg, peer){ // TODO: Clean this up / delete it / move logic out!
    					if(!msg){ return '' }
    					var meta = (msg._) || {}, put, tmp;
    					if(tmp = meta.raw){ return tmp }
    					if('string' == typeof msg){ return msg }
    					var hash = msg['##'], ack = msg['@'];
    					if(hash && ack){
    						if(!meta.via && dup_check(ack+hash)){ return false } // for our own out messages, memory & storage may ack the same thing, so dedup that. Tho if via another peer, we already tracked it upon hearing, so this will always trigger false positives, so don't do that!
    						if((tmp = (dup.s[ack]||'').it) || ((tmp = mesh.last) && ack === tmp['#'])){
    							if(hash === tmp['##']){ return false } // if ask has a matching hash, acking is optional.
    							if(!tmp['##']){ tmp['##'] = hash; } // if none, add our hash to ask so anyone we relay to can dedup. // NOTE: May only check against 1st ack chunk, 2nd+ won't know and still stream back to relaying peers which may then dedup. Any way to fix this wasted bandwidth? I guess force rate limiting breaking change, that asking peer has to ask for next lexical chunk.
    						}
    					}
    					if(!msg.dam){
    						var i = 0, to = []; tmp = opt.peers;
    						for(var k in tmp){ var p = tmp[k]; // TODO: Make it up peers instead!
    							to.push(p.url || p.pid || p.id);
    							if(++i > 6){ break }
    						}
    						if(i > 1){ msg['><'] = to.join(); } // TODO: BUG! This gets set regardless of peers sent to! Detect?
    					}
    					if(put = meta.$put){
    						tmp = {}; Object.keys(msg).forEach(function(k){ tmp[k] = msg[k]; });
    						tmp.put = ':])([:';
    						json(tmp, function(err, raw){
    							if(err){ return } // TODO: Handle!!
    							var S = +new Date;
    							tmp = raw.indexOf('"put":":])([:"');
    							res(u, raw = raw.slice(0, tmp+6) + put + raw.slice(tmp + 14));
    							console.STAT && console.STAT(S, +new Date - S, 'say slice');
    						});
    						return;
    					}
    					json(msg, res);
    					function res(err, raw){
    						if(err){ return } // TODO: Handle!!
    						meta.raw = raw; //if(meta && (raw||'').length < (999 * 99)){ meta.raw = raw } // HNPERF: If string too big, don't keep in memory.
    						say(msg, peer);
    					}
    				};
    			}());

    			function flush(peer){
    				var tmp = peer.batch, t = 'string' == typeof tmp;
    				if(t){ tmp += ']'; }// TODO: Prevent double JSON!
    				peer.batch = peer.tail = null;
    				if(!tmp){ return }
    				if(t? 3 > tmp.length : !tmp.length){ return } // TODO: ^
    				if(!t){try{tmp = (1 === tmp.length? tmp[0] : JSON.stringify(tmp));
    				}catch(e){return opt.log('DAM JSON stringify error', e)}}
    				if(!tmp){ return }
    				send(tmp, peer);
    			}
    			// for now - find better place later.
    			function send(raw, peer){ try{
    				//console.log('SAY:', peer.id, (raw||'').slice(0,250), ((raw||'').length / 1024 / 1024).toFixed(4));
    				var wire = peer.wire;
    				if(peer.say){
    					peer.say(raw);
    				} else
    				if(wire.send){
    					wire.send(raw);
    				}
    				mesh.say.d += raw.length||0; ++mesh.say.c; // STATS!
    			}catch(e){
    				(peer.queue = peer.queue || []).push(raw);
    			}}

    			mesh.hi = function(peer){
    				var tmp = peer.wire || {};
    				if(peer.id){
    					opt.peers[peer.url || peer.id] = peer;
    				} else {
    					tmp = peer.id = peer.id || String.random(9);
    					mesh.say({dam: '?', pid: root.opt.pid}, opt.peers[tmp] = peer);
    					delete dup.s[peer.last]; // IMPORTANT: see https://gun.eco/docs/DAM#self
    				}
    				peer.met = peer.met || +(new Date);
    				if(!tmp.hied){ root.on(tmp.hied = 'hi', peer); }
    				// @rogowski I need this here by default for now to fix go1dfish's bug
    				tmp = peer.queue; peer.queue = [];
    				setTimeout.each(tmp||[],function(msg){
    					send(msg, peer);
    				},0,9);
    				//Type.obj.native && Type.obj.native(); // dirty place to check if other JS polluted.
    			};
    			mesh.bye = function(peer){
    				root.on('bye', peer);
    				var tmp = +(new Date); tmp = (tmp - (peer.met||tmp));
    				mesh.bye.time = ((mesh.bye.time || tmp) + tmp) / 2;
    			};
    			mesh.hear['!'] = function(msg, peer){ opt.log('Error:', msg.err); };
    			mesh.hear['?'] = function(msg, peer){
    				if(msg.pid){
    					if(!peer.pid){ peer.pid = msg.pid; }
    					if(msg['@']){ return }
    				}
    				mesh.say({dam: '?', pid: opt.pid, '@': msg['#']}, peer);
    				delete dup.s[peer.last]; // IMPORTANT: see https://gun.eco/docs/DAM#self
    			};

    			root.on('create', function(root){
    				root.opt.pid = root.opt.pid || String.random(9);
    				this.to.next(root);
    				root.on('out', mesh.say);
    			});

    			root.on('bye', function(peer, tmp){
    				peer = opt.peers[peer.id || peer] || peer;
    				this.to.next(peer);
    				peer.bye? peer.bye() : (tmp = peer.wire) && tmp.close && tmp.close();
    				delete opt.peers[peer.id];
    				peer.wire = null;
    			});

    			var gets = {};
    			root.on('bye', function(peer, tmp){ this.to.next(peer);
    				if(tmp = console.STAT){ tmp.peers = (tmp.peers || 0) - 1; }
    				if(!(tmp = peer.url)){ return } gets[tmp] = true;
    				setTimeout(function(){ delete gets[tmp]; },opt.lack || 9000);
    			});
    			root.on('hi', function(peer, tmp){ this.to.next(peer);
    				if(tmp = console.STAT){ tmp.peers = (tmp.peers || 0) + 1; }
    				if(!(tmp = peer.url) || !gets[tmp]){ return } delete gets[tmp];
    				if(opt.super){ return } // temporary (?) until we have better fix/solution?
    				setTimeout.each(Object.keys(root.next), function(soul){ root.next[soul]; // TODO: .keys( is slow
    					tmp = {}; tmp[soul] = root.graph[soul]; tmp = String.hash(tmp); // TODO: BUG! This is broken.
    					mesh.say({'##': tmp, get: {'#': soul}}, peer);
    				});
    			});

    			return mesh;
    		}
    	  var u;

    	  try{ module.exports = Mesh; }catch(e){}

    	})(USE, './mesh');
    USE(function(module){
    		var Gun = USE('../index');
    		Gun.Mesh = USE('./mesh');

    		// TODO: resync upon reconnect online/offline
    		//window.ononline = window.onoffline = function(){ console.log('online?', navigator.onLine) }

    		Gun.on('opt', function(root){
    			this.to.next(root);
    			if(root.once){ return }
    			var opt = root.opt;
    			if(false === opt.WebSocket){ return }

    			var env = Gun.window || {};
    			var websocket = opt.WebSocket || env.WebSocket || env.webkitWebSocket || env.mozWebSocket;
    			if(!websocket){ return }
    			opt.WebSocket = websocket;

    			var mesh = opt.mesh = opt.mesh || Gun.Mesh(root);

    			mesh.wire || opt.wire;
    			mesh.wire = opt.wire = open;
    			function open(peer){ try{
    				if(!peer || !peer.url){ return wire && wire(peer) }
    				var url = peer.url.replace(/^http/, 'ws');
    				var wire = peer.wire = new opt.WebSocket(url);
    				wire.onclose = function(){
    					opt.mesh.bye(peer);
    					reconnect(peer);
    				};
    				wire.onerror = function(error){
    					reconnect(peer);
    				};
    				wire.onopen = function(){
    					opt.mesh.hi(peer);
    				};
    				wire.onmessage = function(msg){
    					if(!msg){ return }
    					opt.mesh.hear(msg.data || msg, peer);
    				};
    				return wire;
    			}catch(e){}}

    			setTimeout(function(){ !opt.super && root.on('out', {dam:'hi'}); },1); // it can take a while to open a socket, so maybe no longer lazy load for perf reasons?

    			var wait = 2 * 999;
    			function reconnect(peer){
    				clearTimeout(peer.defer);
    				if(doc && peer.retry <= 0){ return }
    				peer.retry = (peer.retry || opt.retry+1 || 60) - ((-peer.tried + (peer.tried = +new Date) < wait*4)?1:0);
    				peer.defer = setTimeout(function to(){
    					if(doc && doc.hidden){ return setTimeout(to,wait) }
    					open(peer);
    				}, wait);
    			}
    			var doc = (''+u !== typeof document) && document;
    		});
    		var u;
    	})(USE, './websocket');
    USE(function(module){
    		if(typeof Gun === 'undefined'){ return }

    		var noop = function(){}, store;
    		try{store = (Gun.window||noop).localStorage;}catch(e){}
    		if(!store){
    			Gun.log("Warning: No localStorage exists to persist data to!");
    			store = {setItem: function(k,v){this[k]=v;}, removeItem: function(k){delete this[k];}, getItem: function(k){return this[k]}};
    		}
    		Gun.on('create', function lg(root){
    			this.to.next(root);
    			var opt = root.opt; root.graph; var acks = [], disk, to;
    			if(false === opt.localStorage){ return }
    			opt.prefix = opt.file || 'gun/';
    			try{ disk = lg[opt.prefix] = lg[opt.prefix] || JSON.parse(store.getItem(opt.prefix)) || {}; // TODO: Perf! This will block, should we care, since limited to 5MB anyways?
    			}catch(e){ disk = lg[opt.prefix] = {}; }

    			root.on('get', function(msg){
    				this.to.next(msg);
    				var lex = msg.get, soul, data, tmp, u;
    				if(!lex || !(soul = lex['#'])){ return }
    				data = disk[soul] || u;
    				if(data && (tmp = lex['.']) && !Object.plain(tmp)){ // pluck!
    					data = Gun.state.ify({}, tmp, Gun.state.is(data, tmp), data[tmp], soul);
    				}
    				//if(data){ (tmp = {})[soul] = data } // back into a graph.
    				//setTimeout(function(){
    				Gun.on.get.ack(msg, data); //root.on('in', {'@': msg['#'], put: tmp, lS:1});// || root.$});
    				//}, Math.random() * 10); // FOR TESTING PURPOSES!
    			});

    			root.on('put', function(msg){
    				this.to.next(msg); // remember to call next middleware adapter
    				var put = msg.put, soul = put['#'], key = put['.']; // pull data off wire envelope
    				disk[soul] = Gun.state.ify(disk[soul], key, put['>'], put[':'], soul); // merge into disk object
    				if(!msg['@']){ acks.push(msg['#']); } // then ack any non-ack write. // TODO: use batch id.
    				if(to){ return }
    				//flush();return;
    				to = setTimeout(flush, opt.wait || 1); // that gets saved as a whole to disk every 1ms
    			});
    			function flush(){
    				var err, ack = acks; clearTimeout(to); to = false; acks = [];
    				try{store.setItem(opt.prefix, JSON.stringify(disk));
    				}catch(e){
    					Gun.log((err = (e || "localStorage failure")) + " Consider using GUN's IndexedDB plugin for RAD for more storage space, https://gun.eco/docs/RAD#install");
    					root.on('localStorage:error', {err: err, get: opt.prefix, put: disk});
    				}
    				if(!err && !Object.empty(opt.peers)){ return } // only ack if there are no peers. // Switch this to probabilistic mode
    				setTimeout.each(ack, function(id){
    					root.on('in', {'@': id, err: err, ok: 0}); // localStorage isn't reliable, so make its `ok` code be a low number.
    				});
    			}
    		
    		});
    	})(USE, './localStorage');

    }());
    (function(){
    	var u;
    	if(''+u == typeof Gun){ return }
    	var DEP = function(n){ console.log("Warning! Deprecated internal utility will break in next version:", n); };
    	// Generic javascript utilities.
    	var Type = Gun;
    	//Type.fns = Type.fn = {is: function(fn){ return (!!fn && fn instanceof Function) }}
    	Type.fn = Type.fn || {is: function(fn){ DEP('fn'); return (!!fn && 'function' == typeof fn) }};
    	Type.bi = Type.bi || {is: function(b){ DEP('bi');return (b instanceof Boolean || typeof b == 'boolean') }};
    	Type.num = Type.num || {is: function(n){ DEP('num'); return !list_is(n) && ((n - parseFloat(n) + 1) >= 0 || Infinity === n || -Infinity === n) }};
    	Type.text = Type.text || {is: function(t){ DEP('text'); return (typeof t == 'string') }};
    	Type.text.ify = Type.text.ify || function(t){ DEP('text.ify');
    		if(Type.text.is(t)){ return t }
    		if(typeof JSON !== "undefined"){ return JSON.stringify(t) }
    		return (t && t.toString)? t.toString() : t;
    	};
    	Type.text.random = Type.text.random || function(l, c){ DEP('text.random');
    		var s = '';
    		l = l || 24; // you are not going to make a 0 length random number, so no need to check type
    		c = c || '0123456789ABCDEFGHIJKLMNOPQRSTUVWXZabcdefghijklmnopqrstuvwxyz';
    		while(l > 0){ s += c.charAt(Math.floor(Math.random() * c.length)); l--; }
    		return s;
    	};
    	Type.text.match = Type.text.match || function(t, o){ var tmp, u; DEP('text.match');
    		if('string' !== typeof t){ return false }
    		if('string' == typeof o){ o = {'=': o}; }
    		o = o || {};
    		tmp = (o['='] || o['*'] || o['>'] || o['<']);
    		if(t === tmp){ return true }
    		if(u !== o['=']){ return false }
    		tmp = (o['*'] || o['>'] || o['<']);
    		if(t.slice(0, (tmp||'').length) === tmp){ return true }
    		if(u !== o['*']){ return false }
    		if(u !== o['>'] && u !== o['<']){
    			return (t >= o['>'] && t <= o['<'])? true : false;
    		}
    		if(u !== o['>'] && t >= o['>']){ return true }
    		if(u !== o['<'] && t <= o['<']){ return true }
    		return false;
    	};
    	Type.text.hash = Type.text.hash || function(s, c){ // via SO
    		DEP('text.hash');
    		if(typeof s !== 'string'){ return }
    	  c = c || 0;
    	  if(!s.length){ return c }
    	  for(var i=0,l=s.length,n; i<l; ++i){
    	    n = s.charCodeAt(i);
    	    c = ((c<<5)-c)+n;
    	    c |= 0;
    	  }
    	  return c;
    	};
    	Type.list = Type.list || {is: function(l){ DEP('list'); return (l instanceof Array) }};
    	Type.list.slit = Type.list.slit || Array.prototype.slice;
    	Type.list.sort = Type.list.sort || function(k){ // creates a new sort function based off some key
    		DEP('list.sort');
    		return function(A,B){
    			if(!A || !B){ return 0 } A = A[k]; B = B[k];
    			if(A < B){ return -1 }else if(A > B){ return 1 }
    			else { return 0 }
    		}
    	};
    	Type.list.map = Type.list.map || function(l, c, _){ DEP('list.map'); return obj_map(l, c, _) };
    	Type.list.index = 1; // change this to 0 if you want non-logical, non-mathematical, non-matrix, non-convenient array notation
    	Type.obj = Type.boj || {is: function(o){ DEP('obj'); return o? (o instanceof Object && o.constructor === Object) || Object.prototype.toString.call(o).match(/^\[object (\w+)\]$/)[1] === 'Object' : false }};
    	Type.obj.put = Type.obj.put || function(o, k, v){ DEP('obj.put'); return (o||{})[k] = v, o };
    	Type.obj.has = Type.obj.has || function(o, k){ DEP('obj.has'); return o && Object.prototype.hasOwnProperty.call(o, k) };
    	Type.obj.del = Type.obj.del || function(o, k){ DEP('obj.del'); 
    		if(!o){ return }
    		o[k] = null;
    		delete o[k];
    		return o;
    	};
    	Type.obj.as = Type.obj.as || function(o, k, v, u){ DEP('obj.as'); return o[k] = o[k] || (u === v? {} : v) };
    	Type.obj.ify = Type.obj.ify || function(o){ DEP('obj.ify'); 
    		if(obj_is(o)){ return o }
    		try{o = JSON.parse(o);
    		}catch(e){o={};}		return o;
    	}
    	;(function(){ var u;
    		function map(v,k){
    			if(obj_has(this,k) && u !== this[k]){ return }
    			this[k] = v;
    		}
    		Type.obj.to = Type.obj.to || function(from, to){ DEP('obj.to'); 
    			to = to || {};
    			obj_map(from, map, to);
    			return to;
    		};
    	}());
    	Type.obj.copy = Type.obj.copy || function(o){ DEP('obj.copy'); // because http://web.archive.org/web/20140328224025/http://jsperf.com/cloning-an-object/2
    		return !o? o : JSON.parse(JSON.stringify(o)); // is shockingly faster than anything else, and our data has to be a subset of JSON anyways!
    	}
    	;(function(){
    		function empty(v,i){ var n = this.n, u;
    			if(n && (i === n || (obj_is(n) && obj_has(n, i)))){ return }
    			if(u !== i){ return true }
    		}
    		Type.obj.empty = Type.obj.empty || function(o, n){ DEP('obj.empty'); 
    			if(!o){ return true }
    			return obj_map(o,empty,{n:n})? false : true;
    		};
    	}());
    (function(){
    		function t(k,v){
    			if(2 === arguments.length){
    				t.r = t.r || {};
    				t.r[k] = v;
    				return;
    			} t.r = t.r || [];
    			t.r.push(k);
    		}		var keys = Object.keys, map;
    		Object.keys = Object.keys || function(o){ return map(o, function(v,k,t){t(k);}) };
    		Type.obj.map = map = Type.obj.map || function(l, c, _){ DEP('obj.map'); 
    			var u, i = 0, x, r, ll, lle, f = 'function' == typeof c;
    			t.r = u;
    			if(keys && obj_is(l)){
    				ll = keys(l); lle = true;
    			}
    			_ = _ || {};
    			if(list_is(l) || ll){
    				x = (ll || l).length;
    				for(;i < x; i++){
    					var ii = (i + Type.list.index);
    					if(f){
    						r = lle? c.call(_, l[ll[i]], ll[i], t) : c.call(_, l[i], ii, t);
    						if(r !== u){ return r }
    					} else {
    						//if(Type.test.is(c,l[i])){ return ii } // should implement deep equality testing!
    						if(c === l[lle? ll[i] : i]){ return ll? ll[i] : ii } // use this for now
    					}
    				}
    			} else {
    				for(i in l){
    					if(f){
    						if(obj_has(l,i)){
    							r = _? c.call(_, l[i], i, t) : c(l[i], i, t);
    							if(r !== u){ return r }
    						}
    					} else {
    						//if(a.test.is(c,l[i])){ return i } // should implement deep equality testing!
    						if(c === l[i]){ return i } // use this for now
    					}
    				}
    			}
    			return f? t.r : Type.list.index? 0 : -1;
    		};
    	}());
    	Type.time = Type.time || {};
    	Type.time.is = Type.time.is || function(t){ DEP('time'); return t? t instanceof Date : (+new Date().getTime()) };

    	var fn_is = Type.fn.is;
    	var list_is = Type.list.is;
    	var obj = Type.obj, obj_is = obj.is, obj_has = obj.has, obj_map = obj.map;

    	var Val = {};
    	Val.is = function(v){ DEP('val.is'); // Valid values are a subset of JSON: null, binary, number (!Infinity), text, or a soul relation. Arrays need special algorithms to handle concurrency, so they are not supported directly. Use an extension that supports them if needed but research their problems first.
    		if(v === u){ return false }
    		if(v === null){ return true } // "deletes", nulling out keys.
    		if(v === Infinity){ return false } // we want this to be, but JSON does not support it, sad face.
    		if(text_is(v) // by "text" we mean strings.
    		|| bi_is(v) // by "binary" we mean boolean.
    		|| num_is(v)){ // by "number" we mean integers or decimals.
    			return true; // simple values are valid.
    		}
    		return Val.link.is(v) || false; // is the value a soul relation? Then it is valid and return it. If not, everything else remaining is an invalid data type. Custom extensions can be built on top of these primitives to support other types.
    	};
    	Val.link = Val.rel = {_: '#'};
    (function(){
    		Val.link.is = function(v){ DEP('val.link.is'); // this defines whether an object is a soul relation or not, they look like this: {'#': 'UUID'}
    			if(v && v[rel_] && !v._ && obj_is(v)){ // must be an object.
    				var o = {};
    				obj_map(v, map, o);
    				if(o.id){ // a valid id was found.
    					return o.id; // yay! Return it.
    				}
    			}
    			return false; // the value was not a valid soul relation.
    		};
    		function map(s, k){ var o = this; // map over the object...
    			if(o.id){ return o.id = false } // if ID is already defined AND we're still looping through the object, it is considered invalid.
    			if(k == rel_ && text_is(s)){ // the key should be '#' and have a text value.
    				o.id = s; // we found the soul!
    			} else {
    				return o.id = false; // if there exists anything else on the object that isn't the soul, then it is considered invalid.
    			}
    		}
    	}());
    	Val.link.ify = function(t){ DEP('val.link.ify'); return obj_put({}, rel_, t) }; // convert a soul into a relation and return it.
    	Type.obj.has._ = '.';
    	var rel_ = Val.link._, u;
    	var bi_is = Type.bi.is;
    	var num_is = Type.num.is;
    	var text_is = Type.text.is;
    	var obj = Type.obj, obj_is = obj.is, obj_put = obj.put, obj_map = obj.map;

    	Type.val = Type.val || Val;

    	var Node = {_: '_'};
    	Node.soul = function(n, o){ DEP('node.soul'); return (n && n._ && n._[o || soul_]) }; // convenience function to check to see if there is a soul on a node and return it.
    	Node.soul.ify = function(n, o){ DEP('node.soul.ify'); // put a soul on an object.
    		o = (typeof o === 'string')? {soul: o} : o || {};
    		n = n || {}; // make sure it exists.
    		n._ = n._ || {}; // make sure meta exists.
    		n._[soul_] = o.soul || n._[soul_] || text_random(); // put the soul on it.
    		return n;
    	};
    	Node.soul._ = Val.link._;
    (function(){
    		Node.is = function(n, cb, as){ DEP('node.is'); var s; // checks to see if an object is a valid node.
    			if(!obj_is(n)){ return false } // must be an object.
    			if(s = Node.soul(n)){ // must have a soul on it.
    				return !obj_map(n, map, {as:as,cb:cb,s:s,n:n});
    			}
    			return false; // nope! This was not a valid node.
    		};
    		function map(v, k){ // we invert this because the way we check for this is via a negation.
    			if(k === Node._){ return } // skip over the metadata.
    			if(!Val.is(v)){ return true } // it is true that this is an invalid node.
    			if(this.cb){ this.cb.call(this.as, v, k, this.n, this.s); } // optionally callback each key/value.
    		}
    	}());
    (function(){
    		Node.ify = function(obj, o, as){ DEP('node.ify'); // returns a node from a shallow object.
    			if(!o){ o = {}; }
    			else if(typeof o === 'string'){ o = {soul: o}; }
    			else if('function' == typeof o){ o = {map: o}; }
    			if(o.map){ o.node = o.map.call(as, obj, u, o.node || {}); }
    			if(o.node = Node.soul.ify(o.node || {}, o)){
    				obj_map(obj, map, {o:o,as:as});
    			}
    			return o.node; // This will only be a valid node if the object wasn't already deep!
    		};
    		function map(v, k){ var o = this.o, tmp, u; // iterate over each key/value.
    			if(o.map){
    				tmp = o.map.call(this.as, v, ''+k, o.node);
    				if(u === tmp){
    					obj_del(o.node, k);
    				} else
    				if(o.node){ o.node[k] = tmp; }
    				return;
    			}
    			if(Val.is(v)){
    				o.node[k] = v;
    			}
    		}
    	}());
    	var obj = Type.obj, obj_is = obj.is, obj_del = obj.del, obj_map = obj.map;
    	var text = Type.text, text_random = text.random;
    	var soul_ = Node.soul._;
    	var u;
    	Type.node = Type.node || Node;

    	var State = Type.state;
    	State.lex = function(){ DEP('state.lex'); return State().toString(36).replace('.','') };
    	State.to = function(from, k, to){ DEP('state.to'); 
    		var val = (from||{})[k];
    		if(obj_is(val)){
    			val = obj_copy(val);
    		}
    		return State.ify(to, k, State.is(from, k), val, Node.soul(from));
    	}
    	;(function(){
    		State.map = function(cb, s, as){ DEP('state.map'); var u; // for use with Node.ify
    			var o = obj_is(o = cb || s)? o : null;
    			cb = fn_is(cb = cb || s)? cb : null;
    			if(o && !cb){
    				s = num_is(s)? s : State();
    				o[N_] = o[N_] || {};
    				obj_map(o, map, {o:o,s:s});
    				return o;
    			}
    			as = as || obj_is(s)? s : u;
    			s = num_is(s)? s : State();
    			return function(v, k, o, opt){
    				if(!cb){
    					map.call({o: o, s: s}, v,k);
    					return v;
    				}
    				cb.call(as || this || {}, v, k, o, opt);
    				if(obj_has(o,k) && u === o[k]){ return }
    				map.call({o: o, s: s}, v,k);
    			}
    		};
    		function map(v,k){
    			if(N_ === k){ return }
    			State.ify(this.o, k, this.s) ;
    		}
    	}());
    	var obj = Type.obj; obj.as; var obj_has = obj.has, obj_is = obj.is, obj_map = obj.map, obj_copy = obj.copy;
    	var num = Type.num, num_is = num.is;
    	var fn = Type.fn, fn_is = fn.is;
    	var N_ = Node._, u;

    	var Graph = {};
    (function(){
    		Graph.is = function(g, cb, fn, as){ DEP('graph.is'); // checks to see if an object is a valid graph.
    			if(!g || !obj_is(g) || obj_empty(g)){ return false } // must be an object.
    			return !obj_map(g, map, {cb:cb,fn:fn,as:as}); // makes sure it wasn't an empty object.
    		};
    		function map(n, s){ // we invert this because the way'? we check for this is via a negation.
    			if(!n || s !== Node.soul(n) || !Node.is(n, this.fn, this.as)){ return true } // it is true that this is an invalid graph.
    			if(!this.cb){ return }
    			nf.n = n; nf.as = this.as; // sequential race conditions aren't races.
    			this.cb.call(nf.as, n, s, nf);
    		}
    		function nf(fn){ // optional callback for each node.
    			if(fn){ Node.is(nf.n, fn, nf.as); } // where we then have an optional callback for each key/value.
    		}
    	}());
    (function(){
    		Graph.ify = function(obj, env, as){ DEP('graph.ify'); 
    			var at = {path: [], obj: obj};
    			if(!env){
    				env = {};
    			} else
    			if(typeof env === 'string'){
    				env = {soul: env};
    			} else
    			if('function' == typeof env){
    				env.map = env;
    			}
    			if(typeof as === 'string'){
    				env.soul = env.soul || as;
    				as = u;
    			}
    			if(env.soul){
    				at.link = Val.link.ify(env.soul);
    			}
    			env.shell = (as||{}).shell;
    			env.graph = env.graph || {};
    			env.seen = env.seen || [];
    			env.as = env.as || as;
    			node(env, at);
    			env.root = at.node;
    			return env.graph;
    		};
    		function node(env, at){ var tmp;
    			if(tmp = seen(env, at)){ return tmp }
    			at.env = env;
    			at.soul = soul;
    			if(Node.ify(at.obj, map, at)){
    				at.link = at.link || Val.link.ify(Node.soul(at.node));
    				if(at.obj !== env.shell){
    					env.graph[Val.link.is(at.link)] = at.node;
    				}
    			}
    			return at;
    		}
    		function map(v,k,n){
    			var at = this, env = at.env, is, tmp;
    			if(Node._ === k && obj_has(v,Val.link._)){
    				return n._; // TODO: Bug?
    			}
    			if(!(is = valid(v,k,n, at,env))){ return }
    			if(!k){
    				at.node = at.node || n || {};
    				if(obj_has(v, Node._) && Node.soul(v)){ // ? for safety ?
    					at.node._ = obj_copy(v._);
    				}
    				at.node = Node.soul.ify(at.node, Val.link.is(at.link));
    				at.link = at.link || Val.link.ify(Node.soul(at.node));
    			}
    			if(tmp = env.map){
    				tmp.call(env.as || {}, v,k,n, at);
    				if(obj_has(n,k)){
    					v = n[k];
    					if(u === v){
    						obj_del(n, k);
    						return;
    					}
    					if(!(is = valid(v,k,n, at,env))){ return }
    				}
    			}
    			if(!k){ return at.node }
    			if(true === is){
    				return v;
    			}
    			tmp = node(env, {obj: v, path: at.path.concat(k)});
    			if(!tmp.node){ return }
    			return tmp.link; //{'#': Node.soul(tmp.node)};
    		}
    		function soul(id){ var at = this;
    			var prev = Val.link.is(at.link), graph = at.env.graph;
    			at.link = at.link || Val.link.ify(id);
    			at.link[Val.link._] = id;
    			if(at.node && at.node[Node._]){
    				at.node[Node._][Val.link._] = id;
    			}
    			if(obj_has(graph, prev)){
    				graph[id] = graph[prev];
    				obj_del(graph, prev);
    			}
    		}
    		function valid(v,k,n, at,env){ var tmp;
    			if(Val.is(v)){ return true }
    			if(obj_is(v)){ return 1 }
    			if(tmp = env.invalid){
    				v = tmp.call(env.as || {}, v,k,n);
    				return valid(v,k,n, at,env);
    			}
    			env.err = "Invalid value at '" + at.path.concat(k).join('.') + "'!";
    			if(Type.list.is(v)){ env.err += " Use `.set(item)` instead of an Array."; }
    		}
    		function seen(env, at){
    			var arr = env.seen, i = arr.length, has;
    			while(i--){ has = arr[i];
    				if(at.obj === has.obj){ return has }
    			}
    			arr.push(at);
    		}
    	}());
    	Graph.node = function(node){ DEP('graph.node'); 
    		var soul = Node.soul(node);
    		if(!soul){ return }
    		return obj_put({}, soul, node);
    	}
    	;(function(){
    		Graph.to = function(graph, root, opt){ DEP('graph.to'); 
    			if(!graph){ return }
    			var obj = {};
    			opt = opt || {seen: {}};
    			obj_map(graph[root], map, {obj:obj, graph: graph, opt: opt});
    			return obj;
    		};
    		function map(v,k){ var tmp, obj;
    			if(Node._ === k){
    				if(obj_empty(v, Val.link._)){
    					return;
    				}
    				this.obj[k] = obj_copy(v);
    				return;
    			}
    			if(!(tmp = Val.link.is(v))){
    				this.obj[k] = v;
    				return;
    			}
    			if(obj = this.opt.seen[tmp]){
    				this.obj[k] = obj;
    				return;
    			}
    			this.obj[k] = this.opt.seen[tmp] = Graph.to(this.graph, tmp, this.opt);
    		}
    	}());
    	var fn_is = Type.fn.is;
    	var obj = Type.obj, obj_is = obj.is, obj_del = obj.del, obj_has = obj.has, obj_empty = obj.empty, obj_put = obj.put, obj_map = obj.map, obj_copy = obj.copy;
    	var u;
    	Type.graph = Type.graph || Graph;
    }());
    });

    createCommonjsModule(function (module) {
    (function(){

      /* UNBUILD */
      function USE(arg, req){
        return req? commonjsRequire(arg) : arg.slice? USE[R(arg)] : function(mod, path){
          arg(mod = {exports: {}});
          USE[R(path)] = mod.exports;
        }
        function R(p){
          return p.split('/').slice(-1).toString().replace('.js','');
        }
      }
      { var MODULE = module; }
    USE(function(module){
        // Security, Encryption, and Authorization: SEA.js
        // MANDATORY READING: https://gun.eco/explainers/data/security.html
        // IT IS IMPLEMENTED IN A POLYFILL/SHIM APPROACH.
        // THIS IS AN EARLY ALPHA!

        if(typeof window !== "undefined"){ module.window = window; }

        var tmp = module.window || module, u;
        var SEA = tmp.SEA || {};

        if(SEA.window = module.window){ SEA.window.SEA = SEA; }

        try{ if(u+'' !== typeof MODULE){ MODULE.exports = SEA; } }catch(e){}
        module.exports = SEA;
      })(USE, './root');
    USE(function(module){
        var SEA = USE('./root');
        try{ if(SEA.window){
          if(location.protocol.indexOf('s') < 0
          && location.host.indexOf('localhost') < 0
          && ! /^127\.\d+\.\d+\.\d+$/.test(location.hostname)
          && location.protocol.indexOf('file:') < 0){
            console.warn('HTTPS needed for WebCrypto in SEA, redirecting...');
            location.protocol = 'https:'; // WebCrypto does NOT work without HTTPS!
          }
        } }catch(e){}
      })(USE, './https');
    USE(function(module){
        var u;
        if(u+''== typeof btoa){
          if(u+'' == typeof Buffer){
            try{ commonjsGlobal.Buffer = USE("buffer", 1).Buffer; }catch(e){ console.log("Please `npm install buffer` or add it to your package.json !"); }
          }
          commonjsGlobal.btoa = function(data){ return Buffer.from(data, "binary").toString("base64") };
          commonjsGlobal.atob = function(data){ return Buffer.from(data, "base64").toString("binary") };
        }
      })(USE, './base64');
    USE(function(module){
        USE('./base64');
        // This is Array extended to have .toString(['utf8'|'hex'|'base64'])
        function SeaArray() {}
        Object.assign(SeaArray, { from: Array.from });
        SeaArray.prototype = Object.create(Array.prototype);
        SeaArray.prototype.toString = function(enc, start, end) { enc = enc || 'utf8'; start = start || 0;
          const length = this.length;
          if (enc === 'hex') {
            const buf = new Uint8Array(this);
            return [ ...Array(((end && (end + 1)) || length) - start).keys()]
            .map((i) => buf[ i + start ].toString(16).padStart(2, '0')).join('')
          }
          if (enc === 'utf8') {
            return Array.from(
              { length: (end || length) - start },
              (_, i) => String.fromCharCode(this[ i + start])
            ).join('')
          }
          if (enc === 'base64') {
            return btoa(this)
          }
        };
        module.exports = SeaArray;
      })(USE, './array');
    USE(function(module){
        USE('./base64');
        // This is Buffer implementation used in SEA. Functionality is mostly
        // compatible with NodeJS 'safe-buffer' and is used for encoding conversions
        // between binary and 'hex' | 'utf8' | 'base64'
        // See documentation and validation for safe implementation in:
        // https://github.com/feross/safe-buffer#update
        var SeaArray = USE('./array');
        function SafeBuffer(...props) {
          console.warn('new SafeBuffer() is depreciated, please use SafeBuffer.from()');
          return SafeBuffer.from(...props)
        }
        SafeBuffer.prototype = Object.create(Array.prototype);
        Object.assign(SafeBuffer, {
          // (data, enc) where typeof data === 'string' then enc === 'utf8'|'hex'|'base64'
          from() {
            if (!Object.keys(arguments).length || arguments[0]==null) {
              throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
            }
            const input = arguments[0];
            let buf;
            if (typeof input === 'string') {
              const enc = arguments[1] || 'utf8';
              if (enc === 'hex') {
                const bytes = input.match(/([\da-fA-F]{2})/g)
                .map((byte) => parseInt(byte, 16));
                if (!bytes || !bytes.length) {
                  throw new TypeError('Invalid first argument for type \'hex\'.')
                }
                buf = SeaArray.from(bytes);
              } else if (enc === 'utf8' || 'binary' === enc) { // EDIT BY MARK: I think this is safe, tested it against a couple "binary" strings. This lets SafeBuffer match NodeJS Buffer behavior more where it safely btoas regular strings.
                const length = input.length;
                const words = new Uint16Array(length);
                Array.from({ length: length }, (_, i) => words[i] = input.charCodeAt(i));
                buf = SeaArray.from(words);
              } else if (enc === 'base64') {
                const dec = atob(input);
                const length = dec.length;
                const bytes = new Uint8Array(length);
                Array.from({ length: length }, (_, i) => bytes[i] = dec.charCodeAt(i));
                buf = SeaArray.from(bytes);
              } else if (enc === 'binary') { // deprecated by above comment
                buf = SeaArray.from(input); // some btoas were mishandled.
              } else {
                console.info('SafeBuffer.from unknown encoding: '+enc);
              }
              return buf
            }
            input.byteLength; // what is going on here? FOR MARTTI
            const length = input.byteLength ? input.byteLength : input.length;
            if (length) {
              let buf;
              if (input instanceof ArrayBuffer) {
                buf = new Uint8Array(input);
              }
              return SeaArray.from(buf || input)
            }
          },
          // This is 'safe-buffer.alloc' sans encoding support
          alloc(length, fill = 0 /*, enc*/ ) {
            return SeaArray.from(new Uint8Array(Array.from({ length: length }, () => fill)))
          },
          // This is normal UNSAFE 'buffer.alloc' or 'new Buffer(length)' - don't use!
          allocUnsafe(length) {
            return SeaArray.from(new Uint8Array(Array.from({ length : length })))
          },
          // This puts together array of array like members
          concat(arr) { // octet array
            if (!Array.isArray(arr)) {
              throw new TypeError('First argument must be Array containing ArrayBuffer or Uint8Array instances.')
            }
            return SeaArray.from(arr.reduce((ret, item) => ret.concat(Array.from(item)), []))
          }
        });
        SafeBuffer.prototype.from = SafeBuffer.from;
        SafeBuffer.prototype.toString = SeaArray.prototype.toString;

        module.exports = SafeBuffer;
      })(USE, './buffer');
    USE(function(module){
        const SEA = USE('./root');
        const api = {Buffer: USE('./buffer')};
        var o = {}, u;

        // ideally we can move away from JSON entirely? unlikely due to compatibility issues... oh well.
        JSON.parseAsync = JSON.parseAsync || function(t,cb,r){ var u; try{ cb(u, JSON.parse(t,r)); }catch(e){ cb(e); } };
        JSON.stringifyAsync = JSON.stringifyAsync || function(v,cb,r,s){ var u; try{ cb(u, JSON.stringify(v,r,s)); }catch(e){ cb(e); } };

        api.parse = function(t,r){ return new Promise(function(res, rej){
          JSON.parseAsync(t,function(err, raw){ err? rej(err) : res(raw); },r);
        })};
        api.stringify = function(v,r,s){ return new Promise(function(res, rej){
          JSON.stringifyAsync(v,function(err, raw){ err? rej(err) : res(raw); },r,s);
        })};

        if(SEA.window){
          api.crypto = window.crypto || window.msCrypto;
          api.subtle = (api.crypto||o).subtle || (api.crypto||o).webkitSubtle;
          api.TextEncoder = window.TextEncoder;
          api.TextDecoder = window.TextDecoder;
          api.random = (len) => api.Buffer.from(api.crypto.getRandomValues(new Uint8Array(api.Buffer.alloc(len))));
        }
        if(!api.TextDecoder)
        {
          const { TextEncoder, TextDecoder } = USE((u+'' == typeof MODULE?'.':'')+'./lib/text-encoding', 1);
          api.TextDecoder = TextDecoder;
          api.TextEncoder = TextEncoder;
        }
        if(!api.crypto)
        {
          try
          {
          var crypto = USE('crypto', 1);
          Object.assign(api, {
            crypto,
            random: (len) => api.Buffer.from(crypto.randomBytes(len))
          });      
          const { Crypto: WebCrypto } = USE('@peculiar/webcrypto', 1);
          api.ossl = api.subtle = new WebCrypto({directory: 'ossl'}).subtle; // ECDH
        }
        catch(e){
          console.log("Please `npm install @peculiar/webcrypto` or add it to your package.json !");
        }}

        module.exports = api;
      })(USE, './shim');
    USE(function(module){
        var SEA = USE('./root');
        var shim = USE('./shim');
        var s = {};
        s.pbkdf2 = {hash: {name : 'SHA-256'}, iter: 100000, ks: 64};
        s.ecdsa = {
          pair: {name: 'ECDSA', namedCurve: 'P-256'},
          sign: {name: 'ECDSA', hash: {name: 'SHA-256'}}
        };
        s.ecdh = {name: 'ECDH', namedCurve: 'P-256'};

        // This creates Web Cryptography API compliant JWK for sign/verify purposes
        s.jwk = function(pub, d){  // d === priv
          pub = pub.split('.');
          var x = pub[0], y = pub[1];
          var jwk = {kty: "EC", crv: "P-256", x: x, y: y, ext: true};
          jwk.key_ops = d ? ['sign'] : ['verify'];
          if(d){ jwk.d = d; }
          return jwk;
        };
        
        s.keyToJwk = function(keyBytes) {
          const keyB64 = keyBytes.toString('base64');
          const k = keyB64.replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '');
          return { kty: 'oct', k: k, ext: false, alg: 'A256GCM' };
        };

        s.recall = {
          validity: 12 * 60 * 60, // internally in seconds : 12 hours
          hook: function(props){ return props } // { iat, exp, alias, remember } // or return new Promise((resolve, reject) => resolve(props)
        };

        s.check = function(t){ return (typeof t == 'string') && ('SEA{' === t.slice(0,4)) };
        s.parse = async function p(t){ try {
          var yes = (typeof t == 'string');
          if(yes && 'SEA{' === t.slice(0,4)){ t = t.slice(3); }
          return yes ? await shim.parse(t) : t;
          } catch (e) {}
          return t;
        };

        SEA.opt = s;
        module.exports = s;
      })(USE, './settings');
    USE(function(module){
        var shim = USE('./shim');
        module.exports = async function(d, o){
          var t = (typeof d == 'string')? d : await shim.stringify(d);
          var hash = await shim.subtle.digest({name: o||'SHA-256'}, new shim.TextEncoder().encode(t));
          return shim.Buffer.from(hash);
        };
      })(USE, './sha256');
    USE(function(module){
        // This internal func returns SHA-1 hashed data for KeyID generation
        const __shim = USE('./shim');
        const subtle = __shim.subtle;
        const ossl = __shim.ossl ? __shim.ossl : subtle;
        const sha1hash = (b) => ossl.digest({name: 'SHA-1'}, new ArrayBuffer(b));
        module.exports = sha1hash;
      })(USE, './sha1');
    USE(function(module){
        var SEA = USE('./root');
        var shim = USE('./shim');
        var S = USE('./settings');
        var sha = USE('./sha256');
        var u;

        SEA.work = SEA.work || (async (data, pair, cb, opt) => { try { // used to be named `proof`
          var salt = (pair||{}).epub || pair; // epub not recommended, salt should be random!
          opt = opt || {};
          if(salt instanceof Function){
            cb = salt;
            salt = u;
          }
          data = (typeof data == 'string')? data : await shim.stringify(data);
          if('sha' === (opt.name||'').toLowerCase().slice(0,3)){
            var rsha = shim.Buffer.from(await sha(data, opt.name), 'binary').toString(opt.encode || 'base64');
            if(cb){ try{ cb(rsha); }catch(e){console.log(e);} }
            return rsha;
          }
          salt = salt || shim.random(9);
          var key = await (shim.ossl || shim.subtle).importKey('raw', new shim.TextEncoder().encode(data), {name: opt.name || 'PBKDF2'}, false, ['deriveBits']);
          var work = await (shim.ossl || shim.subtle).deriveBits({
            name: opt.name || 'PBKDF2',
            iterations: opt.iterations || S.pbkdf2.iter,
            salt: new shim.TextEncoder().encode(opt.salt || salt),
            hash: opt.hash || S.pbkdf2.hash,
          }, key, opt.length || (S.pbkdf2.ks * 8));
          data = shim.random(data.length);  // Erase data in case of passphrase
          var r = shim.Buffer.from(work, 'binary').toString(opt.encode || 'base64');
          if(cb){ try{ cb(r); }catch(e){console.log(e);} }
          return r;
        } catch(e) { 
          console.log(e);
          SEA.err = e;
          if(SEA.throw){ throw e }
          if(cb){ cb(); }
          return;
        }});

        module.exports = SEA.work;
      })(USE, './work');
    USE(function(module){
        var SEA = USE('./root');
        var shim = USE('./shim');
        USE('./settings');

        SEA.name = SEA.name || (async (cb, opt) => { try {
          if(cb){ try{ cb(); }catch(e){console.log(e);} }
          return;
        } catch(e) {
          console.log(e);
          SEA.err = e;
          if(SEA.throw){ throw e }
          if(cb){ cb(); }
          return;
        }});

        //SEA.pair = async (data, proof, cb) => { try {
        SEA.pair = SEA.pair || (async (cb, opt) => { try {

          var ecdhSubtle = shim.ossl || shim.subtle;
          // First: ECDSA keys for signing/verifying...
          var sa = await shim.subtle.generateKey({name: 'ECDSA', namedCurve: 'P-256'}, true, [ 'sign', 'verify' ])
          .then(async (keys) => {
            // privateKey scope doesn't leak out from here!
            //const { d: priv } = await shim.subtle.exportKey('jwk', keys.privateKey)
            var key = {};
            key.priv = (await shim.subtle.exportKey('jwk', keys.privateKey)).d;
            var pub = await shim.subtle.exportKey('jwk', keys.publicKey);
            //const pub = Buff.from([ x, y ].join(':')).toString('base64') // old
            key.pub = pub.x+'.'+pub.y; // new
            // x and y are already base64
            // pub is UTF8 but filename/URL safe (https://www.ietf.org/rfc/rfc3986.txt)
            // but split on a non-base64 letter.
            return key;
          });
          
          // To include PGPv4 kind of keyId:
          // const pubId = await SEA.keyid(keys.pub)
          // Next: ECDH keys for encryption/decryption...

          try{
          var dh = await ecdhSubtle.generateKey({name: 'ECDH', namedCurve: 'P-256'}, true, ['deriveKey'])
          .then(async (keys) => {
            // privateKey scope doesn't leak out from here!
            var key = {};
            key.epriv = (await ecdhSubtle.exportKey('jwk', keys.privateKey)).d;
            var pub = await ecdhSubtle.exportKey('jwk', keys.publicKey);
            //const epub = Buff.from([ ex, ey ].join(':')).toString('base64') // old
            key.epub = pub.x+'.'+pub.y; // new
            // ex and ey are already base64
            // epub is UTF8 but filename/URL safe (https://www.ietf.org/rfc/rfc3986.txt)
            // but split on a non-base64 letter.
            return key;
          });
          }catch(e){
            if(SEA.window){ throw e }
            if(e == 'Error: ECDH is not a supported algorithm'){ console.log('Ignoring ECDH...'); }
            else { throw e }
          } dh = dh || {};

          var r = { pub: sa.pub, priv: sa.priv, /* pubId, */ epub: dh.epub, epriv: dh.epriv };
          if(cb){ try{ cb(r); }catch(e){console.log(e);} }
          return r;
        } catch(e) {
          console.log(e);
          SEA.err = e;
          if(SEA.throw){ throw e }
          if(cb){ cb(); }
          return;
        }});

        module.exports = SEA.pair;
      })(USE, './pair');
    USE(function(module){
        var SEA = USE('./root');
        var shim = USE('./shim');
        var S = USE('./settings');
        var sha = USE('./sha256');
        var u;

        SEA.sign = SEA.sign || (async (data, pair, cb, opt) => { try {
          opt = opt || {};
          if(!(pair||opt).priv){
            if(!SEA.I){ throw 'No signing key.' }
            pair = await SEA.I(null, {what: data, how: 'sign', why: opt.why});
          }
          if(u === data){ throw '`undefined` not allowed.' }
          var json = await S.parse(data);
          var check = opt.check = opt.check || json;
          if(SEA.verify && (SEA.opt.check(check) || (check && check.s && check.m))
          && u !== await SEA.verify(check, pair)){ // don't sign if we already signed it.
            var r = await S.parse(check);
            if(!opt.raw){ r = 'SEA' + await shim.stringify(r); }
            if(cb){ try{ cb(r); }catch(e){console.log(e);} }
            return r;
          }
          var pub = pair.pub;
          var priv = pair.priv;
          var jwk = S.jwk(pub, priv);
          var hash = await sha(json);
          var sig = await (shim.ossl || shim.subtle).importKey('jwk', jwk, {name: 'ECDSA', namedCurve: 'P-256'}, false, ['sign'])
          .then((key) => (shim.ossl || shim.subtle).sign({name: 'ECDSA', hash: {name: 'SHA-256'}}, key, new Uint8Array(hash))); // privateKey scope doesn't leak out from here!
          var r = {m: json, s: shim.Buffer.from(sig, 'binary').toString(opt.encode || 'base64')};
          if(!opt.raw){ r = 'SEA' + await shim.stringify(r); }

          if(cb){ try{ cb(r); }catch(e){console.log(e);} }
          return r;
        } catch(e) {
          console.log(e);
          SEA.err = e;
          if(SEA.throw){ throw e }
          if(cb){ cb(); }
          return;
        }});

        module.exports = SEA.sign;
      })(USE, './sign');
    USE(function(module){
        var SEA = USE('./root');
        var shim = USE('./shim');
        var S = USE('./settings');
        var sha = USE('./sha256');
        var u;

        SEA.verify = SEA.verify || (async (data, pair, cb, opt) => { try {
          var json = await S.parse(data);
          if(false === pair){ // don't verify!
            var raw = await S.parse(json.m);
            if(cb){ try{ cb(raw); }catch(e){console.log(e);} }
            return raw;
          }
          opt = opt || {};
          // SEA.I // verify is free! Requires no user permission.
          var pub = pair.pub || pair;
          var key = SEA.opt.slow_leak? await SEA.opt.slow_leak(pub) : await (shim.ossl || shim.subtle).importKey('jwk', S.jwk(pub), {name: 'ECDSA', namedCurve: 'P-256'}, false, ['verify']);
          var hash = await sha(json.m);
          var buf, sig, check, tmp; try{
            buf = shim.Buffer.from(json.s, opt.encode || 'base64'); // NEW DEFAULT!
            sig = new Uint8Array(buf);
            check = await (shim.ossl || shim.subtle).verify({name: 'ECDSA', hash: {name: 'SHA-256'}}, key, sig, new Uint8Array(hash));
            if(!check){ throw "Signature did not match." }
          }catch(e){
            if(SEA.opt.fallback){
              return await SEA.opt.fall_verify(data, pair, cb, opt);
            }
          }
          var r = check? await S.parse(json.m) : u;

          if(cb){ try{ cb(r); }catch(e){console.log(e);} }
          return r;
        } catch(e) {
          console.log(e); // mismatched owner FOR MARTTI
          SEA.err = e;
          if(SEA.throw){ throw e }
          if(cb){ cb(); }
          return;
        }});

        module.exports = SEA.verify;
        // legacy & ossl leak mitigation:

        var knownKeys = {};
        SEA.opt.slow_leak = pair => {
          if (knownKeys[pair]) return knownKeys[pair];
          var jwk = S.jwk(pair);
          knownKeys[pair] = (shim.ossl || shim.subtle).importKey("jwk", jwk, {name: 'ECDSA', namedCurve: 'P-256'}, false, ["verify"]);
          return knownKeys[pair];
        };

        var O = SEA.opt;
        SEA.opt.fall_verify = async function(data, pair, cb, opt, f){
          if(f === SEA.opt.fallback){ throw "Signature did not match" } f = f || 1;
          var tmp = data||'';
          data = SEA.opt.unpack(data) || data;
          var json = await S.parse(data), pub = pair.pub || pair, key = await SEA.opt.slow_leak(pub);
          var hash = (f <= SEA.opt.fallback)? shim.Buffer.from(await shim.subtle.digest({name: 'SHA-256'}, new shim.TextEncoder().encode(await S.parse(json.m)))) : await sha(json.m); // this line is old bad buggy code but necessary for old compatibility.
          var buf; var sig; var check; try{
            buf = shim.Buffer.from(json.s, opt.encode || 'base64'); // NEW DEFAULT!
            sig = new Uint8Array(buf);
            check = await (shim.ossl || shim.subtle).verify({name: 'ECDSA', hash: {name: 'SHA-256'}}, key, sig, new Uint8Array(hash));
            if(!check){ throw "Signature did not match." }
          }catch(e){ try{
            buf = shim.Buffer.from(json.s, 'utf8'); // AUTO BACKWARD OLD UTF8 DATA!
            sig = new Uint8Array(buf);
            check = await (shim.ossl || shim.subtle).verify({name: 'ECDSA', hash: {name: 'SHA-256'}}, key, sig, new Uint8Array(hash));
            }catch(e){
            if(!check){ throw "Signature did not match." }
            }
          }
          var r = check? await S.parse(json.m) : u;
          O.fall_soul = tmp['#']; O.fall_key = tmp['.']; O.fall_val = data; O.fall_state = tmp['>'];
          if(cb){ try{ cb(r); }catch(e){console.log(e);} }
          return r;
        };
        SEA.opt.fallback = 2;

      })(USE, './verify');
    USE(function(module){
        var shim = USE('./shim');
        var S = USE('./settings');
        var sha256hash = USE('./sha256');

        const importGen = async (key, salt, opt) => {
          const combo = key + (salt || shim.random(8)).toString('utf8'); // new
          const hash = shim.Buffer.from(await sha256hash(combo), 'binary');
          
          const jwkKey = S.keyToJwk(hash);      
          return await shim.subtle.importKey('jwk', jwkKey, {name:'AES-GCM'}, false, ['encrypt', 'decrypt'])
        };
        module.exports = importGen;
      })(USE, './aeskey');
    USE(function(module){
        var SEA = USE('./root');
        var shim = USE('./shim');
        USE('./settings');
        var aeskey = USE('./aeskey');
        var u;

        SEA.encrypt = SEA.encrypt || (async (data, pair, cb, opt) => { try {
          opt = opt || {};
          var key = (pair||opt).epriv || pair;
          if(u === data){ throw '`undefined` not allowed.' }
          if(!key){
            if(!SEA.I){ throw 'No encryption key.' }
            pair = await SEA.I(null, {what: data, how: 'encrypt', why: opt.why});
            key = pair.epriv || pair;
          }
          var msg = (typeof data == 'string')? data : await shim.stringify(data);
          var rand = {s: shim.random(9), iv: shim.random(15)}; // consider making this 9 and 15 or 18 or 12 to reduce == padding.
          var ct = await aeskey(key, rand.s, opt).then((aes) => (/*shim.ossl ||*/ shim.subtle).encrypt({ // Keeping the AES key scope as private as possible...
            name: opt.name || 'AES-GCM', iv: new Uint8Array(rand.iv)
          }, aes, new shim.TextEncoder().encode(msg)));
          var r = {
            ct: shim.Buffer.from(ct, 'binary').toString(opt.encode || 'base64'),
            iv: rand.iv.toString(opt.encode || 'base64'),
            s: rand.s.toString(opt.encode || 'base64')
          };
          if(!opt.raw){ r = 'SEA' + await shim.stringify(r); }

          if(cb){ try{ cb(r); }catch(e){console.log(e);} }
          return r;
        } catch(e) { 
          console.log(e);
          SEA.err = e;
          if(SEA.throw){ throw e }
          if(cb){ cb(); }
          return;
        }});

        module.exports = SEA.encrypt;
      })(USE, './encrypt');
    USE(function(module){
        var SEA = USE('./root');
        var shim = USE('./shim');
        var S = USE('./settings');
        var aeskey = USE('./aeskey');

        SEA.decrypt = SEA.decrypt || (async (data, pair, cb, opt) => { try {
          opt = opt || {};
          var key = (pair||opt).epriv || pair;
          if(!key){
            if(!SEA.I){ throw 'No decryption key.' }
            pair = await SEA.I(null, {what: data, how: 'decrypt', why: opt.why});
            key = pair.epriv || pair;
          }
          var json = await S.parse(data);
          var buf, bufiv, bufct; try{
            buf = shim.Buffer.from(json.s, opt.encode || 'base64');
            bufiv = shim.Buffer.from(json.iv, opt.encode || 'base64');
            bufct = shim.Buffer.from(json.ct, opt.encode || 'base64');
            var ct = await aeskey(key, buf, opt).then((aes) => (/*shim.ossl ||*/ shim.subtle).decrypt({  // Keeping aesKey scope as private as possible...
              name: opt.name || 'AES-GCM', iv: new Uint8Array(bufiv), tagLength: 128
            }, aes, new Uint8Array(bufct)));
          }catch(e){
            if('utf8' === opt.encode){ throw "Could not decrypt" }
            if(SEA.opt.fallback){
              opt.encode = 'utf8';
              return await SEA.decrypt(data, pair, cb, opt);
            }
          }
          var r = await S.parse(new shim.TextDecoder('utf8').decode(ct));
          if(cb){ try{ cb(r); }catch(e){console.log(e);} }
          return r;
        } catch(e) { 
          console.log(e);
          SEA.err = e;
          if(SEA.throw){ throw e }
          if(cb){ cb(); }
          return;
        }});

        module.exports = SEA.decrypt;
      })(USE, './decrypt');
    USE(function(module){
        var SEA = USE('./root');
        var shim = USE('./shim');
        USE('./settings');
        // Derive shared secret from other's pub and my epub/epriv 
        SEA.secret = SEA.secret || (async (key, pair, cb, opt) => { try {
          opt = opt || {};
          if(!pair || !pair.epriv || !pair.epub){
            if(!SEA.I){ throw 'No secret mix.' }
            pair = await SEA.I(null, {what: key, how: 'secret', why: opt.why});
          }
          var pub = key.epub || key;
          var epub = pair.epub;
          var epriv = pair.epriv;
          var ecdhSubtle = shim.ossl || shim.subtle;
          var pubKeyData = keysToEcdhJwk(pub);
          var props = Object.assign({ public: await ecdhSubtle.importKey(...pubKeyData, true, []) },{name: 'ECDH', namedCurve: 'P-256'}); // Thanks to @sirpy !
          var privKeyData = keysToEcdhJwk(epub, epriv);
          var derived = await ecdhSubtle.importKey(...privKeyData, false, ['deriveBits']).then(async (privKey) => {
            // privateKey scope doesn't leak out from here!
            var derivedBits = await ecdhSubtle.deriveBits(props, privKey, 256);
            var rawBits = new Uint8Array(derivedBits);
            var derivedKey = await ecdhSubtle.importKey('raw', rawBits,{ name: 'AES-GCM', length: 256 }, true, [ 'encrypt', 'decrypt' ]);
            return ecdhSubtle.exportKey('jwk', derivedKey).then(({ k }) => k);
          });
          var r = derived;
          if(cb){ try{ cb(r); }catch(e){console.log(e);} }
          return r;
        } catch(e) {
          console.log(e);
          SEA.err = e;
          if(SEA.throw){ throw e }
          if(cb){ cb(); }
          return;
        }});

        // can this be replaced with settings.jwk?
        var keysToEcdhJwk = (pub, d) => { // d === priv
          //var [ x, y ] = shim.Buffer.from(pub, 'base64').toString('utf8').split(':') // old
          var [ x, y ] = pub.split('.'); // new
          var jwk = d ? { d: d } : {};
          return [  // Use with spread returned value...
            'jwk',
            Object.assign(
              jwk,
              { x: x, y: y, kty: 'EC', crv: 'P-256', ext: true }
            ), // ??? refactor
            {name: 'ECDH', namedCurve: 'P-256'}
          ]
        };

        module.exports = SEA.secret;
      })(USE, './secret');
    USE(function(module){
        var SEA = USE('./root');
        // This is to certify that a group of "certificants" can "put" anything at a group of matched "paths" to the certificate authority's graph
        SEA.certify = SEA.certify || (async (certificants, policy = {}, authority, cb, opt = {}) => { try {
          /*
          The Certify Protocol was made out of love by a Vietnamese code enthusiast. Vietnamese people around the world deserve respect!
          IMPORTANT: A Certificate is like a Signature. No one knows who (authority) created/signed a cert until you put it into their graph.
          "certificants": '*' or a String (Bob.pub) || an Object that contains "pub" as a key || an array of [object || string]. These people will have the rights.
          "policy": A string ('inbox'), or a RAD/LEX object {'*': 'inbox'}, or an Array of RAD/LEX objects or strings. RAD/LEX object can contain key "?" with indexOf("*") > -1 to force key equals certificant pub. This rule is used to check against soul+'/'+key using Gun.text.match or String.match.
          "authority": Key pair or priv of the certificate authority.
          "cb": A callback function after all things are done.
          "opt": If opt.expiry (a timestamp) is set, SEA won't sync data after opt.expiry. If opt.block is set, SEA will look for block before syncing.
          */
          console.log('SEA.certify() is an early experimental community supported method that may change API behavior without warning in any future version.');

          certificants = (() => {
            var data = [];
            if (certificants) {
              if ((typeof certificants === 'string' || Array.isArray(certificants)) && certificants.indexOf('*') > -1) return '*'
              if (typeof certificants === 'string') return certificants
              if (Array.isArray(certificants)) {
                if (certificants.length === 1 && certificants[0]) return typeof certificants[0] === 'object' && certificants[0].pub ? certificants[0].pub : typeof certificants[0] === 'string' ? certificants[0] : null
                certificants.map(certificant => {
                  if (typeof certificant ==='string') data.push(certificant);
                  else if (typeof certificant === 'object' && certificant.pub) data.push(certificant.pub);
                });
              }

              if (typeof certificants === 'object' && certificants.pub) return certificants.pub
              return data.length > 0 ? data : null
            }
            return
          })();

          if (!certificants) return console.log("No certificant found.")

          const expiry = opt.expiry && (typeof opt.expiry === 'number' || typeof opt.expiry === 'string') ? parseFloat(opt.expiry) : null;
          const readPolicy = (policy || {}).read ? policy.read : null;
          const writePolicy = (policy || {}).write ? policy.write : typeof policy === 'string' || Array.isArray(policy) || policy["+"] || policy["#"] || policy["."] || policy["="] || policy["*"] || policy[">"] || policy["<"] ? policy : null;
          // The "blacklist" feature is now renamed to "block". Why ? BECAUSE BLACK LIVES MATTER!
          // We can now use 3 keys: block, blacklist, ban
          const block = (opt || {}).block || (opt || {}).blacklist || (opt || {}).ban || {};
          const readBlock = block.read && (typeof block.read === 'string' || (block.read || {})['#']) ? block.read : null;
          const writeBlock = typeof block === 'string' ? block : block.write && (typeof block.write === 'string' || block.write['#']) ? block.write : null;

          if (!readPolicy && !writePolicy) return console.log("No policy found.")

          // reserved keys: c, e, r, w, rb, wb
          const data = JSON.stringify({
            c: certificants,
            ...(expiry ? {e: expiry} : {}), // inject expiry if possible
            ...(readPolicy ? {r: readPolicy }  : {}), // "r" stands for read, which means read permission.
            ...(writePolicy ? {w: writePolicy} : {}), // "w" stands for write, which means write permission.
            ...(readBlock ? {rb: readBlock} : {}), // inject READ block if possible
            ...(writeBlock ? {wb: writeBlock} : {}), // inject WRITE block if possible
          });

          const certificate = await SEA.sign(data, authority, null, {raw:1});

          var r = certificate;
          if(!opt.raw){ r = 'SEA'+JSON.stringify(r); }
          if(cb){ try{ cb(r); }catch(e){console.log(e);} }
          return r;
        } catch(e) {
          SEA.err = e;
          if(SEA.throw){ throw e }
          if(cb){ cb(); }
          return;
        }});

        module.exports = SEA.certify;
      })(USE, './certify');
    USE(function(module){
        var shim = USE('./shim');
        // Practical examples about usage found in tests.
        var SEA = USE('./root');
        SEA.work = USE('./work');
        SEA.sign = USE('./sign');
        SEA.verify = USE('./verify');
        SEA.encrypt = USE('./encrypt');
        SEA.decrypt = USE('./decrypt');
        SEA.certify = USE('./certify');
        //SEA.opt.aeskey = USE('./aeskey'); // not official! // this causes problems in latest WebCrypto.

        SEA.random = SEA.random || shim.random;

        // This is Buffer used in SEA and usable from Gun/SEA application also.
        // For documentation see https://nodejs.org/api/buffer.html
        SEA.Buffer = SEA.Buffer || USE('./buffer');

        // These SEA functions support now ony Promises or
        // async/await (compatible) code, use those like Promises.
        //
        // Creates a wrapper library around Web Crypto API
        // for various AES, ECDSA, PBKDF2 functions we called above.
        // Calculate public key KeyID aka PGPv4 (result: 8 bytes as hex string)
        SEA.keyid = SEA.keyid || (async (pub) => {
          try {
            // base64('base64(x):base64(y)') => shim.Buffer(xy)
            const pb = shim.Buffer.concat(
              pub.replace(/-/g, '+').replace(/_/g, '/').split('.')
              .map((t) => shim.Buffer.from(t, 'base64'))
            );
            // id is PGPv4 compliant raw key
            const id = shim.Buffer.concat([
              shim.Buffer.from([0x99, pb.length / 0x100, pb.length % 0x100]), pb
            ]);
            const sha1 = await sha1hash(id);
            const hash = shim.Buffer.from(sha1, 'binary');
            return hash.toString('hex', hash.length - 8)  // 16-bit ID as hex
          } catch (e) {
            console.log(e);
            throw e
          }
        });
        // all done!
        // Obviously it is missing MANY necessary features. This is only an alpha release.
        // Please experiment with it, audit what I've done so far, and complain about what needs to be added.
        // SEA should be a full suite that is easy and seamless to use.
        // Again, scroll naer the top, where I provide an EXAMPLE of how to create a user and sign in.
        // Once logged in, the rest of the code you just read handled automatically signing/validating data.
        // But all other behavior needs to be equally easy, like opinionated ways of
        // Adding friends (trusted public keys), sending private messages, etc.
        // Cheers! Tell me what you think.
        ((SEA.window||{}).GUN||{}).SEA = SEA;

        module.exports = SEA;
        // -------------- END SEA MODULES --------------------
        // -- BEGIN SEA+GUN MODULES: BUNDLED BY DEFAULT UNTIL OTHERS USE SEA ON OWN -------
      })(USE, './sea');
    USE(function(module){
        var SEA = USE('./sea'), Gun, u;
        if(SEA.window){
          Gun = SEA.window.GUN || {chain:{}};
        } else {
          Gun = USE((u+'' == typeof MODULE?'.':'')+'./gun', 1);
        }
        SEA.GUN = Gun;

        function User(root){ 
          this._ = {$: this};
        }
        User.prototype = (function(){ function F(){} F.prototype = Gun.chain; return new F() }()); // Object.create polyfill
        User.prototype.constructor = User;

        // let's extend the gun chain with a `user` function.
        // only one user can be logged in at a time, per gun instance.
        Gun.chain.user = function(pub){
          var gun = this, root = gun.back(-1), user;
          if(pub){
            pub = SEA.opt.pub((pub._||'')['#']) || pub;
            return root.get('~'+pub);
          }
          if(user = root.back('user')){ return user }
          var root = (root._), at = root, uuid = at.opt.uuid || lex;
          (at = (user = at.user = gun.chain(new User))._).opt = {};
          at.opt.uuid = function(cb){
            var id = uuid(), pub = root.user;
            if(!pub || !(pub = pub.is) || !(pub = pub.pub)){ return id }
            id = '~' + pub + '/' + id;
            if(cb && cb.call){ cb(null, id); }
            return id;
          };
          return user;
        };
        function lex(){ return Gun.state().toString(36).replace('.','') }
        Gun.User = User;
        User.GUN = Gun;
        User.SEA = Gun.SEA = SEA;
        module.exports = User;
      })(USE, './user');
    USE(function(module){
        var u, Gun = (''+u != typeof window)? (window.Gun||{chain:{}}) : USE((''+u === typeof MODULE?'.':'')+'./gun', 1);
        Gun.chain.then = function(cb, opt){
          var gun = this, p = (new Promise(function(res, rej){
            gun.once(res, opt);
          }));
          return cb? p.then(cb) : p;
        };
      })(USE, './then');
    USE(function(module){
        var User = USE('./user'), SEA = User.SEA, Gun = User.GUN, noop = function(){};

        // Well first we have to actually create a user. That is what this function does.
        User.prototype.create = function(...args){
          var pair = typeof args[0] === 'object' && (args[0].pub || args[0].epub) ? args[0] : typeof args[1] === 'object' && (args[1].pub || args[1].epub) ? args[1] : null;
          var alias = pair && (pair.pub || pair.epub) ? pair.pub : typeof args[0] === 'string' ? args[0] : null;
          var pass = pair && (pair.pub || pair.epub) ? pair : alias && typeof args[1] === 'string' ? args[1] : null;
          var cb = args.filter(arg => typeof arg === 'function')[0] || null; // cb now can stand anywhere, after alias/pass or pair
          var opt = args && args.length > 1 && typeof args[args.length-1] === 'object' ? args[args.length-1] : {}; // opt is always the last parameter which typeof === 'object' and stands after cb
          
          var gun = this, cat = (gun._), root = gun.back(-1);
          cb = cb || noop;
          opt = opt || {};
          if(false !== opt.check){
            var err;
            if(!alias){ err = "No user."; }
            if((pass||'').length < 8){ err = "Password too short!"; }
            if(err){
              cb({err: Gun.log(err)});
              return gun;
            }
          }
          if(cat.ing){
            (cb || noop)({err: Gun.log("User is already being created or authenticated!"), wait: true});
            return gun;
          }
          cat.ing = true;
          var act = {};
          act.a = function(pubs){
            act.pubs = pubs;
            if(pubs && !opt.already){
              // If we can enforce that a user name is already taken, it might be nice to try, but this is not guaranteed.
              var ack = {err: Gun.log('User already created!')};
              cat.ing = false;
              (cb || noop)(ack);
              gun.leave();
              return;
            }
            act.salt = String.random(64); // pseudo-randomly create a salt, then use PBKDF2 function to extend the password with it.
            SEA.work(pass, act.salt, act.b); // this will take some short amount of time to produce a proof, which slows brute force attacks.
          };
          act.b = function(proof){
            act.proof = proof;
            pair ? act.c(pair) : SEA.pair(act.c); // generate a brand new key pair or use the existing.
          };
          act.c = function(pair){
            var tmp;
            act.pair = pair || {};
            if(tmp = cat.root.user){
              tmp._.sea = pair;
              tmp.is = {pub: pair.pub, epub: pair.epub, alias: alias};
            }
            // the user's public key doesn't need to be signed. But everything else needs to be signed with it! // we have now automated it! clean up these extra steps now!
            act.data = {pub: pair.pub};
            act.d();
          };
          act.d = function(){
            act.data.alias = alias;
            act.e();
          };
          act.e = function(){
            act.data.epub = act.pair.epub; 
            SEA.encrypt({priv: act.pair.priv, epriv: act.pair.epriv}, act.proof, act.f, {raw:1}); // to keep the private key safe, we AES encrypt it with the proof of work!
          };
          act.f = function(auth){
            act.data.auth = JSON.stringify({ek: auth, s: act.salt}); 
            act.g(act.data.auth);
          };
          act.g = function(auth){ var tmp;
            act.data.auth = act.data.auth || auth;
            root.get(tmp = '~'+act.pair.pub).put(act.data).on(act.h); // awesome, now we can actually save the user with their public key as their ID.
            var link = {}; link[tmp] = {'#': tmp}; root.get('~@'+alias).put(link).get(tmp).on(act.i); // next up, we want to associate the alias with the public key. So we add it to the alias list.
          };
          act.h = function(data, key, msg, eve){
            eve.off(); act.h.ok = 1; act.i();
          };
          act.i = function(data, key, msg, eve){
            if(eve){ act.i.ok = 1; eve.off(); }
            if(!act.h.ok || !act.i.ok){ return }
            cat.ing = false;
            cb({ok: 0, pub: act.pair.pub}); // callback that the user has been created. (Note: ok = 0 because we didn't wait for disk to ack)
            if(noop === cb){ pair ? gun.auth(pair) : gun.auth(alias, pass); } // if no callback is passed, auto-login after signing up.
          };
          root.get('~@'+alias).once(act.a);
          return gun;
        };
        User.prototype.leave = function(opt, cb){
          var gun = this, user = (gun.back(-1)._).user;
          if(user){
            delete user.is;
            delete user._.is;
            delete user._.sea;
          }
          if(SEA.window){
            try{var sS = {};
            sS = window.sessionStorage;
            delete sS.recall;
            delete sS.pair;
            }catch(e){}      }
          return gun;
        };
      })(USE, './create');
    USE(function(module){
        var User = USE('./user'), SEA = User.SEA, Gun = User.GUN, noop = function(){};
        // now that we have created a user, we want to authenticate them!
        User.prototype.auth = function(...args){ // TODO: this PR with arguments need to be cleaned up / refactored.
          var pair = typeof args[0] === 'object' && (args[0].pub || args[0].epub) ? args[0] : typeof args[1] === 'object' && (args[1].pub || args[1].epub) ? args[1] : null;
          var alias = !pair && typeof args[0] === 'string' ? args[0] : null;
          var pass = alias && typeof args[1] === 'string' ? args[1] : null;
          var cb = args.filter(arg => typeof arg === 'function')[0] || null; // cb now can stand anywhere, after alias/pass or pair
          var opt = args && args.length > 1 && typeof args[args.length-1] === 'object' ? args[args.length-1] : {}; // opt is always the last parameter which typeof === 'object' and stands after cb
          
          var gun = this, cat = (gun._), root = gun.back(-1);
          
          if(cat.ing){
            (cb || noop)({err: Gun.log("User is already being created or authenticated!"), wait: true});
            return gun;
          }
          cat.ing = true;
          
          var act = {}, u;
          act.a = function(data){
            if(!data){ return act.b() }
            if(!data.pub){
              var tmp = []; Object.keys(data).forEach(function(k){ if('_'==k){ return } tmp.push(data[k]); });
              return act.b(tmp);
            }
            if(act.name){ return act.f(data) }
            act.c((act.data = data).auth);
          };
          act.b = function(list){
            var get = (act.list = (act.list||[]).concat(list||[])).shift();
            if(u === get){
              if(act.name){ return act.err('Your user account is not published for dApps to access, please consider syncing it online, or allowing local access by adding your device as a peer.') }
              return act.err('Wrong user or password.') 
            }
            root.get(get).once(act.a);
          };
          act.c = function(auth){
            if(u === auth){ return act.b() }
            if('string' == typeof auth){ return act.c(obj_ify(auth)) } // in case of legacy
            SEA.work(pass, (act.auth = auth).s, act.d, act.enc); // the proof of work is evidence that we've spent some time/effort trying to log in, this slows brute force.
          };
          act.d = function(proof){
            SEA.decrypt(act.auth.ek, proof, act.e, act.enc);
          };
          act.e = function(half){
            if(u === half){
              if(!act.enc){ // try old format
                act.enc = {encode: 'utf8'};
                return act.c(act.auth);
              } act.enc = null; // end backwards
              return act.b();
            }
            act.half = half;
            act.f(act.data);
          };
          act.f = function(pair){
            var half = act.half || {}, data = act.data || {};
            act.g(act.lol = {pub: pair.pub || data.pub, epub: pair.epub || data.epub, priv: pair.priv || half.priv, epriv: pair.epriv || half.epriv});
          };
          act.g = function(pair){
            if(!pair || !pair.pub || !pair.epub){ return act.b() }
            act.pair = pair;
            var user = (root._).user, at = (user._);
            at.tag;
            var upt = at.opt;
            at = user._ = root.get('~'+pair.pub)._;
            at.opt = upt;
            // add our credentials in-memory only to our root user instance
            user.is = {pub: pair.pub, epub: pair.epub, alias: alias || pair.pub};
            at.sea = act.pair;
            cat.ing = false;
            try{if(pass && u == (obj_ify(cat.root.graph['~'+pair.pub].auth)||'')[':']){ opt.shuffle = opt.change = pass; } }catch(e){} // migrate UTF8 & Shuffle!
            opt.change? act.z() : (cb || noop)(at);
            if(SEA.window && ((gun.back('user')._).opt||opt).remember){
              // TODO: this needs to be modular.
              try{var sS = {};
              sS = window.sessionStorage; // TODO: FIX BUG putting on `.is`!
              sS.recall = true;
              sS.pair = JSON.stringify(pair); // auth using pair is more reliable than alias/pass
              }catch(e){}
            }
            try{
              if(root._.tag.auth){ // auth handle might not be registered yet
              (root._).on('auth', at); // TODO: Deprecate this, emit on user instead! Update docs when you do.
              } else { setTimeout(function(){ (root._).on('auth', at); },1); } // if not, hackily add a timeout.
              //at.on('auth', at) // Arrgh, this doesn't work without event "merge" code, but "merge" code causes stack overflow and crashes after logging in & trying to write data.
            }catch(e){
              Gun.log("Your 'auth' callback crashed with:", e);
            }
          };
          act.z = function(){
            // password update so encrypt private key using new pwd + salt
            act.salt = String.random(64); // pseudo-random
            SEA.work(opt.change, act.salt, act.y);
          };
          act.y = function(proof){
            SEA.encrypt({priv: act.pair.priv, epriv: act.pair.epriv}, proof, act.x, {raw:1});
          };
          act.x = function(auth){
            act.w(JSON.stringify({ek: auth, s: act.salt}));
          };
          act.w = function(auth){
            if(opt.shuffle){ // delete in future!
              console.log('migrate core account from UTF8 & shuffle');
              var tmp = {}; Object.keys(act.data).forEach(function(k){ tmp[k] = act.data[k]; });
              delete tmp._;
              tmp.auth = auth;
              root.get('~'+act.pair.pub).put(tmp);
            } // end delete
            root.get('~'+act.pair.pub).get('auth').put(auth, cb || noop);
          };
          act.err = function(e){
            var ack = {err: Gun.log(e || 'User cannot be found!')};
            cat.ing = false;
            (cb || noop)(ack);
          };
          act.plugin = function(name){
            if(!(act.name = name)){ return act.err() }
            var tmp = [name];
            if('~' !== name[0]){
              tmp[1] = '~'+name;
              tmp[2] = '~@'+name;
            }
            act.b(tmp);
          };
          if(pair){
            act.g(pair);
          } else
          if(alias){
            root.get('~@'+alias).once(act.a);
          } else
          if(!alias && !pass){
            SEA.name(act.plugin);
          }
          return gun;
        };
        function obj_ify(o){
          if('string' != typeof o){ return o }
          try{o = JSON.parse(o);
          }catch(e){o={};}      return o;
        }
      })(USE, './auth');
    USE(function(module){
        var User = USE('./user'), SEA = User.SEA; User.GUN;
        User.prototype.recall = function(opt, cb){
          var gun = this, root = gun.back(-1);
          opt = opt || {};
          if(opt && opt.sessionStorage){
            if(SEA.window){
              try{
                var sS = {};
                sS = window.sessionStorage; // TODO: FIX BUG putting on `.is`!
                if(sS){
                  (root._).opt.remember = true;
                  ((gun.back('user')._).opt||opt).remember = true;
                  if(sS.recall || sS.pair) root.user().auth(JSON.parse(sS.pair), cb); // pair is more reliable than alias/pass
                }
              }catch(e){}
            }
            return gun;
          }
          /*
            TODO: copy mhelander's expiry code back in.
            Although, we should check with community,
            should expiry be core or a plugin?
          */
          return gun;
        };
      })(USE, './recall');
    USE(function(module){
        var User = USE('./user'), SEA = User.SEA, Gun = User.GUN, noop = function(){};
        User.prototype.pair = function(){
          var user = this, proxy; // undeprecated, hiding with proxies.
          try{ proxy = new Proxy({DANGER:'\u2620'}, {get: function(t,p,r){
            if(!user.is || !(user._||'').sea){ return }
            return user._.sea[p];
          }});}catch(e){}
          return proxy;
        };
        // If authenticated user wants to delete his/her account, let's support it!
        User.prototype.delete = async function(alias, pass, cb){
          console.log("user.delete() IS DEPRECATED AND WILL BE MOVED TO A MODULE!!!");
          var gun = this; gun.back(-1); var user = gun.back('user');
          try {
            user.auth(alias, pass, function(ack){
              var pub = (user.is||{}).pub;
              // Delete user data
              user.map().once(function(){ this.put(null); });
              // Wipe user data from memory
              user.leave();
              (cb || noop)({ok: 0});
            });
          } catch (e) {
            Gun.log('User.delete failed! Error:', e);
          }
          return gun;
        };
        User.prototype.alive = async function(){
          console.log("user.alive() IS DEPRECATED!!!");
          const gunRoot = this.back(-1);
          try {
            // All is good. Should we do something more with actual recalled data?
            await authRecall(gunRoot);
            return gunRoot._.user._
          } catch (e) {
            const err = 'No session!';
            Gun.log(err);
            throw { err }
          }
        };
        User.prototype.trust = async function(user){
          console.log("`.trust` API MAY BE DELETED OR CHANGED OR RENAMED, DO NOT USE!");
          // TODO: BUG!!! SEA `node` read listener needs to be async, which means core needs to be async too.
          //gun.get('alice').get('age').trust(bob);
          if (Gun.is(user)) {
            user.get('pub').get((ctx, ev) => {
              console.log(ctx, ev);
            });
          }
          user.get('trust').get(path).put(theirPubkey);

          // do a lookup on this gun chain directly (that gets bob's copy of the data)
          // do a lookup on the metadata trust table for this path (that gets all the pubkeys allowed to write on this path)
          // do a lookup on each of those pubKeys ON the path (to get the collab data "layers")
          // THEN you perform Jachen's mix operation
          // and return the result of that to...
        };
        User.prototype.grant = function(to, cb){
          console.log("`.grant` API MAY BE DELETED OR CHANGED OR RENAMED, DO NOT USE!");
          var gun = this, user = gun.back(-1).user(), pair = user._.sea, path = '';
          gun.back(function(at){ if(at.is){ return } path += (at.get||''); });
          (async function(){
          var enc, sec = await user.get('grant').get(pair.pub).get(path).then();
          sec = await SEA.decrypt(sec, pair);
          if(!sec){
            sec = SEA.random(16).toString();
            enc = await SEA.encrypt(sec, pair);
            user.get('grant').get(pair.pub).get(path).put(enc);
          }
          var pub = to.get('pub').then();
          var epub = to.get('epub').then();
          pub = await pub; epub = await epub;
          var dh = await SEA.secret(epub, pair);
          enc = await SEA.encrypt(sec, dh);
          user.get('grant').get(pub).get(path).put(enc, cb);
          }());
          return gun;
        };
        User.prototype.secret = function(data, cb){
          console.log("`.secret` API MAY BE DELETED OR CHANGED OR RENAMED, DO NOT USE!");
          var gun = this, user = gun.back(-1).user(), pair = user.pair(), path = '';
          gun.back(function(at){ if(at.is){ return } path += (at.get||''); });
          (async function(){
          var enc, sec = await user.get('trust').get(pair.pub).get(path).then();
          sec = await SEA.decrypt(sec, pair);
          if(!sec){
            sec = SEA.random(16).toString();
            enc = await SEA.encrypt(sec, pair);
            user.get('trust').get(pair.pub).get(path).put(enc);
          }
          enc = await SEA.encrypt(data, sec);
          gun.put(enc, cb);
          }());
          return gun;
        };

        /**
         * returns the decrypted value, encrypted by secret
         * @returns {Promise<any>}
         // Mark needs to review 1st before officially supported
        User.prototype.decrypt = function(cb) {
          let gun = this,
            path = ''
          gun.back(function(at) {
            if (at.is) {
              return
            }
            path += at.get || ''
          })
          return gun
            .then(async data => {
              if (data == null) {
                return
              }
              const user = gun.back(-1).user()
              const pair = user.pair()
              let sec = await user
                .get('trust')
                .get(pair.pub)
                .get(path)
              sec = await SEA.decrypt(sec, pair)
              if (!sec) {
                return data
              }
              let decrypted = await SEA.decrypt(data, sec)
              return decrypted
            })
            .then(res => {
              cb && cb(res)
              return res
            })
        }
        */
        module.exports = User;
      })(USE, './share');
    USE(function(module){
        var SEA = USE('./sea'), S = USE('./settings'), noop = function() {}, u;
        var Gun = (''+u != typeof window)? (window.Gun||{on:noop}) : USE((''+u === typeof MODULE?'.':'')+'./gun', 1);
        // After we have a GUN extension to make user registration/login easy, we then need to handle everything else.

        // We do this with a GUN adapter, we first listen to when a gun instance is created (and when its options change)
        Gun.on('opt', function(at){
          if(!at.sea){ // only add SEA once per instance, on the "at" context.
            at.sea = {own: {}};
            at.on('put', check, at); // SEA now runs its firewall on HAM diffs, not all i/o.
          }
          this.to.next(at); // make sure to call the "next" middleware adapter.
        });

        // Alright, this next adapter gets run at the per node level in the graph database.
        // correction: 2020 it gets run on each key/value pair in a node upon a HAM diff.
        // This will let us verify that every property on a node has a value signed by a public key we trust.
        // If the signature does not match, the data is just `undefined` so it doesn't get passed on.
        // If it does match, then we transform the in-memory "view" of the data into its plain value (without the signature).
        // Now NOTE! Some data is "system" data, not user data. Example: List of public keys, aliases, etc.
        // This data is self-enforced (the value can only match its ID), but that is handled in the `security` function.
        // From the self-enforced data, we can see all the edges in the graph that belong to a public key.
        // Example: ~ASDF is the ID of a node with ASDF as its public key, signed alias and salt, and
        // its encrypted private key, but it might also have other signed values on it like `profile = <ID>` edge.
        // Using that directed edge's ID, we can then track (in memory) which IDs belong to which keys.
        // Here is a problem: Multiple public keys can "claim" any node's ID, so this is dangerous!
        // This means we should ONLY trust our "friends" (our key ring) public keys, not any ones.
        // I have not yet added that to SEA yet in this alpha release. That is coming soon, but beware in the meanwhile!

        function check(msg){ // REVISE / IMPROVE, NO NEED TO PASS MSG/EVE EACH SUB?
          var eve = this, at = eve.as, put = msg.put, soul = put['#'], key = put['.'], val = put[':'], state = put['>'], id = msg['#'], tmp;
          if(!soul || !key){ return }
          if((msg._||'').faith && (at.opt||'').faith && 'function' == typeof msg._){
            SEA.opt.pack(put, function(raw){
            SEA.verify(raw, false, function(data){ // this is synchronous if false
              put['='] = SEA.opt.unpack(data);
              eve.to.next(msg);
            });});
            return 
          }
          var no = function(why){ at.on('in', {'@': id, err: msg.err = why}); }; // exploit internal relay stun for now, maybe violates spec, but testing for now. // Note: this may be only the sharded message, not original batch.
          //var no = function(why){ msg.ack(why) };
          (msg._||'').DBG && ((msg._||'').DBG.c = +new Date);
          if(0 <= soul.indexOf('<?')){ // special case for "do not sync data X old" forget
            // 'a~pub.key/b<?9'
            tmp = parseFloat(soul.split('<?')[1]||'');
            if(tmp && (state < (Gun.state() - (tmp * 1000)))){ // sec to ms
              (tmp = msg._) && (tmp.stun) && (tmp.stun--); // THIS IS BAD CODE! It assumes GUN internals do something that will probably change in future, but hacking in now.
              return; // omit!
            }
          }
          
          if('~@' === soul){  // special case for shared system data, the list of aliases.
            check.alias(eve, msg, val, key, soul, at, no); return;
          }
          if('~@' === soul.slice(0,2)){ // special case for shared system data, the list of public keys for an alias.
            check.pubs(eve, msg, val, key, soul, at, no); return;
          }
          //if('~' === soul.slice(0,1) && 2 === (tmp = soul.slice(1)).split('.').length){ // special case, account data for a public key.
          if(tmp = SEA.opt.pub(soul)){ // special case, account data for a public key.
            check.pub(eve, msg, val, key, soul, at, no, at.user||'', tmp); return;
          }
          if(0 <= soul.indexOf('#')){ // special case for content addressing immutable hashed data.
            check.hash(eve, msg, val, key, soul, at, no); return;
          } 
          check.any(eve, msg, val, key, soul, at, no, at.user||''); return;
        }
        check.hash = function(eve, msg, val, key, soul, at, no){
          SEA.work(val, null, function(data){
            if(data && data === key.split('#').slice(-1)[0]){ return eve.to.next(msg) }
            no("Data hash not same as hash!");
          }, {name: 'SHA-256'});
        };
        check.alias = function(eve, msg, val, key, soul, at, no){ // Example: {_:#~@, ~@alice: {#~@alice}}
          if(!val){ return no("Data must exist!") } // data MUST exist
          if('~@'+key === link_is(val)){ return eve.to.next(msg) } // in fact, it must be EXACTLY equal to itself
          no("Alias not same!"); // if it isn't, reject.
        };
        check.pubs = function(eve, msg, val, key, soul, at, no){ // Example: {_:#~@alice, ~asdf: {#~asdf}}
          if(!val){ return no("Alias must exist!") } // data MUST exist
          if(key === link_is(val)){ return eve.to.next(msg) } // and the ID must be EXACTLY equal to its property
          no("Alias not same!"); // that way nobody can tamper with the list of public keys.
        };
        check.pub = async function(eve, msg, val, key, soul, at, no, user, pub){ var tmp; // Example: {_:#~asdf, hello:'world'~fdsa}}
          const raw = await S.parse(val) || {};
          const verify = (certificate, certificant, cb) => {
            if (certificate.m && certificate.s && certificant && pub)
              // now verify certificate
              return SEA.verify(certificate, pub, data => { // check if "pub" (of the graph owner) really issued this cert
                if (u !== data && u !== data.e && msg.put['>'] && msg.put['>'] > parseFloat(data.e)) return no("Certificate expired.") // certificate expired
                // "data.c" = a list of certificants/certified users
                // "data.w" = lex WRITE permission, in the future, there will be "data.r" which means lex READ permission
                if (u !== data && data.c && data.w && (data.c === certificant || data.c.indexOf('*' ) > -1)) {
                  // ok, now "certificant" is in the "certificants" list, but is "path" allowed? Check path
                  let path = soul.indexOf('/') > -1 ? soul.replace(soul.substring(0, soul.indexOf('/') + 1), '') : '';
                  String.match = String.match || Gun.text.match;
                  const w = Array.isArray(data.w) ? data.w : typeof data.w === 'object' || typeof data.w === 'string' ? [data.w] : [];
                  for (const lex of w) {
                    if ((String.match(path, lex['#']) && String.match(key, lex['.'])) || (!lex['.'] && String.match(path, lex['#'])) || (!lex['#'] && String.match(key, lex['.'])) || String.match((path ? path + '/' + key : key), lex['#'] || lex)) {
                      // is Certificant forced to present in Path
                      if (lex['+'] && lex['+'].indexOf('*') > -1 && path && path.indexOf(certificant) == -1 && key.indexOf(certificant) == -1) return no(`Path "${path}" or key "${key}" must contain string "${certificant}".`)
                      // path is allowed, but is there any WRITE block? Check it out
                      if (data.wb && (typeof data.wb === 'string' || ((data.wb || {})['#']))) { // "data.wb" = path to the WRITE block
                        var root = eve.as.root.$.back(-1);
                        if (typeof data.wb === 'string' && '~' !== data.wb.slice(0, 1)) root = root.get('~' + pub);
                        return root.get(data.wb).get(certificant).once(value => {
                          if (value && (value === 1 || value === true)) return no(`Certificant ${certificant} blocked.`)
                          return cb(data)
                        })
                      }
                      return cb(data)
                    }
                  }
                  return no("Certificate verification fail.")
                }
              })
            return
          };
          
          if ('pub' === key && '~' + pub === soul) {
            if (val === pub) return eve.to.next(msg) // the account MUST match `pub` property that equals the ID of the public key.
            return no("Account not same!")
          }

          if ((tmp = user.is) && tmp.pub && !raw['*'] && !raw['+'] && (pub === tmp.pub || (pub !== tmp.pub && ((msg._.msg || {}).opt || {}).cert))){
            SEA.opt.pack(msg.put, packed => {
              SEA.sign(packed, (user._).sea, async function(data) {
                if (u === data) return no(SEA.err || 'Signature fail.')
                msg.put[':'] = {':': tmp = SEA.opt.unpack(data.m), '~': data.s};
                msg.put['='] = tmp;
      
                // if writing to own graph, just allow it
                if (pub === user.is.pub) {
                  if (tmp = link_is(val)) (at.sea.own[tmp] = at.sea.own[tmp] || {})[pub] = 1;
                  JSON.stringifyAsync(msg.put[':'], function(err,s){
                    if(err){ return no(err || "Stringify error.") }
                    msg.put[':'] = s;
                    return eve.to.next(msg);
                  });
                  return
                }
      
                // if writing to other's graph, check if cert exists then try to inject cert into put, also inject self pub so that everyone can verify the put
                if (pub !== user.is.pub && ((msg._.msg || {}).opt || {}).cert) {
                  const cert = await S.parse(msg._.msg.opt.cert);
                  // even if cert exists, we must verify it
                  if (cert && cert.m && cert.s)
                    verify(cert, user.is.pub, _ => {
                      msg.put[':']['+'] = cert; // '+' is a certificate
                      msg.put[':']['*'] = user.is.pub; // '*' is pub of the user who puts
                      JSON.stringifyAsync(msg.put[':'], function(err,s){
                        if(err){ return no(err || "Stringify error.") }
                        msg.put[':'] = s;
                        return eve.to.next(msg);
                      });
                      return
                    });
                }
              }, {raw: 1});
            });
            return;
          }

          SEA.opt.pack(msg.put, packed => {
            SEA.verify(packed, raw['*'] || pub, function(data){ var tmp;
              data = SEA.opt.unpack(data);
              if (u === data) return no("Unverified data.") // make sure the signature matches the account it claims to be on. // reject any updates that are signed with a mismatched account.
              if ((tmp = link_is(data)) && pub === SEA.opt.pub(tmp)) (at.sea.own[tmp] = at.sea.own[tmp] || {})[pub] = 1;
              
              // check if cert ('+') and putter's pub ('*') exist
              if (raw['+'] && raw['+']['m'] && raw['+']['s'] && raw['*'])
                // now verify certificate
                verify(raw['+'], raw['*'], _ => {
                  msg.put['='] = data;
                  return eve.to.next(msg);
                });
              else {
                msg.put['='] = data;
                return eve.to.next(msg);
              }
            });
          });
          return
        };
        check.any = function(eve, msg, val, key, soul, at, no, user){      if(at.opt.secure){ return no("Soul missing public key at '" + key + "'.") }
          // TODO: Ask community if should auto-sign non user-graph data.
          at.on('secure', function(msg){ this.off();
            if(!at.opt.secure){ return eve.to.next(msg) }
            no("Data cannot be changed.");
          }).on.on('secure', msg);
          return;
        };

        var valid = Gun.valid, link_is = function(d,l){ return 'string' == typeof (l = valid(d)) && l }; (Gun.state||'').ify;

        var pubcut = /[^\w_-]/; // anything not alphanumeric or _ -
        SEA.opt.pub = function(s){
          if(!s){ return }
          s = s.split('~');
          if(!s || !(s = s[1])){ return }
          s = s.split(pubcut).slice(0,2);
          if(!s || 2 != s.length){ return }
          if('@' === (s[0]||'')[0]){ return }
          s = s.slice(0,2).join('.');
          return s;
        };
        SEA.opt.stringy = function(t){
          // TODO: encrypt etc. need to check string primitive. Make as breaking change.
        };
        SEA.opt.pack = function(d,cb,k, n,s){ var tmp, f; // pack for verifying
          if(SEA.opt.check(d)){ return cb(d) }
          if(d && d['#'] && d['.'] && d['>']){ tmp = d[':']; f = 1; }
          JSON.parseAsync(f? tmp : d, function(err, meta){
            var sig = ((u !== (meta||'')[':']) && (meta||'')['~']); // or just ~ check?
            if(!sig){ cb(d); return }
            cb({m: {'#':s||d['#'],'.':k||d['.'],':':(meta||'')[':'],'>':d['>']||Gun.state.is(n, k)}, s: sig});
          });
        };
        var O = SEA.opt;
        SEA.opt.unpack = function(d, k, n){ var tmp;
          if(u === d){ return }
          if(d && (u !== (tmp = d[':']))){ return tmp }
          k = k || O.fall_key; if(!n && O.fall_val){ n = {}; n[k] = O.fall_val; }
          if(!k || !n){ return }
          if(d === n[k]){ return d }
          if(!SEA.opt.check(n[k])){ return d }
          var soul = (n && n._ && n._['#']) || O.fall_soul, s = Gun.state.is(n, k) || O.fall_state;
          if(d && 4 === d.length && soul === d[0] && k === d[1] && fl(s) === fl(d[3])){
            return d[2];
          }
          if(s < SEA.opt.shuffle_attack){
            return d;
          }
        };
        SEA.opt.shuffle_attack = 1546329600000; // Jan 1, 2019
        var fl = Math.floor; // TODO: Still need to fix inconsistent state issue.
        // TODO: Potential bug? If pub/priv key starts with `-`? IDK how possible.

      })(USE, './index');
    }());
    });

    createCommonjsModule(function (module) {
    (function(){

      /* UNBUILD */
      function USE(arg, req){
        return req? commonjsRequire(arg) : arg.slice? USE[R(arg)] : function(mod, path){
          arg(mod = {exports: {}});
          USE[R(path)] = mod.exports;
        }
        function R(p){
          return p.split('/').slice(-1).toString().replace('.js','');
        }
      }
      { var MODULE = module; }
    USE(function(module){
        if(typeof window !== "undefined"){ module.window = window; }
        var tmp = module.window || module;
    		var AXE = tmp.AXE || function(){};

        if(AXE.window = module.window){ AXE.window.AXE = AXE; }
        try{ if(typeof MODULE !== "undefined"){ MODULE.exports = AXE; } }catch(e){}
        module.exports = AXE;
    	})(USE, './root');
    USE(function(module){

    		var AXE = USE('./root'), Gun = (AXE.window||'').Gun || USE('./gun', 1);
    		(Gun.AXE = AXE).GUN = AXE.Gun = Gun;

        if(!Gun.window){ try{ USE('./lib/axe', 1); }catch(e){} }
    		Gun.on('opt', function(at){ start(at) ; this.to.next(at); }); // make sure to call the "next" middleware adapter.

    		function start(root){
    			if(root.axe){ return }
    			var opt = root.opt, peers = opt.peers;
    			if(false === opt.axe){ return }
    			if((typeof process !== "undefined") && 'false' === ''+(process.env||'').AXE){ return }
    			if(!Gun.window){ return }
    			root.axe = {}; var tmp, id;
    			tmp = peers[id = 'http://localhost:8765/gun'] = peers[id] || {};
    			tmp.id = tmp.url = id;
    			tmp.retry = tmp.retry || 0; // BUG: Check 0?
    			console.log("AXE enabled: Trying to find network via (1) local peer (2) last used peers (3) hard coded peers.");
    			console.log("Warning: AXE alpha became super slow & laggy, now in testing only mode!");
    			var last = JSON.parse((localStorage||'')[(opt.file||'')+'axe/']||null) || {};
    			Object.keys(last.peers||'').forEach(function(key){
    				tmp = peers[id = key] = peers[id] || {};
    				tmp.id = tmp.url = id;
    			});
    			tmp = peers[id = 'https://ovh.era.eco/gun'] = peers[id] || {};
    			tmp.id = tmp.url = id;

    			var mesh = opt.mesh = opt.mesh || Gun.Mesh(root); // DAM!
    			mesh.way = function(msg){
    				if(root.$ === msg.$ || (msg._||'').via){
    					mesh.say(msg, opt.peers);
    					return;
    				}
    				var at = (msg.$||'')._;
    				if(!at){ mesh.say(msg, opt.peers); return }
    				if(msg.get){
    					if(at.axe){ return } // don't ask for it again!
    					at.axe = {};
    				}
    				mesh.say(msg, opt.peers);
    			};
    		}

    		module.exports = AXE;
    	})(USE, './axe');
    }());
    });

    const relayPeer = "http://localhost:3030/gun";
    const gun = gun$1([relayPeer]);
    const user = gun.user().recall({ sessionStorage: true });

    var browser = gun$1;

    const pair = {
      pub: "AtgCZJNe_yXRa7KKwAToUw2fvQi919cZ_2JW4w6QTw4.8StiHI6YIdQlnuiOxnRgNZl8W3m_j1kACZdFYS46x7k",
      priv: "HfThtuXqBt8IR7YjB40sukNk0YtrIZHg7T70Tp4sFsg",
      epub: "Z8z2gTtQqqYFTG9oyyAd-XJFapQpBeikbcSp1UzYbjI.RL9Dg9GtbMs1gzxzY0oPHWiYMevHCTH1PEjSzsBc1CE",
      epriv: "fwPjLwJBjZqNQliFmoYcJYFOv-K4KazwoI9-cEX8zxU",
    };

    const encryptData = async (data) => {
      try {
        const enc = await browser.SEA.encrypt(data, pair);
        const signedData = await browser.SEA.sign(enc, pair);
        return signedData
      } catch (err) {
        console.log(err);
        return null
      }
    };

    const decryptData = async (data) => {
      try {
        const verification = await browser.SEA.verify(data, pair.pub);
        const decrypted = await browser.SEA.decrypt(verification, pair);
        return decrypted
      } catch (err) {
        console.log(err);
        return null
      }
    };

    const currentUser = writable({
      uuid: "",
      nickname: "",
      books: {},
      photo: "",
    });

    const setCurrentUser = () => {
      gun.get(user.is.epub).once(async (_user) => {
        const user = await decryptData(_user.data);
        currentUser.set(user);
      });
    };

    const LOCATION = {};
    const ROUTER = {};

    /**
     * Adapted from https://github.com/reach/router/blob/b60e6dd781d5d3a4bdaaf4de665649c0f6a7e78d/src/lib/history.js
     *
     * https://github.com/reach/router/blob/master/LICENSE
     * */

    function getLocation(source) {
      return {
        ...source.location,
        state: source.history.state,
        key: (source.history.state && source.history.state.key) || "initial"
      };
    }

    function createHistory(source, options) {
      const listeners = [];
      let location = getLocation(source);

      return {
        get location() {
          return location;
        },

        listen(listener) {
          listeners.push(listener);

          const popstateListener = () => {
            location = getLocation(source);
            listener({ location, action: "POP" });
          };

          source.addEventListener("popstate", popstateListener);

          return () => {
            source.removeEventListener("popstate", popstateListener);

            const index = listeners.indexOf(listener);
            listeners.splice(index, 1);
          };
        },

        navigate(to, { state, replace = false } = {}) {
          state = { ...state, key: Date.now() + "" };
          // try...catch iOS Safari limits to 100 pushState calls
          try {
            if (replace) {
              source.history.replaceState(state, null, to);
            } else {
              source.history.pushState(state, null, to);
            }
          } catch (e) {
            source.location[replace ? "replace" : "assign"](to);
          }

          location = getLocation(source);
          listeners.forEach(listener => listener({ location, action: "PUSH" }));
        }
      };
    }

    // Stores history entries in memory for testing or other platforms like Native
    function createMemorySource(initialPathname = "/") {
      let index = 0;
      const stack = [{ pathname: initialPathname, search: "" }];
      const states = [];

      return {
        get location() {
          return stack[index];
        },
        addEventListener(name, fn) {},
        removeEventListener(name, fn) {},
        history: {
          get entries() {
            return stack;
          },
          get index() {
            return index;
          },
          get state() {
            return states[index];
          },
          pushState(state, _, uri) {
            const [pathname, search = ""] = uri.split("?");
            index++;
            stack.push({ pathname, search });
            states.push(state);
          },
          replaceState(state, _, uri) {
            const [pathname, search = ""] = uri.split("?");
            stack[index] = { pathname, search };
            states[index] = state;
          }
        }
      };
    }

    // Global history uses window.history as the source if available,
    // otherwise a memory history
    const canUseDOM = Boolean(
      typeof window !== "undefined" &&
        window.document &&
        window.document.createElement
    );
    const globalHistory = createHistory(canUseDOM ? window : createMemorySource());
    const { navigate } = globalHistory;

    /**
     * Adapted from https://github.com/reach/router/blob/b60e6dd781d5d3a4bdaaf4de665649c0f6a7e78d/src/lib/utils.js
     *
     * https://github.com/reach/router/blob/master/LICENSE
     * */

    const paramRe = /^:(.+)/;

    const SEGMENT_POINTS = 4;
    const STATIC_POINTS = 3;
    const DYNAMIC_POINTS = 2;
    const SPLAT_PENALTY = 1;
    const ROOT_POINTS = 1;

    /**
     * Check if `segment` is a root segment
     * @param {string} segment
     * @return {boolean}
     */
    function isRootSegment(segment) {
      return segment === "";
    }

    /**
     * Check if `segment` is a dynamic segment
     * @param {string} segment
     * @return {boolean}
     */
    function isDynamic(segment) {
      return paramRe.test(segment);
    }

    /**
     * Check if `segment` is a splat
     * @param {string} segment
     * @return {boolean}
     */
    function isSplat(segment) {
      return segment[0] === "*";
    }

    /**
     * Split up the URI into segments delimited by `/`
     * @param {string} uri
     * @return {string[]}
     */
    function segmentize(uri) {
      return (
        uri
          // Strip starting/ending `/`
          .replace(/(^\/+|\/+$)/g, "")
          .split("/")
      );
    }

    /**
     * Strip `str` of potential start and end `/`
     * @param {string} str
     * @return {string}
     */
    function stripSlashes(str) {
      return str.replace(/(^\/+|\/+$)/g, "");
    }

    /**
     * Score a route depending on how its individual segments look
     * @param {object} route
     * @param {number} index
     * @return {object}
     */
    function rankRoute(route, index) {
      const score = route.default
        ? 0
        : segmentize(route.path).reduce((score, segment) => {
            score += SEGMENT_POINTS;

            if (isRootSegment(segment)) {
              score += ROOT_POINTS;
            } else if (isDynamic(segment)) {
              score += DYNAMIC_POINTS;
            } else if (isSplat(segment)) {
              score -= SEGMENT_POINTS + SPLAT_PENALTY;
            } else {
              score += STATIC_POINTS;
            }

            return score;
          }, 0);

      return { route, score, index };
    }

    /**
     * Give a score to all routes and sort them on that
     * @param {object[]} routes
     * @return {object[]}
     */
    function rankRoutes(routes) {
      return (
        routes
          .map(rankRoute)
          // If two routes have the exact same score, we go by index instead
          .sort((a, b) =>
            a.score < b.score ? 1 : a.score > b.score ? -1 : a.index - b.index
          )
      );
    }

    /**
     * Ranks and picks the best route to match. Each segment gets the highest
     * amount of points, then the type of segment gets an additional amount of
     * points where
     *
     *  static > dynamic > splat > root
     *
     * This way we don't have to worry about the order of our routes, let the
     * computers do it.
     *
     * A route looks like this
     *
     *  { path, default, value }
     *
     * And a returned match looks like:
     *
     *  { route, params, uri }
     *
     * @param {object[]} routes
     * @param {string} uri
     * @return {?object}
     */
    function pick(routes, uri) {
      let match;
      let default_;

      const [uriPathname] = uri.split("?");
      const uriSegments = segmentize(uriPathname);
      const isRootUri = uriSegments[0] === "";
      const ranked = rankRoutes(routes);

      for (let i = 0, l = ranked.length; i < l; i++) {
        const route = ranked[i].route;
        let missed = false;

        if (route.default) {
          default_ = {
            route,
            params: {},
            uri
          };
          continue;
        }

        const routeSegments = segmentize(route.path);
        const params = {};
        const max = Math.max(uriSegments.length, routeSegments.length);
        let index = 0;

        for (; index < max; index++) {
          const routeSegment = routeSegments[index];
          const uriSegment = uriSegments[index];

          if (routeSegment !== undefined && isSplat(routeSegment)) {
            // Hit a splat, just grab the rest, and return a match
            // uri:   /files/documents/work
            // route: /files/* or /files/*splatname
            const splatName = routeSegment === "*" ? "*" : routeSegment.slice(1);

            params[splatName] = uriSegments
              .slice(index)
              .map(decodeURIComponent)
              .join("/");
            break;
          }

          if (uriSegment === undefined) {
            // URI is shorter than the route, no match
            // uri:   /users
            // route: /users/:userId
            missed = true;
            break;
          }

          let dynamicMatch = paramRe.exec(routeSegment);

          if (dynamicMatch && !isRootUri) {
            const value = decodeURIComponent(uriSegment);
            params[dynamicMatch[1]] = value;
          } else if (routeSegment !== uriSegment) {
            // Current segments don't match, not dynamic, not splat, so no match
            // uri:   /users/123/settings
            // route: /users/:id/profile
            missed = true;
            break;
          }
        }

        if (!missed) {
          match = {
            route,
            params,
            uri: "/" + uriSegments.slice(0, index).join("/")
          };
          break;
        }
      }

      return match || default_ || null;
    }

    /**
     * Check if the `path` matches the `uri`.
     * @param {string} path
     * @param {string} uri
     * @return {?object}
     */
    function match$4(route, uri) {
      return pick([route], uri);
    }

    /**
     * Combines the `basepath` and the `path` into one path.
     * @param {string} basepath
     * @param {string} path
     */
    function combinePaths(basepath, path) {
      return `${stripSlashes(
    path === "/" ? basepath : `${stripSlashes(basepath)}/${stripSlashes(path)}`
  )}/`;
    }

    /* node_modules/svelte-routing/src/Router.svelte generated by Svelte v3.44.1 */

    function create_fragment$B(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[8],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$B.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$B($$self, $$props, $$invalidate) {
    	let $location;
    	let $routes;
    	let $base;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Router', slots, ['default']);
    	let { basepath = "/" } = $$props;
    	let { url = null } = $$props;
    	const locationContext = getContext(LOCATION);
    	const routerContext = getContext(ROUTER);
    	const routes = writable([]);
    	validate_store(routes, 'routes');
    	component_subscribe($$self, routes, value => $$invalidate(6, $routes = value));
    	const activeRoute = writable(null);
    	let hasActiveRoute = false; // Used in SSR to synchronously set that a Route is active.

    	// If locationContext is not set, this is the topmost Router in the tree.
    	// If the `url` prop is given we force the location to it.
    	const location = locationContext || writable(url ? { pathname: url } : globalHistory.location);

    	validate_store(location, 'location');
    	component_subscribe($$self, location, value => $$invalidate(5, $location = value));

    	// If routerContext is set, the routerBase of the parent Router
    	// will be the base for this Router's descendants.
    	// If routerContext is not set, the path and resolved uri will both
    	// have the value of the basepath prop.
    	const base = routerContext
    	? routerContext.routerBase
    	: writable({ path: basepath, uri: basepath });

    	validate_store(base, 'base');
    	component_subscribe($$self, base, value => $$invalidate(7, $base = value));

    	const routerBase = derived([base, activeRoute], ([base, activeRoute]) => {
    		// If there is no activeRoute, the routerBase will be identical to the base.
    		if (activeRoute === null) {
    			return base;
    		}

    		const { path: basepath } = base;
    		const { route, uri } = activeRoute;

    		// Remove the potential /* or /*splatname from
    		// the end of the child Routes relative paths.
    		const path = route.default
    		? basepath
    		: route.path.replace(/\*.*$/, "");

    		return { path, uri };
    	});

    	function registerRoute(route) {
    		const { path: basepath } = $base;
    		let { path } = route;

    		// We store the original path in the _path property so we can reuse
    		// it when the basepath changes. The only thing that matters is that
    		// the route reference is intact, so mutation is fine.
    		route._path = path;

    		route.path = combinePaths(basepath, path);

    		if (typeof window === "undefined") {
    			// In SSR we should set the activeRoute immediately if it is a match.
    			// If there are more Routes being registered after a match is found,
    			// we just skip them.
    			if (hasActiveRoute) {
    				return;
    			}

    			const matchingRoute = match$4(route, $location.pathname);

    			if (matchingRoute) {
    				activeRoute.set(matchingRoute);
    				hasActiveRoute = true;
    			}
    		} else {
    			routes.update(rs => {
    				rs.push(route);
    				return rs;
    			});
    		}
    	}

    	function unregisterRoute(route) {
    		routes.update(rs => {
    			const index = rs.indexOf(route);
    			rs.splice(index, 1);
    			return rs;
    		});
    	}

    	if (!locationContext) {
    		// The topmost Router in the tree is responsible for updating
    		// the location store and supplying it through context.
    		onMount(() => {
    			const unlisten = globalHistory.listen(history => {
    				location.set(history.location);
    			});

    			return unlisten;
    		});

    		setContext(LOCATION, location);
    	}

    	setContext(ROUTER, {
    		activeRoute,
    		base,
    		routerBase,
    		registerRoute,
    		unregisterRoute
    	});

    	const writable_props = ['basepath', 'url'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Router> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('basepath' in $$props) $$invalidate(3, basepath = $$props.basepath);
    		if ('url' in $$props) $$invalidate(4, url = $$props.url);
    		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		setContext,
    		onMount,
    		writable,
    		derived,
    		LOCATION,
    		ROUTER,
    		globalHistory,
    		pick,
    		match: match$4,
    		stripSlashes,
    		combinePaths,
    		basepath,
    		url,
    		locationContext,
    		routerContext,
    		routes,
    		activeRoute,
    		hasActiveRoute,
    		location,
    		base,
    		routerBase,
    		registerRoute,
    		unregisterRoute,
    		$location,
    		$routes,
    		$base
    	});

    	$$self.$inject_state = $$props => {
    		if ('basepath' in $$props) $$invalidate(3, basepath = $$props.basepath);
    		if ('url' in $$props) $$invalidate(4, url = $$props.url);
    		if ('hasActiveRoute' in $$props) hasActiveRoute = $$props.hasActiveRoute;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$base*/ 128) {
    			// This reactive statement will update all the Routes' path when
    			// the basepath changes.
    			{
    				const { path: basepath } = $base;

    				routes.update(rs => {
    					rs.forEach(r => r.path = combinePaths(basepath, r._path));
    					return rs;
    				});
    			}
    		}

    		if ($$self.$$.dirty & /*$routes, $location*/ 96) {
    			// This reactive statement will be run when the Router is created
    			// when there are no Routes and then again the following tick, so it
    			// will not find an active Route in SSR and in the browser it will only
    			// pick an active Route after all Routes have been registered.
    			{
    				const bestMatch = pick($routes, $location.pathname);
    				activeRoute.set(bestMatch);
    			}
    		}
    	};

    	return [
    		routes,
    		location,
    		base,
    		basepath,
    		url,
    		$location,
    		$routes,
    		$base,
    		$$scope,
    		slots
    	];
    }

    class Router extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$B, create_fragment$B, safe_not_equal, { basepath: 3, url: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Router",
    			options,
    			id: create_fragment$B.name
    		});
    	}

    	get basepath() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set basepath(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get url() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set url(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-routing/src/Route.svelte generated by Svelte v3.44.1 */

    const get_default_slot_changes = dirty => ({
    	params: dirty & /*routeParams*/ 4,
    	location: dirty & /*$location*/ 16
    });

    const get_default_slot_context = ctx => ({
    	params: /*routeParams*/ ctx[2],
    	location: /*$location*/ ctx[4]
    });

    // (40:0) {#if $activeRoute !== null && $activeRoute.route === route}
    function create_if_block$m(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1$b, create_else_block$6];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*component*/ ctx[0] !== null) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$m.name,
    		type: "if",
    		source: "(40:0) {#if $activeRoute !== null && $activeRoute.route === route}",
    		ctx
    	});

    	return block;
    }

    // (43:2) {:else}
    function create_else_block$6(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], get_default_slot_context);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope, routeParams, $location*/ 532)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[9],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, get_default_slot_changes),
    						get_default_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(43:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (41:2) {#if component !== null}
    function create_if_block_1$b(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;

    	const switch_instance_spread_levels = [
    		{ location: /*$location*/ ctx[4] },
    		/*routeParams*/ ctx[2],
    		/*routeProps*/ ctx[3]
    	];

    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*$location, routeParams, routeProps*/ 28)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*$location*/ 16 && { location: /*$location*/ ctx[4] },
    					dirty & /*routeParams*/ 4 && get_spread_object(/*routeParams*/ ctx[2]),
    					dirty & /*routeProps*/ 8 && get_spread_object(/*routeProps*/ ctx[3])
    				])
    			: {};

    			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$b.name,
    		type: "if",
    		source: "(41:2) {#if component !== null}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$A(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*$activeRoute*/ ctx[1] !== null && /*$activeRoute*/ ctx[1].route === /*route*/ ctx[7] && create_if_block$m(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$activeRoute*/ ctx[1] !== null && /*$activeRoute*/ ctx[1].route === /*route*/ ctx[7]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$activeRoute*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$m(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$A.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$A($$self, $$props, $$invalidate) {
    	let $activeRoute;
    	let $location;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Route', slots, ['default']);
    	let { path = "" } = $$props;
    	let { component = null } = $$props;
    	const { registerRoute, unregisterRoute, activeRoute } = getContext(ROUTER);
    	validate_store(activeRoute, 'activeRoute');
    	component_subscribe($$self, activeRoute, value => $$invalidate(1, $activeRoute = value));
    	const location = getContext(LOCATION);
    	validate_store(location, 'location');
    	component_subscribe($$self, location, value => $$invalidate(4, $location = value));

    	const route = {
    		path,
    		// If no path prop is given, this Route will act as the default Route
    		// that is rendered if no other Route in the Router is a match.
    		default: path === ""
    	};

    	let routeParams = {};
    	let routeProps = {};
    	registerRoute(route);

    	// There is no need to unregister Routes in SSR since it will all be
    	// thrown away anyway.
    	if (typeof window !== "undefined") {
    		onDestroy(() => {
    			unregisterRoute(route);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(13, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('path' in $$new_props) $$invalidate(8, path = $$new_props.path);
    		if ('component' in $$new_props) $$invalidate(0, component = $$new_props.component);
    		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		onDestroy,
    		ROUTER,
    		LOCATION,
    		path,
    		component,
    		registerRoute,
    		unregisterRoute,
    		activeRoute,
    		location,
    		route,
    		routeParams,
    		routeProps,
    		$activeRoute,
    		$location
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(13, $$props = assign(assign({}, $$props), $$new_props));
    		if ('path' in $$props) $$invalidate(8, path = $$new_props.path);
    		if ('component' in $$props) $$invalidate(0, component = $$new_props.component);
    		if ('routeParams' in $$props) $$invalidate(2, routeParams = $$new_props.routeParams);
    		if ('routeProps' in $$props) $$invalidate(3, routeProps = $$new_props.routeProps);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$activeRoute*/ 2) {
    			if ($activeRoute && $activeRoute.route === route) {
    				$$invalidate(2, routeParams = $activeRoute.params);
    			}
    		}

    		{
    			const { path, component, ...rest } = $$props;
    			$$invalidate(3, routeProps = rest);
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		component,
    		$activeRoute,
    		routeParams,
    		routeProps,
    		$location,
    		activeRoute,
    		location,
    		route,
    		path,
    		$$scope,
    		slots
    	];
    }

    class Route extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$A, create_fragment$A, safe_not_equal, { path: 8, component: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Route",
    			options,
    			id: create_fragment$A.name
    		});
    	}

    	get path() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get component() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set component(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/layouts/Center.svelte generated by Svelte v3.44.1 */

    const file$x = "src/layouts/Center.svelte";

    function create_fragment$z(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", "main-wrapper svelte-18vxslc");
    			add_location(div, file$x, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[0],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$z($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Center', slots, ['default']);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Center> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
    	};

    	return [$$scope, slots];
    }

    class Center extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$z, create_fragment$z, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Center",
    			options,
    			id: create_fragment$z.name
    		});
    	}
    }

    const Theme = {
      PALETTE: {
        primary: "#f28b05",
        secondary: "#4a453d",
        gray: "#727272",
        lightPrimary: "#bfb9cf",
      },
    };

    const handleAuthResponse = (response) => {
      if (Object.keys(response).includes("err")) {
        if (response.err === "Password too short!") {
          customAlert("password-too-short");
          return "error";
        }

        if (response.err === "Wrong user or password.") {
          customAlert("no-user");
          return "error";
        }

        if (response.err === "User is already being created or authenticated!") {
          customAlert("user-already-created-or-authenticated");
          return "error";
        }

        if (response.err === "User already created!") {
          customAlert("user-already-created");
          return "error";
        }
      }

      return "correct";
    };

    const customAlert = (option) => {
      const alertMap = {
        "no-user": () => alert("No se encontró el usuario"),
        "password-too-short": () => alert("La contraseña es muy corta"),
        "user-already-created-or-authenticated": () =>
          alert("El usuario ya fue registrado o autenticado"),
        "user-already-created": () => alert("El usuario ya fue creado"),
      };

      alertMap[option]();
    };

    const generateGenericUserData = (date, nickname) => {
      return {
        followers: [],
        followed: [],
        books: {},
        photo: `https://avatars.dicebear.com/api/avataaars/${nickname}.svg`,
        createdAt: date,
        updatedAt: date,
      }
    };

    const updateFollowers = (idToUpdate, callback) => {
      const userId = user.is.epub;

      gun.get(idToUpdate).once(async (_userToUpdate) => {
        const userToUpdate = await decryptData(_userToUpdate.data);
        let userFollowers = userToUpdate.followers;

        if (!userFollowers.includes(userId)) {
          // Add new follower
          userFollowers.push(userId);
        } else {
          // Remove follower
          userFollowers = userFollowers.filter((follower) => follower !== userId);
        }

        const userToUpdateNewData = await encryptData({
          ...userToUpdate,
          followers: userFollowers,
        });

        gun.get(idToUpdate).put({ data: userToUpdateNewData });
        callback();
      });
    };

    const updateUserField = (field, data) => {
      const userId = user.is.epub;
      gun.get(userId).once(async (_user) => {
        const user = await decryptData(_user.data);
        const newData = await encryptData({
          ...user,
          [field]: data,
        });

        gun.get(userId).put({
          data: newData,
        });
        setCurrentUser();
      });
    };

    const createUser = async (nickname) => {
      const newUserId = user.is.epub;

      const genericUserData = generateGenericUserData(
        new Date().getTime(),
        nickname
      );
      const userData = await encryptData({
        uuid: newUserId,
        nickname,
        ...genericUserData,
      });
      const newUser = gun.get(newUserId).put({
        data: userData,
      });

      gun.get(USERS).set(newUser);
      setCurrentUser();
    };

    const logoutUser = () => {
      user.leave();
    };

    const updateUserPhoto = (newPhoto) => {
      updateUserField("photo", newPhoto);
    };

    const MAX_DESCRIPTION_LENGTH = 200;
    const MAX_NICKNAME_LENGTH = 15;
    const PROFILE_DOT_REPLACEMENT = "-";
    const RECENT_BOOK_DAYS_INTERVAL = 1;

    /* src/containers/LoginBox.svelte generated by Svelte v3.44.1 */
    const file$w = "src/containers/LoginBox.svelte";

    function create_fragment$y(ctx) {
    	let div2;
    	let div0;
    	let label0;
    	let t1;
    	let input0;
    	let t2;
    	let label1;
    	let t4;
    	let input1;
    	let t5;
    	let span0;

    	let t6_value = (!/*showPassword*/ ctx[1]
    	? "Mostrar contraseña"
    	: "Ocultar contraseña") + "";

    	let t6;
    	let t7;
    	let div1;
    	let button;
    	let t8;
    	let t9;
    	let span1;
    	let t10;
    	let b;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			label0 = element("label");
    			label0.textContent = "Nombre de usuario";
    			t1 = space();
    			input0 = element("input");
    			t2 = space();
    			label1 = element("label");
    			label1.textContent = "Contraseña";
    			t4 = space();
    			input1 = element("input");
    			t5 = space();
    			span0 = element("span");
    			t6 = text(t6_value);
    			t7 = space();
    			div1 = element("div");
    			button = element("button");
    			t8 = text("Ingresar");
    			t9 = space();
    			span1 = element("span");
    			t10 = text("¿No tienes cuenta?\n    ");
    			b = element("b");
    			b.textContent = "Regístrate";
    			attr_dev(label0, "for", "nickname");
    			add_location(label0, file$w, 115, 4, 2269);
    			attr_dev(input0, "autocomplete", "off");
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "id", "nickname");
    			attr_dev(input0, "maxlength", MAX_NICKNAME_LENGTH);
    			attr_dev(input0, "class", "input svelte-145cb8p");
    			add_location(input0, file$w, 116, 4, 2321);
    			attr_dev(label1, "for", "passphrase");
    			add_location(label1, file$w, 124, 4, 2499);
    			attr_dev(input1, "autocomplete", "off");
    			attr_dev(input1, "type", "password");
    			attr_dev(input1, "id", "passphrase");
    			attr_dev(input1, "class", "input svelte-145cb8p");
    			add_location(input1, file$w, 125, 4, 2546);
    			attr_dev(span0, "class", "show-password-cta svelte-145cb8p");
    			add_location(span0, file$w, 132, 4, 2692);
    			attr_dev(div0, "class", "form-container svelte-145cb8p");
    			add_location(div0, file$w, 114, 2, 2236);
    			attr_dev(button, "class", "button svelte-145cb8p");
    			set_style(button, "background", Theme.PALETTE.primary);
    			add_location(button, file$w, 137, 4, 2884);
    			attr_dev(div1, "class", "buttons-section svelte-145cb8p");
    			add_location(div1, file$w, 136, 2, 2850);
    			attr_dev(b, "class", "svelte-145cb8p");
    			add_location(b, file$w, 144, 4, 3085);
    			attr_dev(span1, "class", "no-account-message svelte-145cb8p");
    			add_location(span1, file$w, 142, 2, 3024);
    			attr_dev(div2, "class", "input-box svelte-145cb8p");
    			add_location(div2, file$w, 113, 0, 2210);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, label0);
    			append_dev(div0, t1);
    			append_dev(div0, input0);
    			set_input_value(input0, /*formState*/ ctx[0].nickname);
    			append_dev(div0, t2);
    			append_dev(div0, label1);
    			append_dev(div0, t4);
    			append_dev(div0, input1);
    			set_input_value(input1, /*formState*/ ctx[0].passphrase);
    			append_dev(div0, t5);
    			append_dev(div0, span0);
    			append_dev(span0, t6);
    			append_dev(div2, t7);
    			append_dev(div2, div1);
    			append_dev(div1, button);
    			append_dev(button, t8);
    			append_dev(div2, t9);
    			append_dev(div2, span1);
    			append_dev(span1, t10);
    			append_dev(span1, b);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[6]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[7]),
    					listen_dev(span0, "click", /*togglePasswordVisibility*/ ctx[3], false, false, false),
    					listen_dev(button, "click", /*validateForm*/ ctx[2], false, false, false),
    					listen_dev(b, "click", /*handleShowRegisterBox*/ ctx[4], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*formState*/ 1 && input0.value !== /*formState*/ ctx[0].nickname) {
    				set_input_value(input0, /*formState*/ ctx[0].nickname);
    			}

    			if (dirty & /*formState*/ 1 && input1.value !== /*formState*/ ctx[0].passphrase) {
    				set_input_value(input1, /*formState*/ ctx[0].passphrase);
    			}

    			if (dirty & /*showPassword*/ 2 && t6_value !== (t6_value = (!/*showPassword*/ ctx[1]
    			? "Mostrar contraseña"
    			: "Ocultar contraseña") + "")) set_data_dev(t6, t6_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$y($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('LoginBox', slots, []);

    	let { onChangeAuthOption = () => {
    		
    	} } = $$props;

    	let formState = { nickname: "", passphrase: "" };
    	let showPassword = false;

    	const handleLogin = option => {
    		user.auth(formState.nickname, formState.passphrase, async response => {
    			const res = handleAuthResponse(response);

    			if (res !== "error") {
    				option === "create-user"
    				? await createUser(formState.nickname)
    				: setCurrentUser();

    				navigate("/home");
    			}
    		});
    	};

    	const validateForm = () => {
    		if (!formState.nickname.trim().length || !formState.passphrase.trim().length) {
    			alert("No puedes dejar campos vacíos");
    			return;
    		}

    		if (formState.nickname.trim().length < 4) {
    			alert("Tu nickname debe tener al menos 4 caracteres");
    			return;
    		}

    		handleLogin("get-user");
    	};

    	const togglePasswordVisibility = () => {
    		if (!formState.passphrase.length) {
    			return;
    		}

    		$$invalidate(1, showPassword = !showPassword);
    		document.getElementById("passphrase").type = showPassword ? "text" : "password";
    	};

    	const handleShowRegisterBox = () => {
    		onChangeAuthOption();
    	};

    	const writable_props = ['onChangeAuthOption'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<LoginBox> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		formState.nickname = this.value;
    		$$invalidate(0, formState);
    	}

    	function input1_input_handler() {
    		formState.passphrase = this.value;
    		$$invalidate(0, formState);
    	}

    	$$self.$$set = $$props => {
    		if ('onChangeAuthOption' in $$props) $$invalidate(5, onChangeAuthOption = $$props.onChangeAuthOption);
    	};

    	$$self.$capture_state = () => ({
    		user,
    		Theme,
    		handleAuthResponse,
    		navigate,
    		createUser,
    		setCurrentUser,
    		MAX_NICKNAME_LENGTH,
    		onChangeAuthOption,
    		formState,
    		showPassword,
    		handleLogin,
    		validateForm,
    		togglePasswordVisibility,
    		handleShowRegisterBox
    	});

    	$$self.$inject_state = $$props => {
    		if ('onChangeAuthOption' in $$props) $$invalidate(5, onChangeAuthOption = $$props.onChangeAuthOption);
    		if ('formState' in $$props) $$invalidate(0, formState = $$props.formState);
    		if ('showPassword' in $$props) $$invalidate(1, showPassword = $$props.showPassword);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		formState,
    		showPassword,
    		validateForm,
    		togglePasswordVisibility,
    		handleShowRegisterBox,
    		onChangeAuthOption,
    		input0_input_handler,
    		input1_input_handler
    	];
    }

    class LoginBox extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$y, create_fragment$y, safe_not_equal, { onChangeAuthOption: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LoginBox",
    			options,
    			id: create_fragment$y.name
    		});
    	}

    	get onChangeAuthOption() {
    		throw new Error("<LoginBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onChangeAuthOption(value) {
    		throw new Error("<LoginBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/containers/SignUpBox.svelte generated by Svelte v3.44.1 */
    const file$v = "src/containers/SignUpBox.svelte";

    function create_fragment$x(ctx) {
    	let div2;
    	let div0;
    	let label0;
    	let t1;
    	let input0;
    	let t2;
    	let label1;
    	let t4;
    	let input1;
    	let t5;
    	let label2;
    	let t7;
    	let input2;
    	let t8;
    	let span0;

    	let t9_value = (!/*showPassword*/ ctx[1]
    	? "Mostrar contraseña"
    	: "Ocultar contraseña") + "";

    	let t9;
    	let t10;
    	let div1;
    	let button;
    	let t11;
    	let t12;
    	let span1;
    	let t13;
    	let b;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			label0 = element("label");
    			label0.textContent = "Nombre de usuario";
    			t1 = space();
    			input0 = element("input");
    			t2 = space();
    			label1 = element("label");
    			label1.textContent = "Contraseña";
    			t4 = space();
    			input1 = element("input");
    			t5 = space();
    			label2 = element("label");
    			label2.textContent = "Repetir contraseña";
    			t7 = space();
    			input2 = element("input");
    			t8 = space();
    			span0 = element("span");
    			t9 = text(t9_value);
    			t10 = space();
    			div1 = element("div");
    			button = element("button");
    			t11 = text("Registrarte");
    			t12 = space();
    			span1 = element("span");
    			t13 = text("¿Ya tienes cuenta?\n    ");
    			b = element("b");
    			b.textContent = "Inicia sesión";
    			attr_dev(label0, "for", "nickname");
    			add_location(label0, file$v, 133, 4, 2770);
    			attr_dev(input0, "autocomplete", "off");
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "id", "nickname");
    			attr_dev(input0, "maxlength", MAX_NICKNAME_LENGTH);
    			attr_dev(input0, "class", "input svelte-1xi4y06");
    			add_location(input0, file$v, 134, 4, 2822);
    			attr_dev(label1, "for", "passphrase");
    			add_location(label1, file$v, 142, 4, 3000);
    			attr_dev(input1, "autocomplete", "off");
    			attr_dev(input1, "type", "password");
    			attr_dev(input1, "id", "passphrase");
    			attr_dev(input1, "class", "input svelte-1xi4y06");
    			add_location(input1, file$v, 143, 4, 3047);
    			attr_dev(label2, "for", "passphrase-repeat");
    			add_location(label2, file$v, 150, 4, 3193);
    			attr_dev(input2, "autocomplete", "off");
    			attr_dev(input2, "type", "password");
    			attr_dev(input2, "id", "passphrase-repeat");
    			attr_dev(input2, "class", "input svelte-1xi4y06");
    			add_location(input2, file$v, 151, 4, 3255);
    			attr_dev(span0, "class", "show-password-cta svelte-1xi4y06");
    			add_location(span0, file$v, 158, 4, 3416);
    			attr_dev(div0, "class", "form-container svelte-1xi4y06");
    			add_location(div0, file$v, 132, 2, 2737);
    			attr_dev(button, "class", "button svelte-1xi4y06");
    			set_style(button, "background", Theme.PALETTE.primary);
    			add_location(button, file$v, 163, 4, 3608);
    			attr_dev(div1, "class", "buttons-section svelte-1xi4y06");
    			add_location(div1, file$v, 162, 2, 3574);
    			attr_dev(b, "class", "svelte-1xi4y06");
    			add_location(b, file$v, 170, 4, 3812);
    			attr_dev(span1, "class", "no-account-message svelte-1xi4y06");
    			add_location(span1, file$v, 168, 2, 3751);
    			attr_dev(div2, "class", "input-box svelte-1xi4y06");
    			add_location(div2, file$v, 131, 0, 2711);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, label0);
    			append_dev(div0, t1);
    			append_dev(div0, input0);
    			set_input_value(input0, /*formState*/ ctx[0].nickname);
    			append_dev(div0, t2);
    			append_dev(div0, label1);
    			append_dev(div0, t4);
    			append_dev(div0, input1);
    			set_input_value(input1, /*formState*/ ctx[0].passphrase);
    			append_dev(div0, t5);
    			append_dev(div0, label2);
    			append_dev(div0, t7);
    			append_dev(div0, input2);
    			set_input_value(input2, /*formState*/ ctx[0].repeatedPassphrase);
    			append_dev(div0, t8);
    			append_dev(div0, span0);
    			append_dev(span0, t9);
    			append_dev(div2, t10);
    			append_dev(div2, div1);
    			append_dev(div1, button);
    			append_dev(button, t11);
    			append_dev(div2, t12);
    			append_dev(div2, span1);
    			append_dev(span1, t13);
    			append_dev(span1, b);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[6]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[7]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[8]),
    					listen_dev(span0, "click", /*togglePasswordVisibility*/ ctx[3], false, false, false),
    					listen_dev(button, "click", /*validateForm*/ ctx[2], false, false, false),
    					listen_dev(b, "click", /*handleShowLoginBox*/ ctx[4], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*formState*/ 1 && input0.value !== /*formState*/ ctx[0].nickname) {
    				set_input_value(input0, /*formState*/ ctx[0].nickname);
    			}

    			if (dirty & /*formState*/ 1 && input1.value !== /*formState*/ ctx[0].passphrase) {
    				set_input_value(input1, /*formState*/ ctx[0].passphrase);
    			}

    			if (dirty & /*formState*/ 1 && input2.value !== /*formState*/ ctx[0].repeatedPassphrase) {
    				set_input_value(input2, /*formState*/ ctx[0].repeatedPassphrase);
    			}

    			if (dirty & /*showPassword*/ 2 && t9_value !== (t9_value = (!/*showPassword*/ ctx[1]
    			? "Mostrar contraseña"
    			: "Ocultar contraseña") + "")) set_data_dev(t9, t9_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$x.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$x($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SignUpBox', slots, []);

    	let { onChangeAuthOption = () => {
    		
    	} } = $$props;

    	let formState = {
    		nickname: "",
    		passphrase: "",
    		repeatedPassphrase: ""
    	};

    	let showPassword = false;

    	const handleLogin = option => {
    		user.auth(formState.nickname, formState.passphrase, async response => {
    			const res = handleAuthResponse(response);

    			if (res !== "error") {
    				option === "create-user"
    				? await createUser(formState.nickname)
    				: setCurrentUser();

    				navigate("/home");
    			}
    		});
    	};

    	const handleSignup = () => {
    		user.create(formState.nickname, formState.passphrase, response => {
    			const res = handleAuthResponse(response);

    			if (res !== "error") {
    				handleLogin("create-user");
    			}
    		});
    	};

    	const validateForm = () => {
    		if (!formState.nickname.trim().length || !formState.passphrase.trim().length || !formState.repeatedPassphrase.trim().length) {
    			alert("No puedes dejar campos vacíos");
    			return;
    		}

    		if (formState.nickname.trim().length < 4) {
    			alert("Tu nickname debe tener al menos 4 caracteres");
    			return;
    		}

    		if (formState.passphrase !== formState.repeatedPassphrase) {
    			alert("Las contraseñas no coinciden");
    			return;
    		}

    		handleSignup();
    	};

    	const togglePasswordVisibility = () => {
    		if (!formState.passphrase.length) {
    			return;
    		}

    		$$invalidate(1, showPassword = !showPassword);
    		document.getElementById("passphrase").type = showPassword ? "text" : "password";
    		document.getElementById("passphrase-repeat").type = showPassword ? "text" : "password";
    	};

    	const handleShowLoginBox = () => {
    		onChangeAuthOption();
    	};

    	const writable_props = ['onChangeAuthOption'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SignUpBox> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		formState.nickname = this.value;
    		$$invalidate(0, formState);
    	}

    	function input1_input_handler() {
    		formState.passphrase = this.value;
    		$$invalidate(0, formState);
    	}

    	function input2_input_handler() {
    		formState.repeatedPassphrase = this.value;
    		$$invalidate(0, formState);
    	}

    	$$self.$$set = $$props => {
    		if ('onChangeAuthOption' in $$props) $$invalidate(5, onChangeAuthOption = $$props.onChangeAuthOption);
    	};

    	$$self.$capture_state = () => ({
    		user,
    		Theme,
    		handleAuthResponse,
    		navigate,
    		createUser,
    		setCurrentUser,
    		MAX_NICKNAME_LENGTH,
    		onChangeAuthOption,
    		formState,
    		showPassword,
    		handleLogin,
    		handleSignup,
    		validateForm,
    		togglePasswordVisibility,
    		handleShowLoginBox
    	});

    	$$self.$inject_state = $$props => {
    		if ('onChangeAuthOption' in $$props) $$invalidate(5, onChangeAuthOption = $$props.onChangeAuthOption);
    		if ('formState' in $$props) $$invalidate(0, formState = $$props.formState);
    		if ('showPassword' in $$props) $$invalidate(1, showPassword = $$props.showPassword);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		formState,
    		showPassword,
    		validateForm,
    		togglePasswordVisibility,
    		handleShowLoginBox,
    		onChangeAuthOption,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler
    	];
    }

    class SignUpBox extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$x, create_fragment$x, safe_not_equal, { onChangeAuthOption: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SignUpBox",
    			options,
    			id: create_fragment$x.name
    		});
    	}

    	get onChangeAuthOption() {
    		throw new Error("<SignUpBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onChangeAuthOption(value) {
    		throw new Error("<SignUpBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/pages/Auth.svelte generated by Svelte v3.44.1 */
    const file$u = "src/pages/Auth.svelte";

    // (26:36) 
    function create_if_block_1$a(ctx) {
    	let signupbox;
    	let current;

    	signupbox = new SignUpBox({
    			props: { onChangeAuthOption: /*func_1*/ ctx[2] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(signupbox.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(signupbox, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const signupbox_changes = {};
    			if (dirty & /*authOption*/ 1) signupbox_changes.onChangeAuthOption = /*func_1*/ ctx[2];
    			signupbox.$set(signupbox_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(signupbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(signupbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(signupbox, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$a.name,
    		type: "if",
    		source: "(26:36) ",
    		ctx
    	});

    	return block;
    }

    // (24:2) {#if authOption === "login"}
    function create_if_block$l(ctx) {
    	let loginbox;
    	let current;

    	loginbox = new LoginBox({
    			props: { onChangeAuthOption: /*func*/ ctx[1] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(loginbox.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(loginbox, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const loginbox_changes = {};
    			if (dirty & /*authOption*/ 1) loginbox_changes.onChangeAuthOption = /*func*/ ctx[1];
    			loginbox.$set(loginbox_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loginbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loginbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(loginbox, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$l.name,
    		type: "if",
    		source: "(24:2) {#if authOption === \\\"login\\\"}",
    		ctx
    	});

    	return block;
    }

    // (23:0) <CenterLayout>
    function create_default_slot$7(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$l, create_if_block_1$a];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*authOption*/ ctx[0] === "login") return 0;
    		if (/*authOption*/ ctx[0] === "signup") return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$7.name,
    		type: "slot",
    		source: "(23:0) <CenterLayout>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$w(ctx) {
    	let t0;
    	let img;
    	let img_src_value;
    	let t1;
    	let centerlayout;
    	let current;

    	centerlayout = new Center({
    			props: {
    				$$slots: { default: [create_default_slot$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			t0 = space();
    			img = element("img");
    			t1 = space();
    			create_component(centerlayout.$$.fragment);
    			document.title = "Iniciar sesión";
    			attr_dev(img, "class", "dbook-logo svelte-10yv0yi");
    			attr_dev(img, "alt", "DBook");
    			if (!src_url_equal(img.src, img_src_value = "https://i.imgur.com/rHSrbEZ.png")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$u, 20, 0, 352);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, img, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(centerlayout, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const centerlayout_changes = {};

    			if (dirty & /*$$scope, authOption*/ 9) {
    				centerlayout_changes.$$scope = { dirty, ctx };
    			}

    			centerlayout.$set(centerlayout_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(centerlayout.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(centerlayout.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(img);
    			if (detaching) detach_dev(t1);
    			destroy_component(centerlayout, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$w.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$w($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Auth', slots, []);
    	let authOption = "login";
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Auth> was created with unknown prop '${key}'`);
    	});

    	const func = () => $$invalidate(0, authOption = 'signup');
    	const func_1 = () => $$invalidate(0, authOption = 'login');

    	$$self.$capture_state = () => ({
    		CenterLayout: Center,
    		LoginBox,
    		SignUpBox,
    		authOption
    	});

    	$$self.$inject_state = $$props => {
    		if ('authOption' in $$props) $$invalidate(0, authOption = $$props.authOption);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [authOption, func, func_1];
    }

    class Auth extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$w, create_fragment$w, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Auth",
    			options,
    			id: create_fragment$w.name
    		});
    	}
    }

    /* src/components/Navbar.svelte generated by Svelte v3.44.1 */
    const file$t = "src/components/Navbar.svelte";

    // (120:2) {#if showProfileMenu}
    function create_if_block$k(ctx) {
    	let ul;
    	let li0;
    	let i0;
    	let t0;
    	let span0;
    	let t2;
    	let li1;
    	let i1;
    	let t3;
    	let span1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			ul = element("ul");
    			li0 = element("li");
    			i0 = element("i");
    			t0 = space();
    			span0 = element("span");
    			span0.textContent = "Perfil";
    			t2 = space();
    			li1 = element("li");
    			i1 = element("i");
    			t3 = space();
    			span1 = element("span");
    			span1.textContent = "Cerrar sesión";
    			attr_dev(i0, "class", "mi mi-user svelte-16uqtz0");
    			add_location(i0, file$t, 122, 8, 2128);
    			add_location(span0, file$t, 123, 8, 2163);
    			attr_dev(li0, "class", "svelte-16uqtz0");
    			add_location(li0, file$t, 121, 6, 2066);
    			attr_dev(i1, "class", "mi mi-log-out svelte-16uqtz0");
    			add_location(i1, file$t, 126, 8, 2269);
    			add_location(span1, file$t, 127, 8, 2307);
    			attr_dev(li1, "class", "svelte-16uqtz0");
    			add_location(li1, file$t, 125, 6, 2201);
    			attr_dev(ul, "class", "svelte-16uqtz0");
    			add_location(ul, file$t, 120, 4, 2055);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);
    			append_dev(ul, li0);
    			append_dev(li0, i0);
    			append_dev(li0, t0);
    			append_dev(li0, span0);
    			append_dev(ul, t2);
    			append_dev(ul, li1);
    			append_dev(li1, i1);
    			append_dev(li1, t3);
    			append_dev(li1, span1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(li0, "click", /*click_handler*/ ctx[6], false, false, false),
    					listen_dev(li1, "click", /*click_handler_1*/ ctx[7], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$k.name,
    		type: "if",
    		source: "(120:2) {#if showProfileMenu}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$v(ctx) {
    	let link;
    	let t0;
    	let nav;
    	let img0;
    	let img0_src_value;
    	let t1;
    	let div;
    	let img1;
    	let img1_src_value;
    	let t2;
    	let mounted;
    	let dispose;
    	let if_block = /*showProfileMenu*/ ctx[0] && create_if_block$k(ctx);

    	const block = {
    		c: function create() {
    			link = element("link");
    			t0 = space();
    			nav = element("nav");
    			img0 = element("img");
    			t1 = space();
    			div = element("div");
    			img1 = element("img");
    			t2 = space();
    			if (if_block) if_block.c();
    			attr_dev(link, "rel", "stylesheet");
    			attr_dev(link, "href", "https://unpkg.com/mono-icons@1.0.5/iconfont/icons.css");
    			add_location(link, file$t, 103, 2, 1670);
    			if (!src_url_equal(img0.src, img0_src_value = "https://i.imgur.com/rHSrbEZ.png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "abook");
    			attr_dev(img0, "class", "logo svelte-16uqtz0");
    			add_location(img0, file$t, 109, 2, 1804);
    			if (!src_url_equal(img1.src, img1_src_value = /*user*/ ctx[1].photo)) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "user avatar");
    			add_location(img1, file$t, 116, 4, 1972);
    			attr_dev(div, "class", "avatar-circle svelte-16uqtz0");
    			add_location(div, file$t, 115, 2, 1916);
    			attr_dev(nav, "class", "navbar svelte-16uqtz0");
    			add_location(nav, file$t, 108, 0, 1781);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, link);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, nav, anchor);
    			append_dev(nav, img0);
    			append_dev(nav, t1);
    			append_dev(nav, div);
    			append_dev(div, img1);
    			append_dev(nav, t2);
    			if (if_block) if_block.m(nav, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(img0, "click", /*goToHome*/ ctx[2], false, false, false),
    					listen_dev(div, "click", /*toggleMenu*/ ctx[3], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*user*/ 2 && !src_url_equal(img1.src, img1_src_value = /*user*/ ctx[1].photo)) {
    				attr_dev(img1, "src", img1_src_value);
    			}

    			if (/*showProfileMenu*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$k(ctx);
    					if_block.c();
    					if_block.m(nav, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			detach_dev(link);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(nav);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$v.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$v($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Navbar', slots, []);
    	let { logoPath } = $$props;
    	let showProfileMenu = false;
    	let user;

    	currentUser.subscribe(_currentUser => {
    		$$invalidate(1, user = _currentUser);
    	});

    	const goToHome = () => {
    		navigate("/home");
    	};

    	const toggleMenu = event => {
    		$$invalidate(0, showProfileMenu = !showProfileMenu);
    	};

    	const handleSelectOption = option => {
    		if (option === "profile") {
    			navigate("/my-profile");
    		}

    		if (option === "close-session") {
    			logoutUser();
    			navigate("/");
    		}
    	};

    	const writable_props = ['logoPath'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Navbar> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => handleSelectOption('profile');
    	const click_handler_1 = () => handleSelectOption('close-session');

    	$$self.$$set = $$props => {
    		if ('logoPath' in $$props) $$invalidate(5, logoPath = $$props.logoPath);
    	};

    	$$self.$capture_state = () => ({
    		navigate,
    		logoutUser,
    		currentUser,
    		logoPath,
    		showProfileMenu,
    		user,
    		goToHome,
    		toggleMenu,
    		handleSelectOption
    	});

    	$$self.$inject_state = $$props => {
    		if ('logoPath' in $$props) $$invalidate(5, logoPath = $$props.logoPath);
    		if ('showProfileMenu' in $$props) $$invalidate(0, showProfileMenu = $$props.showProfileMenu);
    		if ('user' in $$props) $$invalidate(1, user = $$props.user);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		showProfileMenu,
    		user,
    		goToHome,
    		toggleMenu,
    		handleSelectOption,
    		logoPath,
    		click_handler,
    		click_handler_1
    	];
    }

    class Navbar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$v, create_fragment$v, safe_not_equal, { logoPath: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Navbar",
    			options,
    			id: create_fragment$v.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*logoPath*/ ctx[5] === undefined && !('logoPath' in props)) {
    			console.warn("<Navbar> was created without expected prop 'logoPath'");
    		}
    	}

    	get logoPath() {
    		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set logoPath(value) {
    		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/layouts/Main.svelte generated by Svelte v3.44.1 */
    const file$s = "src/layouts/Main.svelte";

    function create_fragment$u(ctx) {
    	let main;
    	let navbar;
    	let t;
    	let current;

    	navbar = new Navbar({
    			props: { logoPath: /*logoPath*/ ctx[0] },
    			$$inline: true
    		});

    	const default_slot_template = /*#slots*/ ctx[2].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

    	const block = {
    		c: function create() {
    			main = element("main");
    			create_component(navbar.$$.fragment);
    			t = space();
    			if (default_slot) default_slot.c();
    			attr_dev(main, "class", "svelte-86pmu6");
    			add_location(main, file$s, 14, 0, 279);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			mount_component(navbar, main, null);
    			append_dev(main, t);

    			if (default_slot) {
    				default_slot.m(main, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const navbar_changes = {};
    			if (dirty & /*logoPath*/ 1) navbar_changes.logoPath = /*logoPath*/ ctx[0];
    			navbar.$set(navbar_changes);

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[1],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbar.$$.fragment, local);
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbar.$$.fragment, local);
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(navbar);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$u($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, ['default']);
    	let { logoPath = "assets/img/dbook-logo.svg" } = $$props;
    	const writable_props = ['logoPath'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('logoPath' in $$props) $$invalidate(0, logoPath = $$props.logoPath);
    		if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ Navbar, logoPath });

    	$$self.$inject_state = $$props => {
    		if ('logoPath' in $$props) $$invalidate(0, logoPath = $$props.logoPath);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [logoPath, $$scope, slots];
    }

    class Main extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$u, create_fragment$u, safe_not_equal, { logoPath: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$u.name
    		});
    	}

    	get logoPath() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set logoPath(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function toInteger(dirtyNumber) {
      if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
        return NaN;
      }

      var number = Number(dirtyNumber);

      if (isNaN(number)) {
        return number;
      }

      return number < 0 ? Math.ceil(number) : Math.floor(number);
    }

    function requiredArgs(required, args) {
      if (args.length < required) {
        throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
      }
    }

    /**
     * @name toDate
     * @category Common Helpers
     * @summary Convert the given argument to an instance of Date.
     *
     * @description
     * Convert the given argument to an instance of Date.
     *
     * If the argument is an instance of Date, the function returns its clone.
     *
     * If the argument is a number, it is treated as a timestamp.
     *
     * If the argument is none of the above, the function returns Invalid Date.
     *
     * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
     *
     * @param {Date|Number} argument - the value to convert
     * @returns {Date} the parsed date in the local time zone
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Clone the date:
     * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
     * //=> Tue Feb 11 2014 11:30:30
     *
     * @example
     * // Convert the timestamp to date:
     * const result = toDate(1392098430000)
     * //=> Tue Feb 11 2014 11:30:30
     */

    function toDate(argument) {
      requiredArgs(1, arguments);
      var argStr = Object.prototype.toString.call(argument); // Clone the date

      if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {
        // Prevent the date to lose the milliseconds when passed to new Date() in IE10
        return new Date(argument.getTime());
      } else if (typeof argument === 'number' || argStr === '[object Number]') {
        return new Date(argument);
      } else {
        if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
          // eslint-disable-next-line no-console
          console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console

          console.warn(new Error().stack);
        }

        return new Date(NaN);
      }
    }

    /**
     * @name addDays
     * @category Day Helpers
     * @summary Add the specified number of days to the given date.
     *
     * @description
     * Add the specified number of days to the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} - the new date with the days added
     * @throws {TypeError} - 2 arguments required
     *
     * @example
     * // Add 10 days to 1 September 2014:
     * const result = addDays(new Date(2014, 8, 1), 10)
     * //=> Thu Sep 11 2014 00:00:00
     */

    function addDays(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var date = toDate(dirtyDate);
      var amount = toInteger(dirtyAmount);

      if (isNaN(amount)) {
        return new Date(NaN);
      }

      if (!amount) {
        // If 0 days, no-op to avoid changing times in the hour before end of DST
        return date;
      }

      date.setDate(date.getDate() + amount);
      return date;
    }

    /**
     * @name addMilliseconds
     * @category Millisecond Helpers
     * @summary Add the specified number of milliseconds to the given date.
     *
     * @description
     * Add the specified number of milliseconds to the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the milliseconds added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
     * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
     * //=> Thu Jul 10 2014 12:45:30.750
     */

    function addMilliseconds(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var timestamp = toDate(dirtyDate).getTime();
      var amount = toInteger(dirtyAmount);
      return new Date(timestamp + amount);
    }

    /**
     * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
     * They usually appear for dates that denote time before the timezones were introduced
     * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
     * and GMT+01:00:00 after that date)
     *
     * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
     * which would lead to incorrect calculations.
     *
     * This function returns the timezone offset in milliseconds that takes seconds in account.
     */
    function getTimezoneOffsetInMilliseconds(date) {
      var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
      utcDate.setUTCFullYear(date.getFullYear());
      return date.getTime() - utcDate.getTime();
    }

    /**
     * @name isDate
     * @category Common Helpers
     * @summary Is the given value a date?
     *
     * @description
     * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {*} value - the value to check
     * @returns {boolean} true if the given value is a date
     * @throws {TypeError} 1 arguments required
     *
     * @example
     * // For a valid date:
     * const result = isDate(new Date())
     * //=> true
     *
     * @example
     * // For an invalid date:
     * const result = isDate(new Date(NaN))
     * //=> true
     *
     * @example
     * // For some value:
     * const result = isDate('2014-02-31')
     * //=> false
     *
     * @example
     * // For an object:
     * const result = isDate({})
     * //=> false
     */

    function isDate(value) {
      requiredArgs(1, arguments);
      return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';
    }

    /**
     * @name isValid
     * @category Common Helpers
     * @summary Is the given date valid?
     *
     * @description
     * Returns false if argument is Invalid Date and true otherwise.
     * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
     * Invalid Date is a Date, whose time value is NaN.
     *
     * Time value of Date: http://es5.github.io/#x15.9.1.1
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * - Now `isValid` doesn't throw an exception
     *   if the first argument is not an instance of Date.
     *   Instead, argument is converted beforehand using `toDate`.
     *
     *   Examples:
     *
     *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |
     *   |---------------------------|---------------|---------------|
     *   | `new Date()`              | `true`        | `true`        |
     *   | `new Date('2016-01-01')`  | `true`        | `true`        |
     *   | `new Date('')`            | `false`       | `false`       |
     *   | `new Date(1488370835081)` | `true`        | `true`        |
     *   | `new Date(NaN)`           | `false`       | `false`       |
     *   | `'2016-01-01'`            | `TypeError`   | `false`       |
     *   | `''`                      | `TypeError`   | `false`       |
     *   | `1488370835081`           | `TypeError`   | `true`        |
     *   | `NaN`                     | `TypeError`   | `false`       |
     *
     *   We introduce this change to make *date-fns* consistent with ECMAScript behavior
     *   that try to coerce arguments to the expected type
     *   (which is also the case with other *date-fns* functions).
     *
     * @param {*} date - the date to check
     * @returns {Boolean} the date is valid
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // For the valid date:
     * const result = isValid(new Date(2014, 1, 31))
     * //=> true
     *
     * @example
     * // For the value, convertable into a date:
     * const result = isValid(1393804800000)
     * //=> true
     *
     * @example
     * // For the invalid date:
     * const result = isValid(new Date(''))
     * //=> false
     */

    function isValid(dirtyDate) {
      requiredArgs(1, arguments);

      if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
        return false;
      }

      var date = toDate(dirtyDate);
      return !isNaN(Number(date));
    }

    var formatDistanceLocale$1 = {
      lessThanXSeconds: {
        one: 'less than a second',
        other: 'less than {{count}} seconds'
      },
      xSeconds: {
        one: '1 second',
        other: '{{count}} seconds'
      },
      halfAMinute: 'half a minute',
      lessThanXMinutes: {
        one: 'less than a minute',
        other: 'less than {{count}} minutes'
      },
      xMinutes: {
        one: '1 minute',
        other: '{{count}} minutes'
      },
      aboutXHours: {
        one: 'about 1 hour',
        other: 'about {{count}} hours'
      },
      xHours: {
        one: '1 hour',
        other: '{{count}} hours'
      },
      xDays: {
        one: '1 day',
        other: '{{count}} days'
      },
      aboutXWeeks: {
        one: 'about 1 week',
        other: 'about {{count}} weeks'
      },
      xWeeks: {
        one: '1 week',
        other: '{{count}} weeks'
      },
      aboutXMonths: {
        one: 'about 1 month',
        other: 'about {{count}} months'
      },
      xMonths: {
        one: '1 month',
        other: '{{count}} months'
      },
      aboutXYears: {
        one: 'about 1 year',
        other: 'about {{count}} years'
      },
      xYears: {
        one: '1 year',
        other: '{{count}} years'
      },
      overXYears: {
        one: 'over 1 year',
        other: 'over {{count}} years'
      },
      almostXYears: {
        one: 'almost 1 year',
        other: 'almost {{count}} years'
      }
    };

    var formatDistance$1 = function (token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale$1[token];

      if (typeof tokenValue === 'string') {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace('{{count}}', count.toString());
      }

      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return 'in ' + result;
        } else {
          return result + ' ago';
        }
      }

      return result;
    };

    var formatDistance$2 = formatDistance$1;

    function buildFormatLongFn(args) {
      return function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        // TODO: Remove String()
        var width = options.width ? String(options.width) : args.defaultWidth;
        var format = args.formats[width] || args.formats[args.defaultWidth];
        return format;
      };
    }

    var dateFormats$1 = {
      full: 'EEEE, MMMM do, y',
      long: 'MMMM do, y',
      medium: 'MMM d, y',
      short: 'MM/dd/yyyy'
    };
    var timeFormats$1 = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats$1 = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong$2 = {
      date: buildFormatLongFn({
        formats: dateFormats$1,
        defaultWidth: 'full'
      }),
      time: buildFormatLongFn({
        formats: timeFormats$1,
        defaultWidth: 'full'
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats$1,
        defaultWidth: 'full'
      })
    };
    var formatLong$3 = formatLong$2;

    var formatRelativeLocale$1 = {
      lastWeek: "'last' eeee 'at' p",
      yesterday: "'yesterday at' p",
      today: "'today at' p",
      tomorrow: "'tomorrow at' p",
      nextWeek: "eeee 'at' p",
      other: 'P'
    };

    var formatRelative$1 = function (token, _date, _baseDate, _options) {
      return formatRelativeLocale$1[token];
    };

    var formatRelative$2 = formatRelative$1;

    function buildLocalizeFn(args) {
      return function (dirtyIndex, dirtyOptions) {
        var options = dirtyOptions || {};
        var context = options.context ? String(options.context) : 'standalone';
        var valuesArray;

        if (context === 'formatting' && args.formattingValues) {
          var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
          var width = options.width ? String(options.width) : defaultWidth;
          valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
        } else {
          var _defaultWidth = args.defaultWidth;

          var _width = options.width ? String(options.width) : args.defaultWidth;

          valuesArray = args.values[_width] || args.values[_defaultWidth];
        }

        var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challange you to try to remove it!

        return valuesArray[index];
      };
    }

    var eraValues$1 = {
      narrow: ['B', 'A'],
      abbreviated: ['BC', 'AD'],
      wide: ['Before Christ', 'Anno Domini']
    };
    var quarterValues$1 = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
    }; // Note: in English, the names of days of the week and months are capitalized.
    // If you are making a new locale based on this one, check if the same is true for the language you're working on.
    // Generally, formatted dates should look like they are in the middle of a sentence,
    // e.g. in Spanish language the weekdays and months should be in the lowercase.

    var monthValues$1 = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
      wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    };
    var dayValues$1 = {
      narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
      short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
      abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
      wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    };
    var dayPeriodValues$1 = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      }
    };
    var formattingDayPeriodValues$1 = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      }
    };

    var ordinalNumber$1 = function (dirtyNumber, _options) {
      var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
      // if they are different for different grammatical genders,
      // use `options.unit`.
      //
      // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
      // 'day', 'hour', 'minute', 'second'.

      var rem100 = number % 100;

      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return number + 'st';

          case 2:
            return number + 'nd';

          case 3:
            return number + 'rd';
        }
      }

      return number + 'th';
    };

    var localize$2 = {
      ordinalNumber: ordinalNumber$1,
      era: buildLocalizeFn({
        values: eraValues$1,
        defaultWidth: 'wide'
      }),
      quarter: buildLocalizeFn({
        values: quarterValues$1,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues$1,
        defaultWidth: 'wide'
      }),
      day: buildLocalizeFn({
        values: dayValues$1,
        defaultWidth: 'wide'
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues$1,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues$1,
        defaultFormattingWidth: 'wide'
      })
    };
    var localize$3 = localize$2;

    function buildMatchFn(args) {
      return function (string) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var width = options.width;
        var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
        var matchResult = string.match(matchPattern);

        if (!matchResult) {
          return null;
        }

        var matchedString = matchResult[0];
        var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
        var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
          return pattern.test(matchedString);
        }) : findKey(parsePatterns, function (pattern) {
          return pattern.test(matchedString);
        });
        var value;
        value = args.valueCallback ? args.valueCallback(key) : key;
        value = options.valueCallback ? options.valueCallback(value) : value;
        var rest = string.slice(matchedString.length);
        return {
          value: value,
          rest: rest
        };
      };
    }

    function findKey(object, predicate) {
      for (var key in object) {
        if (object.hasOwnProperty(key) && predicate(object[key])) {
          return key;
        }
      }

      return undefined;
    }

    function findIndex(array, predicate) {
      for (var key = 0; key < array.length; key++) {
        if (predicate(array[key])) {
          return key;
        }
      }

      return undefined;
    }

    function buildMatchPatternFn(args) {
      return function (string) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var matchResult = string.match(args.matchPattern);
        if (!matchResult) return null;
        var matchedString = matchResult[0];
        var parseResult = string.match(args.parsePattern);
        if (!parseResult) return null;
        var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
        value = options.valueCallback ? options.valueCallback(value) : value;
        var rest = string.slice(matchedString.length);
        return {
          value: value,
          rest: rest
        };
      };
    }

    var matchOrdinalNumberPattern$1 = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern$1 = /\d+/i;
    var matchEraPatterns$1 = {
      narrow: /^(b|a)/i,
      abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      wide: /^(before christ|before common era|anno domini|common era)/i
    };
    var parseEraPatterns$1 = {
      any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns$1 = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](th|st|nd|rd)? quarter/i
    };
    var parseQuarterPatterns$1 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns$1 = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
      wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
    };
    var parseMonthPatterns$1 = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns$1 = {
      narrow: /^[smtwf]/i,
      short: /^(su|mo|tu|we|th|fr|sa)/i,
      abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
      wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
    };
    var parseDayPatterns$1 = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns$1 = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns$1 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    var match$2 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern$1,
        parsePattern: parseOrdinalNumberPattern$1,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns$1,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns$1,
        defaultParseWidth: 'any'
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns$1,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns$1,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns$1,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns$1,
        defaultParseWidth: 'any'
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns$1,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns$1,
        defaultParseWidth: 'any'
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns$1,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns$1,
        defaultParseWidth: 'any'
      })
    };
    var match$3 = match$2;

    /**
     * @type {Locale}
     * @category Locales
     * @summary English locale (United States).
     * @language English
     * @iso-639-2 eng
     * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
     * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
     */
    var locale$1 = {
      code: 'en-US',
      formatDistance: formatDistance$2,
      formatLong: formatLong$3,
      formatRelative: formatRelative$2,
      localize: localize$3,
      match: match$3,
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var defaultLocale = locale$1;

    /**
     * @name subMilliseconds
     * @category Millisecond Helpers
     * @summary Subtract the specified number of milliseconds from the given date.
     *
     * @description
     * Subtract the specified number of milliseconds from the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the milliseconds subtracted
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
     * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
     * //=> Thu Jul 10 2014 12:45:29.250
     */

    function subMilliseconds(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      return addMilliseconds(dirtyDate, -amount);
    }

    function addLeadingZeros(number, targetLength) {
      var sign = number < 0 ? '-' : '';
      var output = Math.abs(number).toString();

      while (output.length < targetLength) {
        output = '0' + output;
      }

      return sign + output;
    }

    /*
     * |     | Unit                           |     | Unit                           |
     * |-----|--------------------------------|-----|--------------------------------|
     * |  a  | AM, PM                         |  A* |                                |
     * |  d  | Day of month                   |  D  |                                |
     * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
     * |  m  | Minute                         |  M  | Month                          |
     * |  s  | Second                         |  S  | Fraction of second             |
     * |  y  | Year (abs)                     |  Y  |                                |
     *
     * Letters marked by * are not implemented but reserved by Unicode standard.
     */

    var formatters$2 = {
      // Year
      y: function (date, token) {
        // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
        // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
        // |----------|-------|----|-------|-------|-------|
        // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
        // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
        // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
        // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
        // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
        var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

        var year = signedYear > 0 ? signedYear : 1 - signedYear;
        return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
      },
      // Month
      M: function (date, token) {
        var month = date.getUTCMonth();
        return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
      },
      // Day of the month
      d: function (date, token) {
        return addLeadingZeros(date.getUTCDate(), token.length);
      },
      // AM or PM
      a: function (date, token) {
        var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';

        switch (token) {
          case 'a':
          case 'aa':
            return dayPeriodEnumValue.toUpperCase();

          case 'aaa':
            return dayPeriodEnumValue;

          case 'aaaaa':
            return dayPeriodEnumValue[0];

          case 'aaaa':
          default:
            return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
        }
      },
      // Hour [1-12]
      h: function (date, token) {
        return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
      },
      // Hour [0-23]
      H: function (date, token) {
        return addLeadingZeros(date.getUTCHours(), token.length);
      },
      // Minute
      m: function (date, token) {
        return addLeadingZeros(date.getUTCMinutes(), token.length);
      },
      // Second
      s: function (date, token) {
        return addLeadingZeros(date.getUTCSeconds(), token.length);
      },
      // Fraction of second
      S: function (date, token) {
        var numberOfDigits = token.length;
        var milliseconds = date.getUTCMilliseconds();
        var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
        return addLeadingZeros(fractionalSeconds, token.length);
      }
    };
    var formatters$3 = formatters$2;

    var MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.
    // See issue: https://github.com/date-fns/date-fns/issues/376

    function getUTCDayOfYear(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var timestamp = date.getTime();
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
      var startOfYearTimestamp = date.getTime();
      var difference = timestamp - startOfYearTimestamp;
      return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function startOfUTCISOWeek(dirtyDate) {
      requiredArgs(1, arguments);
      var weekStartsOn = 1;
      var date = toDate(dirtyDate);
      var day = date.getUTCDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setUTCDate(date.getUTCDate() - diff);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function getUTCISOWeekYear(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var year = date.getUTCFullYear();
      var fourthOfJanuaryOfNextYear = new Date(0);
      fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
      fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
      var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
      var fourthOfJanuaryOfThisYear = new Date(0);
      fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
      fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
      var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);

      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function startOfUTCISOWeekYear(dirtyDate) {
      requiredArgs(1, arguments);
      var year = getUTCISOWeekYear(dirtyDate);
      var fourthOfJanuary = new Date(0);
      fourthOfJanuary.setUTCFullYear(year, 0, 4);
      fourthOfJanuary.setUTCHours(0, 0, 0, 0);
      var date = startOfUTCISOWeek(fourthOfJanuary);
      return date;
    }

    var MILLISECONDS_IN_WEEK$1 = 604800000; // This function will be a part of public API when UTC function will be implemented.
    // See issue: https://github.com/date-fns/date-fns/issues/376

    function getUTCISOWeek(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer
      // because the number of milliseconds in a week is not constant
      // (e.g. it's different in the week of the daylight saving time clock shift)

      return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function startOfUTCWeek(dirtyDate, dirtyOptions) {
      requiredArgs(1, arguments);
      var options = dirtyOptions || {};
      var locale = options.locale;
      var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
      var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
      var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
      }

      var date = toDate(dirtyDate);
      var day = date.getUTCDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setUTCDate(date.getUTCDate() - diff);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function getUTCWeekYear(dirtyDate, dirtyOptions) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate, dirtyOptions);
      var year = date.getUTCFullYear();
      var options = dirtyOptions || {};
      var locale = options.locale;
      var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
      var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
      var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
      }

      var firstWeekOfNextYear = new Date(0);
      firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
      firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
      var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
      var firstWeekOfThisYear = new Date(0);
      firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
      firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
      var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);

      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
      requiredArgs(1, arguments);
      var options = dirtyOptions || {};
      var locale = options.locale;
      var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
      var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
      var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
      var year = getUTCWeekYear(dirtyDate, dirtyOptions);
      var firstWeek = new Date(0);
      firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
      firstWeek.setUTCHours(0, 0, 0, 0);
      var date = startOfUTCWeek(firstWeek, dirtyOptions);
      return date;
    }

    var MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.
    // See issue: https://github.com/date-fns/date-fns/issues/376

    function getUTCWeek(dirtyDate, options) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer
      // because the number of milliseconds in a week is not constant
      // (e.g. it's different in the week of the daylight saving time clock shift)

      return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
    }

    var dayPeriodEnum = {
      am: 'am',
      pm: 'pm',
      midnight: 'midnight',
      noon: 'noon',
      morning: 'morning',
      afternoon: 'afternoon',
      evening: 'evening',
      night: 'night'
    };
    /*
     * |     | Unit                           |     | Unit                           |
     * |-----|--------------------------------|-----|--------------------------------|
     * |  a  | AM, PM                         |  A* | Milliseconds in day            |
     * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
     * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
     * |  d  | Day of month                   |  D  | Day of year                    |
     * |  e  | Local day of week              |  E  | Day of week                    |
     * |  f  |                                |  F* | Day of week in month           |
     * |  g* | Modified Julian day            |  G  | Era                            |
     * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
     * |  i! | ISO day of week                |  I! | ISO week of year               |
     * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
     * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
     * |  l* | (deprecated)                   |  L  | Stand-alone month              |
     * |  m  | Minute                         |  M  | Month                          |
     * |  n  |                                |  N  |                                |
     * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
     * |  p! | Long localized time            |  P! | Long localized date            |
     * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
     * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
     * |  s  | Second                         |  S  | Fraction of second             |
     * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
     * |  u  | Extended year                  |  U* | Cyclic year                    |
     * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
     * |  w  | Local week of year             |  W* | Week of month                  |
     * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
     * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
     * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
     *
     * Letters marked by * are not implemented but reserved by Unicode standard.
     *
     * Letters marked by ! are non-standard, but implemented by date-fns:
     * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
     * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
     *   i.e. 7 for Sunday, 1 for Monday, etc.
     * - `I` is ISO week of year, as opposed to `w` which is local week of year.
     * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
     *   `R` is supposed to be used in conjunction with `I` and `i`
     *   for universal ISO week-numbering date, whereas
     *   `Y` is supposed to be used in conjunction with `w` and `e`
     *   for week-numbering date specific to the locale.
     * - `P` is long localized date format
     * - `p` is long localized time format
     */

    var formatters = {
      // Era
      G: function (date, token, localize) {
        var era = date.getUTCFullYear() > 0 ? 1 : 0;

        switch (token) {
          // AD, BC
          case 'G':
          case 'GG':
          case 'GGG':
            return localize.era(era, {
              width: 'abbreviated'
            });
          // A, B

          case 'GGGGG':
            return localize.era(era, {
              width: 'narrow'
            });
          // Anno Domini, Before Christ

          case 'GGGG':
          default:
            return localize.era(era, {
              width: 'wide'
            });
        }
      },
      // Year
      y: function (date, token, localize) {
        // Ordinal number
        if (token === 'yo') {
          var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

          var year = signedYear > 0 ? signedYear : 1 - signedYear;
          return localize.ordinalNumber(year, {
            unit: 'year'
          });
        }

        return formatters$3.y(date, token);
      },
      // Local week-numbering year
      Y: function (date, token, localize, options) {
        var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)

        var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year

        if (token === 'YY') {
          var twoDigitYear = weekYear % 100;
          return addLeadingZeros(twoDigitYear, 2);
        } // Ordinal number


        if (token === 'Yo') {
          return localize.ordinalNumber(weekYear, {
            unit: 'year'
          });
        } // Padding


        return addLeadingZeros(weekYear, token.length);
      },
      // ISO week-numbering year
      R: function (date, token) {
        var isoWeekYear = getUTCISOWeekYear(date); // Padding

        return addLeadingZeros(isoWeekYear, token.length);
      },
      // Extended year. This is a single number designating the year of this calendar system.
      // The main difference between `y` and `u` localizers are B.C. years:
      // | Year | `y` | `u` |
      // |------|-----|-----|
      // | AC 1 |   1 |   1 |
      // | BC 1 |   1 |   0 |
      // | BC 2 |   2 |  -1 |
      // Also `yy` always returns the last two digits of a year,
      // while `uu` pads single digit years to 2 characters and returns other years unchanged.
      u: function (date, token) {
        var year = date.getUTCFullYear();
        return addLeadingZeros(year, token.length);
      },
      // Quarter
      Q: function (date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

        switch (token) {
          // 1, 2, 3, 4
          case 'Q':
            return String(quarter);
          // 01, 02, 03, 04

          case 'QQ':
            return addLeadingZeros(quarter, 2);
          // 1st, 2nd, 3rd, 4th

          case 'Qo':
            return localize.ordinalNumber(quarter, {
              unit: 'quarter'
            });
          // Q1, Q2, Q3, Q4

          case 'QQQ':
            return localize.quarter(quarter, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // 1, 2, 3, 4 (narrow quarter; could be not numerical)

          case 'QQQQQ':
            return localize.quarter(quarter, {
              width: 'narrow',
              context: 'formatting'
            });
          // 1st quarter, 2nd quarter, ...

          case 'QQQQ':
          default:
            return localize.quarter(quarter, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone quarter
      q: function (date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

        switch (token) {
          // 1, 2, 3, 4
          case 'q':
            return String(quarter);
          // 01, 02, 03, 04

          case 'qq':
            return addLeadingZeros(quarter, 2);
          // 1st, 2nd, 3rd, 4th

          case 'qo':
            return localize.ordinalNumber(quarter, {
              unit: 'quarter'
            });
          // Q1, Q2, Q3, Q4

          case 'qqq':
            return localize.quarter(quarter, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // 1, 2, 3, 4 (narrow quarter; could be not numerical)

          case 'qqqqq':
            return localize.quarter(quarter, {
              width: 'narrow',
              context: 'standalone'
            });
          // 1st quarter, 2nd quarter, ...

          case 'qqqq':
          default:
            return localize.quarter(quarter, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // Month
      M: function (date, token, localize) {
        var month = date.getUTCMonth();

        switch (token) {
          case 'M':
          case 'MM':
            return formatters$3.M(date, token);
          // 1st, 2nd, ..., 12th

          case 'Mo':
            return localize.ordinalNumber(month + 1, {
              unit: 'month'
            });
          // Jan, Feb, ..., Dec

          case 'MMM':
            return localize.month(month, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // J, F, ..., D

          case 'MMMMM':
            return localize.month(month, {
              width: 'narrow',
              context: 'formatting'
            });
          // January, February, ..., December

          case 'MMMM':
          default:
            return localize.month(month, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone month
      L: function (date, token, localize) {
        var month = date.getUTCMonth();

        switch (token) {
          // 1, 2, ..., 12
          case 'L':
            return String(month + 1);
          // 01, 02, ..., 12

          case 'LL':
            return addLeadingZeros(month + 1, 2);
          // 1st, 2nd, ..., 12th

          case 'Lo':
            return localize.ordinalNumber(month + 1, {
              unit: 'month'
            });
          // Jan, Feb, ..., Dec

          case 'LLL':
            return localize.month(month, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // J, F, ..., D

          case 'LLLLL':
            return localize.month(month, {
              width: 'narrow',
              context: 'standalone'
            });
          // January, February, ..., December

          case 'LLLL':
          default:
            return localize.month(month, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // Local week of year
      w: function (date, token, localize, options) {
        var week = getUTCWeek(date, options);

        if (token === 'wo') {
          return localize.ordinalNumber(week, {
            unit: 'week'
          });
        }

        return addLeadingZeros(week, token.length);
      },
      // ISO week of year
      I: function (date, token, localize) {
        var isoWeek = getUTCISOWeek(date);

        if (token === 'Io') {
          return localize.ordinalNumber(isoWeek, {
            unit: 'week'
          });
        }

        return addLeadingZeros(isoWeek, token.length);
      },
      // Day of the month
      d: function (date, token, localize) {
        if (token === 'do') {
          return localize.ordinalNumber(date.getUTCDate(), {
            unit: 'date'
          });
        }

        return formatters$3.d(date, token);
      },
      // Day of year
      D: function (date, token, localize) {
        var dayOfYear = getUTCDayOfYear(date);

        if (token === 'Do') {
          return localize.ordinalNumber(dayOfYear, {
            unit: 'dayOfYear'
          });
        }

        return addLeadingZeros(dayOfYear, token.length);
      },
      // Day of week
      E: function (date, token, localize) {
        var dayOfWeek = date.getUTCDay();

        switch (token) {
          // Tue
          case 'E':
          case 'EE':
          case 'EEE':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T

          case 'EEEEE':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu

          case 'EEEEEE':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday

          case 'EEEE':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Local day of week
      e: function (date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

        switch (token) {
          // Numerical value (Nth day of week with current locale or weekStartsOn)
          case 'e':
            return String(localDayOfWeek);
          // Padded numerical value

          case 'ee':
            return addLeadingZeros(localDayOfWeek, 2);
          // 1st, 2nd, ..., 7th

          case 'eo':
            return localize.ordinalNumber(localDayOfWeek, {
              unit: 'day'
            });

          case 'eee':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T

          case 'eeeee':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu

          case 'eeeeee':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday

          case 'eeee':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone local day of week
      c: function (date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

        switch (token) {
          // Numerical value (same as in `e`)
          case 'c':
            return String(localDayOfWeek);
          // Padded numerical value

          case 'cc':
            return addLeadingZeros(localDayOfWeek, token.length);
          // 1st, 2nd, ..., 7th

          case 'co':
            return localize.ordinalNumber(localDayOfWeek, {
              unit: 'day'
            });

          case 'ccc':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // T

          case 'ccccc':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'standalone'
            });
          // Tu

          case 'cccccc':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'standalone'
            });
          // Tuesday

          case 'cccc':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // ISO day of week
      i: function (date, token, localize) {
        var dayOfWeek = date.getUTCDay();
        var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;

        switch (token) {
          // 2
          case 'i':
            return String(isoDayOfWeek);
          // 02

          case 'ii':
            return addLeadingZeros(isoDayOfWeek, token.length);
          // 2nd

          case 'io':
            return localize.ordinalNumber(isoDayOfWeek, {
              unit: 'day'
            });
          // Tue

          case 'iii':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T

          case 'iiiii':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu

          case 'iiiiii':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday

          case 'iiii':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // AM or PM
      a: function (date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';

        switch (token) {
          case 'a':
          case 'aa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });

          case 'aaa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            }).toLowerCase();

          case 'aaaaa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });

          case 'aaaa':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // AM, PM, midnight, noon
      b: function (date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;

        if (hours === 12) {
          dayPeriodEnumValue = dayPeriodEnum.noon;
        } else if (hours === 0) {
          dayPeriodEnumValue = dayPeriodEnum.midnight;
        } else {
          dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
        }

        switch (token) {
          case 'b':
          case 'bb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });

          case 'bbb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            }).toLowerCase();

          case 'bbbbb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });

          case 'bbbb':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // in the morning, in the afternoon, in the evening, at night
      B: function (date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;

        if (hours >= 17) {
          dayPeriodEnumValue = dayPeriodEnum.evening;
        } else if (hours >= 12) {
          dayPeriodEnumValue = dayPeriodEnum.afternoon;
        } else if (hours >= 4) {
          dayPeriodEnumValue = dayPeriodEnum.morning;
        } else {
          dayPeriodEnumValue = dayPeriodEnum.night;
        }

        switch (token) {
          case 'B':
          case 'BB':
          case 'BBB':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });

          case 'BBBBB':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });

          case 'BBBB':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Hour [1-12]
      h: function (date, token, localize) {
        if (token === 'ho') {
          var hours = date.getUTCHours() % 12;
          if (hours === 0) hours = 12;
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }

        return formatters$3.h(date, token);
      },
      // Hour [0-23]
      H: function (date, token, localize) {
        if (token === 'Ho') {
          return localize.ordinalNumber(date.getUTCHours(), {
            unit: 'hour'
          });
        }

        return formatters$3.H(date, token);
      },
      // Hour [0-11]
      K: function (date, token, localize) {
        var hours = date.getUTCHours() % 12;

        if (token === 'Ko') {
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }

        return addLeadingZeros(hours, token.length);
      },
      // Hour [1-24]
      k: function (date, token, localize) {
        var hours = date.getUTCHours();
        if (hours === 0) hours = 24;

        if (token === 'ko') {
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }

        return addLeadingZeros(hours, token.length);
      },
      // Minute
      m: function (date, token, localize) {
        if (token === 'mo') {
          return localize.ordinalNumber(date.getUTCMinutes(), {
            unit: 'minute'
          });
        }

        return formatters$3.m(date, token);
      },
      // Second
      s: function (date, token, localize) {
        if (token === 'so') {
          return localize.ordinalNumber(date.getUTCSeconds(), {
            unit: 'second'
          });
        }

        return formatters$3.s(date, token);
      },
      // Fraction of second
      S: function (date, token) {
        return formatters$3.S(date, token);
      },
      // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
      X: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();

        if (timezoneOffset === 0) {
          return 'Z';
        }

        switch (token) {
          // Hours and optional minutes
          case 'X':
            return formatTimezoneWithOptionalMinutes(timezoneOffset);
          // Hours, minutes and optional seconds without `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `XX`

          case 'XXXX':
          case 'XX':
            // Hours and minutes without `:` delimiter
            return formatTimezone(timezoneOffset);
          // Hours, minutes and optional seconds with `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `XXX`

          case 'XXXXX':
          case 'XXX': // Hours and minutes with `:` delimiter

          default:
            return formatTimezone(timezoneOffset, ':');
        }
      },
      // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
      x: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();

        switch (token) {
          // Hours and optional minutes
          case 'x':
            return formatTimezoneWithOptionalMinutes(timezoneOffset);
          // Hours, minutes and optional seconds without `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `xx`

          case 'xxxx':
          case 'xx':
            // Hours and minutes without `:` delimiter
            return formatTimezone(timezoneOffset);
          // Hours, minutes and optional seconds with `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `xxx`

          case 'xxxxx':
          case 'xxx': // Hours and minutes with `:` delimiter

          default:
            return formatTimezone(timezoneOffset, ':');
        }
      },
      // Timezone (GMT)
      O: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();

        switch (token) {
          // Short
          case 'O':
          case 'OO':
          case 'OOO':
            return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
          // Long

          case 'OOOO':
          default:
            return 'GMT' + formatTimezone(timezoneOffset, ':');
        }
      },
      // Timezone (specific non-location)
      z: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();

        switch (token) {
          // Short
          case 'z':
          case 'zz':
          case 'zzz':
            return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
          // Long

          case 'zzzz':
          default:
            return 'GMT' + formatTimezone(timezoneOffset, ':');
        }
      },
      // Seconds timestamp
      t: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = Math.floor(originalDate.getTime() / 1000);
        return addLeadingZeros(timestamp, token.length);
      },
      // Milliseconds timestamp
      T: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = originalDate.getTime();
        return addLeadingZeros(timestamp, token.length);
      }
    };

    function formatTimezoneShort(offset, dirtyDelimiter) {
      var sign = offset > 0 ? '-' : '+';
      var absOffset = Math.abs(offset);
      var hours = Math.floor(absOffset / 60);
      var minutes = absOffset % 60;

      if (minutes === 0) {
        return sign + String(hours);
      }

      var delimiter = dirtyDelimiter || '';
      return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
    }

    function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
      if (offset % 60 === 0) {
        var sign = offset > 0 ? '-' : '+';
        return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
      }

      return formatTimezone(offset, dirtyDelimiter);
    }

    function formatTimezone(offset, dirtyDelimiter) {
      var delimiter = dirtyDelimiter || '';
      var sign = offset > 0 ? '-' : '+';
      var absOffset = Math.abs(offset);
      var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
      var minutes = addLeadingZeros(absOffset % 60, 2);
      return sign + hours + delimiter + minutes;
    }

    var formatters$1 = formatters;

    function dateLongFormatter(pattern, formatLong) {
      switch (pattern) {
        case 'P':
          return formatLong.date({
            width: 'short'
          });

        case 'PP':
          return formatLong.date({
            width: 'medium'
          });

        case 'PPP':
          return formatLong.date({
            width: 'long'
          });

        case 'PPPP':
        default:
          return formatLong.date({
            width: 'full'
          });
      }
    }

    function timeLongFormatter(pattern, formatLong) {
      switch (pattern) {
        case 'p':
          return formatLong.time({
            width: 'short'
          });

        case 'pp':
          return formatLong.time({
            width: 'medium'
          });

        case 'ppp':
          return formatLong.time({
            width: 'long'
          });

        case 'pppp':
        default:
          return formatLong.time({
            width: 'full'
          });
      }
    }

    function dateTimeLongFormatter(pattern, formatLong) {
      var matchResult = pattern.match(/(P+)(p+)?/);
      var datePattern = matchResult[1];
      var timePattern = matchResult[2];

      if (!timePattern) {
        return dateLongFormatter(pattern, formatLong);
      }

      var dateTimeFormat;

      switch (datePattern) {
        case 'P':
          dateTimeFormat = formatLong.dateTime({
            width: 'short'
          });
          break;

        case 'PP':
          dateTimeFormat = formatLong.dateTime({
            width: 'medium'
          });
          break;

        case 'PPP':
          dateTimeFormat = formatLong.dateTime({
            width: 'long'
          });
          break;

        case 'PPPP':
        default:
          dateTimeFormat = formatLong.dateTime({
            width: 'full'
          });
          break;
      }

      return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
    }

    var longFormatters = {
      p: timeLongFormatter,
      P: dateTimeLongFormatter
    };
    var longFormatters$1 = longFormatters;

    var protectedDayOfYearTokens = ['D', 'DD'];
    var protectedWeekYearTokens = ['YY', 'YYYY'];
    function isProtectedDayOfYearToken(token) {
      return protectedDayOfYearTokens.indexOf(token) !== -1;
    }
    function isProtectedWeekYearToken(token) {
      return protectedWeekYearTokens.indexOf(token) !== -1;
    }
    function throwProtectedError(token, format, input) {
      if (token === 'YYYY') {
        throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
      } else if (token === 'YY') {
        throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
      } else if (token === 'D') {
        throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
      } else if (token === 'DD') {
        throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
      }
    }

    // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
    //   (one of the certain letters followed by `o`)
    // - (\w)\1* matches any sequences of the same letter
    // - '' matches two quote characters in a row
    // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
    //   except a single quote symbol, which ends the sequence.
    //   Two quote characters do not end the sequence.
    //   If there is no matching single quote
    //   then the sequence will continue until the end of the string.
    // - . matches any single character unmatched by previous parts of the RegExps

    var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
    // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`

    var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp = /^'([^]*?)'?$/;
    var doubleQuoteRegExp = /''/g;
    var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
    /**
     * @name format
     * @category Common Helpers
     * @summary Format the date.
     *
     * @description
     * Return the formatted date string in the given format. The result may vary by locale.
     *
     * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
     * > See: https://git.io/fxCyr
     *
     * The characters wrapped between two single quotes characters (') are escaped.
     * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
     * (see the last example)
     *
     * Format of the string is based on Unicode Technical Standard #35:
     * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
     * with a few additions (see note 7 below the table).
     *
     * Accepted patterns:
     * | Unit                            | Pattern | Result examples                   | Notes |
     * |---------------------------------|---------|-----------------------------------|-------|
     * | Era                             | G..GGG  | AD, BC                            |       |
     * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
     * |                                 | GGGGG   | A, B                              |       |
     * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
     * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
     * |                                 | yy      | 44, 01, 00, 17                    | 5     |
     * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
     * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
     * |                                 | yyyyy   | ...                               | 3,5   |
     * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
     * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
     * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
     * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
     * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
     * |                                 | YYYYY   | ...                               | 3,5   |
     * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
     * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
     * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
     * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
     * |                                 | RRRRR   | ...                               | 3,5,7 |
     * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
     * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
     * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
     * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
     * |                                 | uuuuu   | ...                               | 3,5   |
     * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
     * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
     * |                                 | QQ      | 01, 02, 03, 04                    |       |
     * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
     * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
     * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
     * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
     * |                                 | qq      | 01, 02, 03, 04                    |       |
     * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
     * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
     * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
     * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
     * |                                 | MM      | 01, 02, ..., 12                   |       |
     * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
     * |                                 | MMMM    | January, February, ..., December  | 2     |
     * |                                 | MMMMM   | J, F, ..., D                      |       |
     * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
     * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
     * |                                 | LL      | 01, 02, ..., 12                   |       |
     * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
     * |                                 | LLLL    | January, February, ..., December  | 2     |
     * |                                 | LLLLL   | J, F, ..., D                      |       |
     * | Local week of year              | w       | 1, 2, ..., 53                     |       |
     * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
     * |                                 | ww      | 01, 02, ..., 53                   |       |
     * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
     * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
     * |                                 | II      | 01, 02, ..., 53                   | 7     |
     * | Day of month                    | d       | 1, 2, ..., 31                     |       |
     * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
     * |                                 | dd      | 01, 02, ..., 31                   |       |
     * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
     * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
     * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
     * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
     * |                                 | DDDD    | ...                               | 3     |
     * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
     * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
     * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
     * |                                 | ii      | 01, 02, ..., 07                   | 7     |
     * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
     * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
     * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
     * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
     * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
     * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
     * |                                 | ee      | 02, 03, ..., 01                   |       |
     * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
     * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
     * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
     * |                                 | cc      | 02, 03, ..., 01                   |       |
     * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
     * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | AM, PM                          | a..aa   | AM, PM                            |       |
     * |                                 | aaa     | am, pm                            |       |
     * |                                 | aaaa    | a.m., p.m.                        | 2     |
     * |                                 | aaaaa   | a, p                              |       |
     * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
     * |                                 | bbb     | am, pm, noon, midnight            |       |
     * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
     * |                                 | bbbbb   | a, p, n, mi                       |       |
     * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
     * |                                 | BBBB    | at night, in the morning, ...     | 2     |
     * |                                 | BBBBB   | at night, in the morning, ...     |       |
     * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
     * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
     * |                                 | hh      | 01, 02, ..., 11, 12               |       |
     * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
     * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
     * |                                 | HH      | 00, 01, 02, ..., 23               |       |
     * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
     * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
     * |                                 | KK      | 01, 02, ..., 11, 00               |       |
     * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
     * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
     * |                                 | kk      | 24, 01, 02, ..., 23               |       |
     * | Minute                          | m       | 0, 1, ..., 59                     |       |
     * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
     * |                                 | mm      | 00, 01, ..., 59                   |       |
     * | Second                          | s       | 0, 1, ..., 59                     |       |
     * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
     * |                                 | ss      | 00, 01, ..., 59                   |       |
     * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
     * |                                 | SS      | 00, 01, ..., 99                   |       |
     * |                                 | SSS     | 000, 001, ..., 999                |       |
     * |                                 | SSSS    | ...                               | 3     |
     * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
     * |                                 | XX      | -0800, +0530, Z                   |       |
     * |                                 | XXX     | -08:00, +05:30, Z                 |       |
     * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
     * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
     * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
     * |                                 | xx      | -0800, +0530, +0000               |       |
     * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
     * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
     * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
     * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
     * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
     * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
     * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
     * | Seconds timestamp               | t       | 512969520                         | 7     |
     * |                                 | tt      | ...                               | 3,7   |
     * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
     * |                                 | TT      | ...                               | 3,7   |
     * | Long localized date             | P       | 04/29/1453                        | 7     |
     * |                                 | PP      | Apr 29, 1453                      | 7     |
     * |                                 | PPP     | April 29th, 1453                  | 7     |
     * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
     * | Long localized time             | p       | 12:00 AM                          | 7     |
     * |                                 | pp      | 12:00:00 AM                       | 7     |
     * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
     * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
     * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
     * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
     * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
     * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
     * Notes:
     * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
     *    are the same as "stand-alone" units, but are different in some languages.
     *    "Formatting" units are declined according to the rules of the language
     *    in the context of a date. "Stand-alone" units are always nominative singular:
     *
     *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
     *
     *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
     *
     * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
     *    the single quote characters (see below).
     *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
     *    the output will be the same as default pattern for this unit, usually
     *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
     *    are marked with "2" in the last column of the table.
     *
     *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
     *
     * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
     *    The output will be padded with zeros to match the length of the pattern.
     *
     *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
     *
     * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
     *    These tokens represent the shortest form of the quarter.
     *
     * 5. The main difference between `y` and `u` patterns are B.C. years:
     *
     *    | Year | `y` | `u` |
     *    |------|-----|-----|
     *    | AC 1 |   1 |   1 |
     *    | BC 1 |   1 |   0 |
     *    | BC 2 |   2 |  -1 |
     *
     *    Also `yy` always returns the last two digits of a year,
     *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
     *
     *    | Year | `yy` | `uu` |
     *    |------|------|------|
     *    | 1    |   01 |   01 |
     *    | 14   |   14 |   14 |
     *    | 376  |   76 |  376 |
     *    | 1453 |   53 | 1453 |
     *
     *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
     *    except local week-numbering years are dependent on `options.weekStartsOn`
     *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
     *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
     *
     * 6. Specific non-location timezones are currently unavailable in `date-fns`,
     *    so right now these tokens fall back to GMT timezones.
     *
     * 7. These patterns are not in the Unicode Technical Standard #35:
     *    - `i`: ISO day of week
     *    - `I`: ISO week of year
     *    - `R`: ISO week-numbering year
     *    - `t`: seconds timestamp
     *    - `T`: milliseconds timestamp
     *    - `o`: ordinal number modifier
     *    - `P`: long localized date
     *    - `p`: long localized time
     *
     * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
     *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
     *
     * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
     *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * - The second argument is now required for the sake of explicitness.
     *
     *   ```javascript
     *   // Before v2.0.0
     *   format(new Date(2016, 0, 1))
     *
     *   // v2.0.0 onward
     *   format(new Date(2016, 0, 1), "yyyy-MM-dd'T'HH:mm:ss.SSSxxx")
     *   ```
     *
     * - New format string API for `format` function
     *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).
     *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.
     *
     * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.
     *
     * @param {Date|Number} date - the original date
     * @param {String} format - the string of tokens
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
     * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
     *   see: https://git.io/fxCyr
     * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
     *   see: https://git.io/fxCyr
     * @returns {String} the formatted date string
     * @throws {TypeError} 2 arguments required
     * @throws {RangeError} `date` must not be Invalid Date
     * @throws {RangeError} `options.locale` must contain `localize` property
     * @throws {RangeError} `options.locale` must contain `formatLong` property
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
     * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
     * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
     * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
     * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
     * @throws {RangeError} format string contains an unescaped latin alphabet character
     *
     * @example
     * // Represent 11 February 2014 in middle-endian format:
     * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
     * //=> '02/11/2014'
     *
     * @example
     * // Represent 2 July 2014 in Esperanto:
     * import { eoLocale } from 'date-fns/locale/eo'
     * var result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
     *   locale: eoLocale
     * })
     * //=> '2-a de julio 2014'
     *
     * @example
     * // Escape string by single quote characters:
     * var result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
     * //=> "3 o'clock"
     */

    function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
      requiredArgs(2, arguments);
      var formatStr = String(dirtyFormatStr);
      var options = dirtyOptions || {};
      var locale = options.locale || defaultLocale;
      var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;
      var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
      var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
      }

      var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
      var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
      var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
      }

      if (!locale.localize) {
        throw new RangeError('locale must contain localize property');
      }

      if (!locale.formatLong) {
        throw new RangeError('locale must contain formatLong property');
      }

      var originalDate = toDate(dirtyDate);

      if (!isValid(originalDate)) {
        throw new RangeError('Invalid time value');
      } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
      // This ensures that when UTC functions will be implemented, locales will be compatible with them.
      // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376


      var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
      var utcDate = subMilliseconds(originalDate, timezoneOffset);
      var formatterOptions = {
        firstWeekContainsDate: firstWeekContainsDate,
        weekStartsOn: weekStartsOn,
        locale: locale,
        _originalDate: originalDate
      };
      var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {
        var firstCharacter = substring[0];

        if (firstCharacter === 'p' || firstCharacter === 'P') {
          var longFormatter = longFormatters$1[firstCharacter];
          return longFormatter(substring, locale.formatLong, formatterOptions);
        }

        return substring;
      }).join('').match(formattingTokensRegExp).map(function (substring) {
        // Replace two single quote characters with one single quote character
        if (substring === "''") {
          return "'";
        }

        var firstCharacter = substring[0];

        if (firstCharacter === "'") {
          return cleanEscapedString(substring);
        }

        var formatter = formatters$1[firstCharacter];

        if (formatter) {
          if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
            throwProtectedError(substring, dirtyFormatStr, dirtyDate);
          }

          if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
            throwProtectedError(substring, dirtyFormatStr, dirtyDate);
          }

          return formatter(utcDate, substring, locale.localize, formatterOptions);
        }

        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
        }

        return substring;
      }).join('');
      return result;
    }

    function cleanEscapedString(input) {
      return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
    }

    /**
     * @name subDays
     * @category Day Helpers
     * @summary Subtract the specified number of days from the given date.
     *
     * @description
     * Subtract the specified number of days from the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the days subtracted
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Subtract 10 days from 1 September 2014:
     * const result = subDays(new Date(2014, 8, 1), 10)
     * //=> Fri Aug 22 2014 00:00:00
     */

    function subDays(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      return addDays(dirtyDate, -amount);
    }

    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'menos de un segundo',
        other: 'menos de {{count}} segundos'
      },
      xSeconds: {
        one: '1 segundo',
        other: '{{count}} segundos'
      },
      halfAMinute: 'medio minuto',
      lessThanXMinutes: {
        one: 'menos de un minuto',
        other: 'menos de {{count}} minutos'
      },
      xMinutes: {
        one: '1 minuto',
        other: '{{count}} minutos'
      },
      aboutXHours: {
        one: 'alrededor de 1 hora',
        other: 'alrededor de {{count}} horas'
      },
      xHours: {
        one: '1 hora',
        other: '{{count}} horas'
      },
      xDays: {
        one: '1 día',
        other: '{{count}} días'
      },
      aboutXWeeks: {
        one: 'alrededor de 1 semana',
        other: 'alrededor de {{count}} semanas'
      },
      xWeeks: {
        one: '1 semana',
        other: '{{count}} semanas'
      },
      aboutXMonths: {
        one: 'alrededor de 1 mes',
        other: 'alrededor de {{count}} meses'
      },
      xMonths: {
        one: '1 mes',
        other: '{{count}} meses'
      },
      aboutXYears: {
        one: 'alrededor de 1 año',
        other: 'alrededor de {{count}} años'
      },
      xYears: {
        one: '1 año',
        other: '{{count}} años'
      },
      overXYears: {
        one: 'más de 1 año',
        other: 'más de {{count}} años'
      },
      almostXYears: {
        one: 'casi 1 año',
        other: 'casi {{count}} años'
      }
    };
    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'en ' + result;
        } else {
          return 'hace ' + result;
        }
      }

      return result;
    }

    var dateFormats = {
      full: "EEEE, d 'de' MMMM 'de' y",
      long: "d 'de' MMMM 'de' y",
      medium: 'd MMM y',
      short: 'dd/MM/y'
    };
    var timeFormats = {
      full: 'HH:mm:ss zzzz',
      long: 'HH:mm:ss z',
      medium: 'HH:mm:ss',
      short: 'HH:mm'
    };
    var dateTimeFormats = {
      full: "{{date}} 'a las' {{time}}",
      long: "{{date}} 'a las' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: buildFormatLongFn({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: buildFormatLongFn({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var formatLong$1 = formatLong;

    var formatRelativeLocale = {
      lastWeek: "'el' eeee 'pasado a la' LT",
      yesterday: "'ayer a la' p",
      today: "'hoy a la' p",
      tomorrow: "'mañana a la' p",
      nextWeek: "eeee 'a la' p",
      other: 'P'
    };
    var formatRelativeLocalePlural = {
      lastWeek: "'el' eeee 'pasado a las' p",
      yesterday: "'ayer a las' p",
      today: "'hoy a las' p",
      tomorrow: "'mañana a las' p",
      nextWeek: "eeee 'a las' p",
      other: 'P'
    };
    function formatRelative(token, date, _baseDate, _options) {
      if (date.getUTCHours() !== 1) {
        return formatRelativeLocalePlural[token];
      }

      return formatRelativeLocale[token];
    }

    var eraValues = {
      narrow: ['AC', 'DC'],
      abbreviated: ['AC', 'DC'],
      wide: ['antes de cristo', 'después de cristo']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['T1', 'T2', 'T3', 'T4'],
      wide: ['1º trimestre', '2º trimestre', '3º trimestre', '4º trimestre']
    };
    var monthValues = {
      narrow: ['e', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
      abbreviated: ['ene', 'feb', 'mar', 'abr', 'may', 'jun', 'jul', 'ago', 'sep', 'oct', 'nov', 'dic'],
      wide: ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre']
    };
    var dayValues = {
      narrow: ['d', 'l', 'm', 'm', 'j', 'v', 's'],
      short: ['do', 'lu', 'ma', 'mi', 'ju', 'vi', 'sa'],
      abbreviated: ['dom', 'lun', 'mar', 'mié', 'jue', 'vie', 'sáb'],
      wide: ['domingo', 'lunes', 'martes', 'miércoles', 'jueves', 'viernes', 'sábado']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mn',
        noon: 'md',
        morning: 'mañana',
        afternoon: 'tarde',
        evening: 'tarde',
        night: 'noche'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'medianoche',
        noon: 'mediodia',
        morning: 'mañana',
        afternoon: 'tarde',
        evening: 'tarde',
        night: 'noche'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'medianoche',
        noon: 'mediodia',
        morning: 'mañana',
        afternoon: 'tarde',
        evening: 'tarde',
        night: 'noche'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mn',
        noon: 'md',
        morning: 'de la mañana',
        afternoon: 'de la tarde',
        evening: 'de la tarde',
        night: 'de la noche'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'medianoche',
        noon: 'mediodia',
        morning: 'de la mañana',
        afternoon: 'de la tarde',
        evening: 'de la tarde',
        night: 'de la noche'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'medianoche',
        noon: 'mediodia',
        morning: 'de la mañana',
        afternoon: 'de la tarde',
        evening: 'de la tarde',
        night: 'de la noche'
      }
    };

    function ordinalNumber(dirtyNumber) {
      var number = Number(dirtyNumber);
      return number + 'º';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: buildLocalizeFn({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: buildLocalizeFn({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: buildLocalizeFn({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var localize$1 = localize;

    var matchOrdinalNumberPattern = /^(\d+)(º)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ac|dc|a|d)/i,
      abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
      wide: /^(antes de cristo|antes de la era com[uú]n|despu[eé]s de cristo|era com[uú]n)/i
    };
    var parseEraPatterns = {
      any: [/^ac/i, /^dc/i],
      wide: [/^(antes de cristo|antes de la era com[uú]n)/i, /^(despu[eé]s de cristo|era com[uú]n)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^T[1234]/i,
      wide: /^[1234](º)? trimestre/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[efmajsond]/i,
      abbreviated: /^(ene|feb|mar|abr|may|jun|jul|ago|sep|oct|nov|dic)/i,
      wide: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i
    };
    var parseMonthPatterns = {
      narrow: [/^e/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^en/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i]
    };
    var matchDayPatterns = {
      narrow: /^[dlmjvs]/i,
      short: /^(do|lu|ma|mi|ju|vi|sa)/i,
      abbreviated: /^(dom|lun|mar|mie|jue|vie|sab)/i,
      wide: /^(domingo|lunes|martes|mi[ée]rcoles|jueves|viernes|s[áa]bado)/i
    };
    var parseDayPatterns = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
      any: [/^do/i, /^lu/i, /^ma/i, /^mi/i, /^ju/i, /^vi/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mn|md|(de la|a las) (mañana|tarde|noche))/i,
      any: /^([ap]\.?\s?m\.?|medianoche|mediodia|(de la|a las) (mañana|tarde|noche))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mn/i,
        noon: /^md/i,
        morning: /mañana/i,
        afternoon: /tarde/i,
        evening: /tarde/i,
        night: /noche/i
      }
    };
    var match = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var match$1 = match;

    /**
     * @type {Locale}
     * @category Locales
     * @summary Spanish locale.
     * @language Spanish
     * @iso-639-2 spa
     * @author Juan Angosto [@juanangosto]{@link https://github.com/juanangosto}
     * @author Guillermo Grau [@guigrpa]{@link https://github.com/guigrpa}
     * @author Fernando Agüero [@fjaguero]{@link https://github.com/fjaguero}
     * @author Gastón Haro [@harogaston]{@link https://github.com/harogaston}
     * @author Yago Carballo [@YagoCarballo]{@link https://github.com/YagoCarballo}
     */

    var locale = {
      code: 'es',
      formatDistance: formatDistance,
      formatLong: formatLong$1,
      formatRelative: formatRelative,
      localize: localize$1,
      match: match$1,
      options: {
        weekStartsOn: 1
        /* Monday */
        ,
        firstWeekContainsDate: 1
      }
    };
    var es = locale;

    const quoteShortener = (quote, maxLength, withDots = true) => {
      if (maxLength > quote.length) {
        return quote
      }

      const shortQuote = quote.slice(0, maxLength);
      const finalQuote = `${shortQuote}${withDots ? "..." : ""}`;

      return finalQuote
    };

    const numberParsed = (value) => {
      const valueLength = String(value).length;
      var suffixes = ["", "K", "M", "B", "T"];
      var suffixNum =
        valueLength > 6
          ? Math.floor(("" + value).length / 3)
          : Math.floor(("" + value).length / 4);
      var shortValue = parseFloat(
        (suffixNum != 0 ? value / Math.pow(1000, suffixNum) : value).toPrecision(2)
      );
      if (shortValue % 1 != 0) {
        shortValue = shortValue.toFixed(1);
      }
      return shortValue + suffixes[suffixNum]
    };

    const smartFilter = (input, properties, data, maxResults) => {
      const results = properties.map((singleProperty) => {
        return data.filter(
          (item) =>
            item[singleProperty].slice(0, input.length).toLowerCase() ===
            input.toLowerCase()
        )
      })[0];

      if (maxResults) {
        return results.slice(0, maxResults)
      }

      return results
    };

    /* src/containers/RecentBooksContainer.svelte generated by Svelte v3.44.1 */

    const { Object: Object_1$2 } = globals;
    const file$r = "src/containers/RecentBooksContainer.svelte";

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    // (242:2) {:else}
    function create_else_block$5(ctx) {
    	let div;
    	let p;

    	const block = {
    		c: function create() {
    			div = element("div");
    			p = element("p");
    			p.textContent = "Nadie ha creado historias aún, ¡Empieza tú!";
    			attr_dev(p, "class", "svelte-14xy7g9");
    			add_location(p, file$r, 243, 6, 5754);
    			attr_dev(div, "class", "empty-container svelte-14xy7g9");
    			add_location(div, file$r, 242, 4, 5718);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(242:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (190:2) {#if reactiveBooksList.length}
    function create_if_block$j(ctx) {
    	let h1;
    	let t0;
    	let span;
    	let t2;
    	let ul;
    	let each_value = /*reactiveBooksList*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			t0 = text("Historias recientes ");
    			span = element("span");
    			span.textContent = "(últimas 24h)";
    			t2 = space();
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(span, "class", "books-show-range-message svelte-14xy7g9");
    			add_location(span, file$r, 191, 26, 3756);
    			set_style(h1, "color", Theme.PALETTE.gray);
    			attr_dev(h1, "class", "svelte-14xy7g9");
    			add_location(h1, file$r, 190, 4, 3689);
    			attr_dev(ul, "class", "svelte-14xy7g9");
    			add_location(ul, file$r, 194, 4, 3839);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			append_dev(h1, t0);
    			append_dev(h1, span);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*Theme, reactiveBooksList, getDate, goToBook, quoteShortener*/ 7) {
    				each_value = /*reactiveBooksList*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$j.name,
    		type: "if",
    		source: "(190:2) {#if reactiveBooksList.length}",
    		ctx
    	});

    	return block;
    }

    // (196:6) {#each reactiveBooksList as book}
    function create_each_block$6(ctx) {
    	let li;
    	let div0;
    	let span0;
    	let t0;
    	let t1_value = /*book*/ ctx[8].createdByNickname + "";
    	let t1;
    	let t2;
    	let i0;
    	let t3;
    	let div5;
    	let h3;
    	let t4_value = quoteShortener(/*book*/ ctx[8].title, 80) + "";
    	let t4;
    	let t5;
    	let p;
    	let t6_value = /*book*/ ctx[8].description + "";
    	let t6;
    	let t7;
    	let div4;
    	let span1;
    	let b;
    	let t9;
    	let i1;
    	let t10_value = /*getDate*/ ctx[2](/*book*/ ctx[8].updatedAt) + "";
    	let t10;
    	let t11;
    	let div3;
    	let div1;
    	let i2;
    	let t12;
    	let span2;
    	let t13_value = /*book*/ ctx[8].views.length + "";
    	let t13;
    	let t14;
    	let div2;
    	let i3;
    	let t15;
    	let span3;
    	let t16_value = /*book*/ ctx[8].likes.length + "";
    	let t16;
    	let t17;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[4](/*book*/ ctx[8]);
    	}

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[5](/*book*/ ctx[8]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			div0 = element("div");
    			span0 = element("span");
    			t0 = text("@");
    			t1 = text(t1_value);
    			t2 = space();
    			i0 = element("i");
    			t3 = space();
    			div5 = element("div");
    			h3 = element("h3");
    			t4 = text(t4_value);
    			t5 = space();
    			p = element("p");
    			t6 = text(t6_value);
    			t7 = space();
    			div4 = element("div");
    			span1 = element("span");
    			b = element("b");
    			b.textContent = "Actualizada";
    			t9 = space();
    			i1 = element("i");
    			t10 = text(t10_value);
    			t11 = space();
    			div3 = element("div");
    			div1 = element("div");
    			i2 = element("i");
    			t12 = space();
    			span2 = element("span");
    			t13 = text(t13_value);
    			t14 = space();
    			div2 = element("div");
    			i3 = element("i");
    			t15 = space();
    			span3 = element("span");
    			t16 = text(t16_value);
    			t17 = space();
    			attr_dev(span0, "class", "book-user-nickname svelte-14xy7g9");
    			add_location(span0, file$r, 201, 12, 4089);
    			attr_dev(i0, "class", "mi mi-book book-icon svelte-14xy7g9");
    			add_location(i0, file$r, 202, 12, 4167);
    			set_style(div0, "background-color", Theme.PALETTE.primary);
    			attr_dev(div0, "class", "book-case svelte-14xy7g9");
    			add_location(div0, file$r, 197, 10, 3930);
    			attr_dev(h3, "class", "book-title svelte-14xy7g9");
    			add_location(h3, file$r, 205, 12, 4270);
    			attr_dev(p, "class", "book-description svelte-14xy7g9");
    			add_location(p, file$r, 209, 12, 4409);
    			add_location(b, file$r, 213, 16, 4562);
    			set_style(i1, "letter-spacing", "0.9px");
    			add_location(i1, file$r, 214, 16, 4597);
    			attr_dev(span1, "class", "updated-at svelte-14xy7g9");
    			add_location(span1, file$r, 212, 14, 4520);
    			attr_dev(i2, "class", "mi mi-eye");
    			set_style(i2, "font-size", "20px");
    			set_style(i2, "align-self", "center");
    			set_style(i2, "margin-right", "5px");
    			set_style(i2, "color", Theme.PALETTE.gray);
    			add_location(i2, file$r, 220, 18, 4869);
    			set_style(span2, "color", Theme.PALETTE.gray);
    			set_style(span2, "font-weight", "500");
    			add_location(span2, file$r, 224, 18, 5068);
    			set_style(div1, "display", "flex");
    			add_location(div1, file$r, 219, 16, 4823);
    			attr_dev(i3, "class", "mi mi-heart");
    			set_style(i3, "font-size", "20px");
    			set_style(i3, "align-self", "center");
    			set_style(i3, "margin-right", "5px");
    			set_style(i3, "color", Theme.PALETTE.gray);
    			add_location(i3, file$r, 228, 18, 5278);
    			set_style(span3, "color", Theme.PALETTE.gray);
    			set_style(span3, "font-weight", "500");
    			add_location(span3, file$r, 232, 18, 5479);
    			set_style(div2, "display", "flex");
    			set_style(div2, "margin-left", "20px");
    			add_location(div2, file$r, 227, 16, 5214);
    			set_style(div3, "display", "flex");
    			set_style(div3, "justify-content", "flex-start");
    			set_style(div3, "align-items", "center");
    			set_style(div3, "margin-top", "5px");
    			add_location(div3, file$r, 217, 14, 4696);
    			attr_dev(div4, "class", "metadata-container svelte-14xy7g9");
    			add_location(div4, file$r, 211, 12, 4473);
    			attr_dev(div5, "class", "book-content svelte-14xy7g9");
    			add_location(div5, file$r, 204, 10, 4231);
    			attr_dev(li, "class", "book-container svelte-14xy7g9");
    			add_location(li, file$r, 196, 8, 3892);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, div0);
    			append_dev(div0, span0);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			append_dev(div0, t2);
    			append_dev(div0, i0);
    			append_dev(li, t3);
    			append_dev(li, div5);
    			append_dev(div5, h3);
    			append_dev(h3, t4);
    			append_dev(div5, t5);
    			append_dev(div5, p);
    			append_dev(p, t6);
    			append_dev(div5, t7);
    			append_dev(div5, div4);
    			append_dev(div4, span1);
    			append_dev(span1, b);
    			append_dev(span1, t9);
    			append_dev(span1, i1);
    			append_dev(i1, t10);
    			append_dev(div4, t11);
    			append_dev(div4, div3);
    			append_dev(div3, div1);
    			append_dev(div1, i2);
    			append_dev(div1, t12);
    			append_dev(div1, span2);
    			append_dev(span2, t13);
    			append_dev(div3, t14);
    			append_dev(div3, div2);
    			append_dev(div2, i3);
    			append_dev(div2, t15);
    			append_dev(div2, span3);
    			append_dev(span3, t16);
    			append_dev(li, t17);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", click_handler, false, false, false),
    					listen_dev(h3, "click", click_handler_1, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*reactiveBooksList*/ 1 && t1_value !== (t1_value = /*book*/ ctx[8].createdByNickname + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*reactiveBooksList*/ 1 && t4_value !== (t4_value = quoteShortener(/*book*/ ctx[8].title, 80) + "")) set_data_dev(t4, t4_value);
    			if (dirty & /*reactiveBooksList*/ 1 && t6_value !== (t6_value = /*book*/ ctx[8].description + "")) set_data_dev(t6, t6_value);
    			if (dirty & /*reactiveBooksList*/ 1 && t10_value !== (t10_value = /*getDate*/ ctx[2](/*book*/ ctx[8].updatedAt) + "")) set_data_dev(t10, t10_value);
    			if (dirty & /*reactiveBooksList*/ 1 && t13_value !== (t13_value = /*book*/ ctx[8].views.length + "")) set_data_dev(t13, t13_value);
    			if (dirty & /*reactiveBooksList*/ 1 && t16_value !== (t16_value = /*book*/ ctx[8].likes.length + "")) set_data_dev(t16, t16_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(196:6) {#each reactiveBooksList as book}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$t(ctx) {
    	let link;
    	let t;
    	let div;

    	function select_block_type(ctx, dirty) {
    		if (/*reactiveBooksList*/ ctx[0].length) return create_if_block$j;
    		return create_else_block$5;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			link = element("link");
    			t = space();
    			div = element("div");
    			if_block.c();
    			attr_dev(link, "rel", "stylesheet");
    			attr_dev(link, "href", "https://unpkg.com/mono-icons@1.0.5/iconfont/icons.css");
    			add_location(link, file$r, 183, 2, 3501);
    			attr_dev(div, "class", "recent-books-main-wrapper svelte-14xy7g9");
    			add_location(div, file$r, 188, 0, 3612);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, link);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);
    			if_block.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, null);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			detach_dev(link);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$t($$self, $$props, $$invalidate) {
    	let reactiveBooksList;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('RecentBooksContainer', slots, []);
    	let store = {};
    	const date = new Date();

    	// Date of two days ago from now
    	const floorDate = subDays(date.getTime(), RECENT_BOOK_DAYS_INTERVAL).getTime();

    	onMount(() => {
    		gun.get(BOOKS).map().on(async (_book, key) => {
    			if (_book) {
    				const book = await decryptData(_book.data);

    				if (!book.published) {
    					return;
    				}

    				if (book.createdAt < floorDate) {
    					return;
    				}

    				gun.get(book.createdBy).once(async _user => {
    					const user = await decryptData(_user.data);

    					const parsedBook = {
    						...book,
    						createdByNickname: user.nickname
    					};

    					$$invalidate(3, store[key] = parsedBook, store);
    				});
    			} else {
    				delete store[key];
    				$$invalidate(3, store);
    			}
    		});
    	});

    	const goToBook = bookId => {
    		navigate(`/book/${bookId}`);
    	};

    	const getDate = date => {
    		if (!date) {
    			return;
    		}

    		const formated = format(date, "MMM dd, yyyy - hh:mma", { locale: es });
    		const parsedDate = formated.charAt(0).toUpperCase() + formated.slice(1, formated.length);
    		return parsedDate;
    	};

    	const writable_props = [];

    	Object_1$2.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<RecentBooksContainer> was created with unknown prop '${key}'`);
    	});

    	const click_handler = book => goToBook(book.id);
    	const click_handler_1 = book => goToBook(book.id);

    	$$self.$capture_state = () => ({
    		onMount,
    		format,
    		navigate,
    		es,
    		BOOKS,
    		gun,
    		Theme,
    		quoteShortener,
    		decryptData,
    		RECENT_BOOK_DAYS_INTERVAL,
    		subDays,
    		store,
    		date,
    		floorDate,
    		goToBook,
    		getDate,
    		reactiveBooksList
    	});

    	$$self.$inject_state = $$props => {
    		if ('store' in $$props) $$invalidate(3, store = $$props.store);
    		if ('reactiveBooksList' in $$props) $$invalidate(0, reactiveBooksList = $$props.reactiveBooksList);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*store*/ 8) {
    			$$invalidate(0, reactiveBooksList = Object.values(store).sort((a, b) => a.createdAt - b.createdAt));
    		}
    	};

    	return [reactiveBooksList, goToBook, getDate, store, click_handler, click_handler_1];
    }

    class RecentBooksContainer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$t, create_fragment$t, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "RecentBooksContainer",
    			options,
    			id: create_fragment$t.name
    		});
    	}
    }

    const durationUnitRegex = /[a-zA-Z]/;
    const range = (size, startAt = 0) => [...Array(size).keys()].map(i => i + startAt);
    // export const characterRange = (startChar, endChar) =>
    //   String.fromCharCode(
    //     ...range(
    //       endChar.charCodeAt(0) - startChar.charCodeAt(0),
    //       startChar.charCodeAt(0)
    //     )
    //   );
    // export const zip = (arr, ...arrs) =>
    //   arr.map((val, i) => arrs.reduce((list, curr) => [...list, curr[i]], [val]));

    /* node_modules/svelte-loading-spinners/dist/DoubleBounce.svelte generated by Svelte v3.44.1 */
    const file$q = "node_modules/svelte-loading-spinners/dist/DoubleBounce.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	return child_ctx;
    }

    // (41:2) {#each range(2, 1) as version}
    function create_each_block$5(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "circle svelte-h1a2xs");

    			set_style(div, "animation", /*duration*/ ctx[2] + " " + (/*version*/ ctx[6] === 1
    			? `${(/*durationNum*/ ctx[5] - 0.1) / 2}${/*durationUnit*/ ctx[4]}`
    			: `0s`) + " infinite ease-in-out");

    			add_location(div, file$q, 41, 4, 936);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*duration*/ 4) {
    				set_style(div, "animation", /*duration*/ ctx[2] + " " + (/*version*/ ctx[6] === 1
    				? `${(/*durationNum*/ ctx[5] - 0.1) / 2}${/*durationUnit*/ ctx[4]}`
    				: `0s`) + " infinite ease-in-out");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(41:2) {#each range(2, 1) as version}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$s(ctx) {
    	let div;
    	let each_value = range(2, 1);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "wrapper svelte-h1a2xs");
    			set_style(div, "--size", /*size*/ ctx[3] + /*unit*/ ctx[1]);
    			set_style(div, "--color", /*color*/ ctx[0]);
    			add_location(div, file$q, 39, 0, 828);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*duration, range, durationNum, durationUnit*/ 52) {
    				each_value = range(2, 1);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*size, unit*/ 10) {
    				set_style(div, "--size", /*size*/ ctx[3] + /*unit*/ ctx[1]);
    			}

    			if (dirty & /*color*/ 1) {
    				set_style(div, "--color", /*color*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$s($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('DoubleBounce', slots, []);
    	let { color = "#FF3E00" } = $$props;
    	let { unit = "px" } = $$props;
    	let { duration = "2.1s" } = $$props;
    	let { size = "60" } = $$props;
    	let durationUnit = duration.match(durationUnitRegex)[0];
    	let durationNum = duration.replace(durationUnitRegex, "");
    	const writable_props = ['color', 'unit', 'duration', 'size'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<DoubleBounce> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('color' in $$props) $$invalidate(0, color = $$props.color);
    		if ('unit' in $$props) $$invalidate(1, unit = $$props.unit);
    		if ('duration' in $$props) $$invalidate(2, duration = $$props.duration);
    		if ('size' in $$props) $$invalidate(3, size = $$props.size);
    	};

    	$$self.$capture_state = () => ({
    		range,
    		durationUnitRegex,
    		color,
    		unit,
    		duration,
    		size,
    		durationUnit,
    		durationNum
    	});

    	$$self.$inject_state = $$props => {
    		if ('color' in $$props) $$invalidate(0, color = $$props.color);
    		if ('unit' in $$props) $$invalidate(1, unit = $$props.unit);
    		if ('duration' in $$props) $$invalidate(2, duration = $$props.duration);
    		if ('size' in $$props) $$invalidate(3, size = $$props.size);
    		if ('durationUnit' in $$props) $$invalidate(4, durationUnit = $$props.durationUnit);
    		if ('durationNum' in $$props) $$invalidate(5, durationNum = $$props.durationNum);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [color, unit, duration, size, durationUnit, durationNum];
    }

    class DoubleBounce extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$s, create_fragment$s, safe_not_equal, { color: 0, unit: 1, duration: 2, size: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DoubleBounce",
    			options,
    			id: create_fragment$s.name
    		});
    	}

    	get color() {
    		throw new Error("<DoubleBounce>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<DoubleBounce>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get unit() {
    		throw new Error("<DoubleBounce>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set unit(value) {
    		throw new Error("<DoubleBounce>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get duration() {
    		throw new Error("<DoubleBounce>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set duration(value) {
    		throw new Error("<DoubleBounce>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<DoubleBounce>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<DoubleBounce>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-loading-spinners/dist/SyncLoader.svelte generated by Svelte v3.44.1 */
    const file$p = "node_modules/svelte-loading-spinners/dist/SyncLoader.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	return child_ctx;
    }

    // (61:2) {#each range(3, 1) as i}
    function create_each_block$4(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "dot svelte-14w6xk7");
    			set_style(div, "--dotSize", +/*size*/ ctx[3] * 0.25 + /*unit*/ ctx[1]);
    			set_style(div, "--color", /*color*/ ctx[0]);
    			set_style(div, "animation-delay", /*i*/ ctx[6] * (+/*durationNum*/ ctx[5] / 10) + /*durationUnit*/ ctx[4]);
    			add_location(div, file$p, 61, 4, 1491);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*size, unit*/ 10) {
    				set_style(div, "--dotSize", +/*size*/ ctx[3] * 0.25 + /*unit*/ ctx[1]);
    			}

    			if (dirty & /*color*/ 1) {
    				set_style(div, "--color", /*color*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(61:2) {#each range(3, 1) as i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$r(ctx) {
    	let div;
    	let each_value = range(3, 1);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "wrapper svelte-14w6xk7");
    			set_style(div, "--size", /*size*/ ctx[3] + /*unit*/ ctx[1]);
    			set_style(div, "--duration", /*duration*/ ctx[2]);
    			add_location(div, file$p, 59, 0, 1383);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*size, unit, color, range, durationNum, durationUnit*/ 59) {
    				each_value = range(3, 1);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*size, unit*/ 10) {
    				set_style(div, "--size", /*size*/ ctx[3] + /*unit*/ ctx[1]);
    			}

    			if (dirty & /*duration*/ 4) {
    				set_style(div, "--duration", /*duration*/ ctx[2]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$r($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SyncLoader', slots, []);
    	let { color = "#FF3E00" } = $$props;
    	let { unit = "px" } = $$props;
    	let { duration = "0.6s" } = $$props;
    	let { size = "60" } = $$props;
    	let durationUnit = duration.match(durationUnitRegex)[0];
    	let durationNum = duration.replace(durationUnitRegex, "");
    	const writable_props = ['color', 'unit', 'duration', 'size'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SyncLoader> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('color' in $$props) $$invalidate(0, color = $$props.color);
    		if ('unit' in $$props) $$invalidate(1, unit = $$props.unit);
    		if ('duration' in $$props) $$invalidate(2, duration = $$props.duration);
    		if ('size' in $$props) $$invalidate(3, size = $$props.size);
    	};

    	$$self.$capture_state = () => ({
    		range,
    		durationUnitRegex,
    		color,
    		unit,
    		duration,
    		size,
    		durationUnit,
    		durationNum
    	});

    	$$self.$inject_state = $$props => {
    		if ('color' in $$props) $$invalidate(0, color = $$props.color);
    		if ('unit' in $$props) $$invalidate(1, unit = $$props.unit);
    		if ('duration' in $$props) $$invalidate(2, duration = $$props.duration);
    		if ('size' in $$props) $$invalidate(3, size = $$props.size);
    		if ('durationUnit' in $$props) $$invalidate(4, durationUnit = $$props.durationUnit);
    		if ('durationNum' in $$props) $$invalidate(5, durationNum = $$props.durationNum);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [color, unit, duration, size, durationUnit, durationNum];
    }

    class SyncLoader extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$r, create_fragment$r, safe_not_equal, { color: 0, unit: 1, duration: 2, size: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SyncLoader",
    			options,
    			id: create_fragment$r.name
    		});
    	}

    	get color() {
    		throw new Error("<SyncLoader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<SyncLoader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get unit() {
    		throw new Error("<SyncLoader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set unit(value) {
    		throw new Error("<SyncLoader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get duration() {
    		throw new Error("<SyncLoader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set duration(value) {
    		throw new Error("<SyncLoader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<SyncLoader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<SyncLoader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/UserCard.svelte generated by Svelte v3.44.1 */
    const file$o = "src/components/UserCard.svelte";

    function create_fragment$q(ctx) {
    	let link;
    	let t0;
    	let div1;
    	let img;
    	let img_alt_value;
    	let img_src_value;
    	let t1;
    	let div0;
    	let span;
    	let t2;
    	let t3_value = /*user*/ ctx[0].nickname + "";
    	let t3;
    	let t4;
    	let p;
    	let i;
    	let t5_value = numberParsed(/*user*/ ctx[0].followers.length) + "";
    	let t5;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			link = element("link");
    			t0 = space();
    			div1 = element("div");
    			img = element("img");
    			t1 = space();
    			div0 = element("div");
    			span = element("span");
    			t2 = text("@");
    			t3 = text(t3_value);
    			t4 = space();
    			p = element("p");
    			i = element("i");
    			t5 = text(t5_value);
    			attr_dev(link, "rel", "stylesheet");
    			attr_dev(link, "href", "https://unpkg.com/mono-icons@1.0.5/iconfont/icons.css");
    			add_location(link, file$o, 71, 2, 1263);
    			attr_dev(img, "alt", img_alt_value = /*user*/ ctx[0].nickname);
    			if (!src_url_equal(img.src, img_src_value = /*user*/ ctx[0].photo)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "class", "user-photo-wrapper svelte-ejlair");
    			add_location(img, file$o, 77, 2, 1450);
    			attr_dev(span, "class", "user-nickname svelte-ejlair");
    			add_location(span, file$o, 79, 4, 1559);
    			attr_dev(i, "class", "mi mi-users svelte-ejlair");
    			add_location(i, file$o, 82, 6, 1650);
    			attr_dev(p, "class", "followers-count svelte-ejlair");
    			add_location(p, file$o, 81, 4, 1616);
    			attr_dev(div0, "class", "text-section svelte-ejlair");
    			add_location(div0, file$o, 78, 2, 1528);
    			attr_dev(div1, "class", "user-card-wrapper svelte-ejlair");
    			add_location(div1, file$o, 76, 0, 1374);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, link);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, img);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, span);
    			append_dev(span, t2);
    			append_dev(span, t3);
    			append_dev(div0, t4);
    			append_dev(div0, p);
    			append_dev(p, i);
    			append_dev(p, t5);

    			if (!mounted) {
    				dispose = listen_dev(div1, "click", /*click_handler*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*user*/ 1 && img_alt_value !== (img_alt_value = /*user*/ ctx[0].nickname)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty & /*user*/ 1 && !src_url_equal(img.src, img_src_value = /*user*/ ctx[0].photo)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*user*/ 1 && t3_value !== (t3_value = /*user*/ ctx[0].nickname + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*user*/ 1 && t5_value !== (t5_value = numberParsed(/*user*/ ctx[0].followers.length) + "")) set_data_dev(t5, t5_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			detach_dev(link);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('UserCard', slots, []);
    	let { user } = $$props;

    	const goToProfile = userId => {
    		const parsedUserId = userId.replace(".", PROFILE_DOT_REPLACEMENT);
    		navigate(`/user/${parsedUserId}`);
    	};

    	const writable_props = ['user'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UserCard> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => goToProfile(user.uuid);

    	$$self.$$set = $$props => {
    		if ('user' in $$props) $$invalidate(0, user = $$props.user);
    	};

    	$$self.$capture_state = () => ({
    		navigate,
    		PROFILE_DOT_REPLACEMENT,
    		numberParsed,
    		user,
    		goToProfile
    	});

    	$$self.$inject_state = $$props => {
    		if ('user' in $$props) $$invalidate(0, user = $$props.user);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [user, goToProfile, click_handler];
    }

    class UserCard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$q, create_fragment$q, safe_not_equal, { user: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UserCard",
    			options,
    			id: create_fragment$q.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*user*/ ctx[0] === undefined && !('user' in props)) {
    			console.warn("<UserCard> was created without expected prop 'user'");
    		}
    	}

    	get user() {
    		throw new Error("<UserCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set user(value) {
    		throw new Error("<UserCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/containers/UserSearchContainer.svelte generated by Svelte v3.44.1 */
    const file$n = "src/containers/UserSearchContainer.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	return child_ctx;
    }

    // (135:0) {#if isSearching}
    function create_if_block_2$5(ctx) {
    	let div;
    	let syncloader;
    	let current;

    	syncloader = new SyncLoader({
    			props: {
    				size: "30",
    				color: Theme.PALETTE.primary,
    				unit: "px",
    				duration: "1s"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(syncloader.$$.fragment);
    			set_style(div, "margin-top", "20px");
    			add_location(div, file$n, 135, 2, 2687);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(syncloader, div, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syncloader.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syncloader.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(syncloader);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$5.name,
    		type: "if",
    		source: "(135:0) {#if isSearching}",
    		ctx
    	});

    	return block;
    }

    // (150:67) 
    function create_if_block_1$9(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "Sin resultados";
    			attr_dev(p, "class", "empty-message svelte-m3aagn");
    			add_location(p, file$n, 150, 4, 3083);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$9.name,
    		type: "if",
    		source: "(150:67) ",
    		ctx
    	});

    	return block;
    }

    // (146:2) {#if filteredResults.length && !isSearching}
    function create_if_block$i(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*filteredResults*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filteredResults*/ 8) {
    				each_value = /*filteredResults*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$i.name,
    		type: "if",
    		source: "(146:2) {#if filteredResults.length && !isSearching}",
    		ctx
    	});

    	return block;
    }

    // (147:4) {#each filteredResults as result}
    function create_each_block$3(ctx) {
    	let usercard;
    	let current;

    	usercard = new UserCard({
    			props: { user: /*result*/ ctx[10] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(usercard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(usercard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const usercard_changes = {};
    			if (dirty & /*filteredResults*/ 8) usercard_changes.user = /*result*/ ctx[10];
    			usercard.$set(usercard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(usercard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(usercard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(usercard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(147:4) {#each filteredResults as result}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$p(ctx) {
    	let link;
    	let t0;
    	let div1;
    	let h1;
    	let t1;
    	let t2;
    	let div0;
    	let i0;
    	let t3;
    	let input;
    	let t4;
    	let i1;
    	let t5;
    	let t6;
    	let section;
    	let show_if;
    	let current_block_type_index;
    	let if_block1;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*isSearching*/ ctx[2] && create_if_block_2$5(ctx);
    	const if_block_creators = [create_if_block$i, create_if_block_1$9];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*filteredResults*/ ctx[3].length && !/*isSearching*/ ctx[2]) return 0;
    		if (show_if == null || dirty & /*searchValue, isSearching, hasSearch*/ 7) show_if = !!(/*searchValue*/ ctx[0].trim().length && !/*isSearching*/ ctx[2] && /*hasSearch*/ ctx[1]);
    		if (show_if) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx, -1))) {
    		if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			link = element("link");
    			t0 = space();
    			div1 = element("div");
    			h1 = element("h1");
    			t1 = text("Buscar usuario");
    			t2 = space();
    			div0 = element("div");
    			i0 = element("i");
    			t3 = space();
    			input = element("input");
    			t4 = space();
    			i1 = element("i");
    			t5 = space();
    			if (if_block0) if_block0.c();
    			t6 = space();
    			section = element("section");
    			if (if_block1) if_block1.c();
    			attr_dev(link, "rel", "stylesheet");
    			attr_dev(link, "href", "https://unpkg.com/mono-icons@1.0.5/iconfont/icons.css");
    			add_location(link, file$n, 116, 2, 2190);
    			set_style(h1, "color", Theme.PALETTE.gray);
    			attr_dev(h1, "class", "svelte-m3aagn");
    			add_location(h1, file$n, 122, 2, 2309);
    			attr_dev(i0, "class", "mi mi-search search-icon svelte-m3aagn");
    			add_location(i0, file$n, 125, 4, 2417);
    			attr_dev(input, "placeholder", "Busca por nickname");
    			input.value = /*searchValue*/ ctx[0];
    			attr_dev(input, "class", "svelte-m3aagn");
    			add_location(input, file$n, 126, 4, 2462);
    			attr_dev(i1, "class", "mi mi-close search-icon svelte-m3aagn");
    			add_location(i1, file$n, 130, 4, 2579);
    			attr_dev(div0, "class", "custom-searchbar-container svelte-m3aagn");
    			add_location(div0, file$n, 124, 2, 2372);
    			add_location(div1, file$n, 121, 0, 2301);
    			attr_dev(section, "class", "results-container svelte-m3aagn");
    			add_location(section, file$n, 144, 0, 2843);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, link);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h1);
    			append_dev(h1, t1);
    			append_dev(div1, t2);
    			append_dev(div1, div0);
    			append_dev(div0, i0);
    			append_dev(div0, t3);
    			append_dev(div0, input);
    			append_dev(div0, t4);
    			append_dev(div0, i1);
    			insert_dev(target, t5, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, section, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(section, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*handleTextChange*/ ctx[5], false, false, false),
    					listen_dev(i1, "click", /*handleResetSearch*/ ctx[4], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*searchValue*/ 1 && input.value !== /*searchValue*/ ctx[0]) {
    				prop_dev(input, "value", /*searchValue*/ ctx[0]);
    			}

    			if (/*isSearching*/ ctx[2]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*isSearching*/ 4) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_2$5(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t6.parentNode, t6);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx, dirty);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block1) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block1 = if_blocks[current_block_type_index];

    					if (!if_block1) {
    						if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block1.c();
    					} else {
    						if_block1.p(ctx, dirty);
    					}

    					transition_in(if_block1, 1);
    					if_block1.m(section, null);
    				} else {
    					if_block1 = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			detach_dev(link);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t5);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(section);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let filteredResults;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('UserSearchContainer', slots, []);
    	let searchValue = "";
    	let results = [];
    	let prevSearch = "";
    	let hasSearch = false;
    	let timer;
    	let isSearching = false;

    	const handleResetSearch = () => {
    		$$invalidate(0, searchValue = "");
    		prevSearch = "";
    		$$invalidate(6, results = []);
    		$$invalidate(1, hasSearch = false);
    		clearTimeout(timer);
    		$$invalidate(2, isSearching = false);
    	};

    	const handleTextChange = event => {
    		const eventValue = event.target.value.trim();
    		const value = eventValue.replace("@", "");

    		if (!value.length) {
    			handleResetSearch();
    			return;
    		}

    		$$invalidate(2, isSearching = true);
    		$$invalidate(0, searchValue = value);
    		clearTimeout(timer);

    		timer = setTimeout(
    			() => {
    				handleSearch();
    			},
    			800
    		);
    	};

    	const handleSearch = () => {
    		if (prevSearch === searchValue) {
    			return;
    		}

    		$$invalidate(1, hasSearch = true);
    		prevSearch = searchValue;
    		$$invalidate(6, results = []);

    		gun.get(USERS).map().once(async _broughtUser => {
    			const broughtUser = await decryptData(_broughtUser.data);
    			$$invalidate(6, results = [...results, broughtUser].filter(result => result.uuid !== user.is.epub));
    		});

    		$$invalidate(2, isSearching = false);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UserSearchContainer> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		SyncLoader,
    		gun,
    		user,
    		Theme,
    		USERS,
    		decryptData,
    		UserCard,
    		searchValue,
    		results,
    		prevSearch,
    		hasSearch,
    		timer,
    		isSearching,
    		handleResetSearch,
    		handleTextChange,
    		handleSearch,
    		filteredResults
    	});

    	$$self.$inject_state = $$props => {
    		if ('searchValue' in $$props) $$invalidate(0, searchValue = $$props.searchValue);
    		if ('results' in $$props) $$invalidate(6, results = $$props.results);
    		if ('prevSearch' in $$props) prevSearch = $$props.prevSearch;
    		if ('hasSearch' in $$props) $$invalidate(1, hasSearch = $$props.hasSearch);
    		if ('timer' in $$props) timer = $$props.timer;
    		if ('isSearching' in $$props) $$invalidate(2, isSearching = $$props.isSearching);
    		if ('filteredResults' in $$props) $$invalidate(3, filteredResults = $$props.filteredResults);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*results, searchValue*/ 65) {
    			$$invalidate(3, filteredResults = results.filter(item => {
    				return item.nickname.toLowerCase().includes(searchValue.trim().toLowerCase());
    			}));
    		}
    	};

    	return [
    		searchValue,
    		hasSearch,
    		isSearching,
    		filteredResults,
    		handleResetSearch,
    		handleTextChange,
    		results
    	];
    }

    class UserSearchContainer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$p, create_fragment$p, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UserSearchContainer",
    			options,
    			id: create_fragment$p.name
    		});
    	}
    }

    /* src/components/BookCard.svelte generated by Svelte v3.44.1 */
    const file$m = "src/components/BookCard.svelte";

    function create_fragment$o(ctx) {
    	let link;
    	let t0;
    	let div1;
    	let i0;
    	let t1;
    	let div0;
    	let span0;
    	let t2_value = /*book*/ ctx[0].title + "";
    	let t2;
    	let t3;
    	let p;
    	let i1;
    	let t4_value = numberParsed(/*book*/ ctx[0].views.length) + "";
    	let t4;
    	let t5;
    	let span1;
    	let t6;
    	let t7_value = /*book*/ ctx[0].createdByNickname + "";
    	let t7;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			link = element("link");
    			t0 = space();
    			div1 = element("div");
    			i0 = element("i");
    			t1 = space();
    			div0 = element("div");
    			span0 = element("span");
    			t2 = text(t2_value);
    			t3 = space();
    			p = element("p");
    			i1 = element("i");
    			t4 = text(t4_value);
    			t5 = space();
    			span1 = element("span");
    			t6 = text("@");
    			t7 = text(t7_value);
    			attr_dev(link, "rel", "stylesheet");
    			attr_dev(link, "href", "https://unpkg.com/mono-icons@1.0.5/iconfont/icons.css");
    			add_location(link, file$m, 79, 2, 1323);
    			attr_dev(i0, "class", "mi mi-book book-icon svelte-10mnz5u");
    			add_location(i0, file$m, 85, 2, 1490);
    			attr_dev(span0, "class", "book-title svelte-10mnz5u");
    			add_location(span0, file$m, 87, 4, 1560);
    			attr_dev(i1, "class", "mi mi-eye users-icon svelte-10mnz5u");
    			add_location(i1, file$m, 90, 6, 1640);
    			attr_dev(p, "class", "views-count svelte-10mnz5u");
    			add_location(p, file$m, 89, 4, 1610);
    			attr_dev(div0, "class", "text-section svelte-10mnz5u");
    			add_location(div0, file$m, 86, 2, 1529);
    			attr_dev(span1, "class", "book-author svelte-10mnz5u");
    			add_location(span1, file$m, 94, 2, 1731);
    			attr_dev(div1, "class", "book-card-wrapper svelte-10mnz5u");
    			add_location(div1, file$m, 84, 0, 1434);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, link);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, i0);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, span0);
    			append_dev(span0, t2);
    			append_dev(div0, t3);
    			append_dev(div0, p);
    			append_dev(p, i1);
    			append_dev(p, t4);
    			append_dev(div1, t5);
    			append_dev(div1, span1);
    			append_dev(span1, t6);
    			append_dev(span1, t7);

    			if (!mounted) {
    				dispose = listen_dev(div1, "click", /*goToBook*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*book*/ 1 && t2_value !== (t2_value = /*book*/ ctx[0].title + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*book*/ 1 && t4_value !== (t4_value = numberParsed(/*book*/ ctx[0].views.length) + "")) set_data_dev(t4, t4_value);
    			if (dirty & /*book*/ 1 && t7_value !== (t7_value = /*book*/ ctx[0].createdByNickname + "")) set_data_dev(t7, t7_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			detach_dev(link);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BookCard', slots, []);
    	let { book } = $$props;

    	const goToBook = () => {
    		navigate(`/book/${book.id}`);
    	};

    	const writable_props = ['book'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BookCard> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('book' in $$props) $$invalidate(0, book = $$props.book);
    	};

    	$$self.$capture_state = () => ({ navigate, numberParsed, book, goToBook });

    	$$self.$inject_state = $$props => {
    		if ('book' in $$props) $$invalidate(0, book = $$props.book);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [book, goToBook];
    }

    class BookCard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$o, create_fragment$o, safe_not_equal, { book: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BookCard",
    			options,
    			id: create_fragment$o.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*book*/ ctx[0] === undefined && !('book' in props)) {
    			console.warn("<BookCard> was created without expected prop 'book'");
    		}
    	}

    	get book() {
    		throw new Error("<BookCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set book(value) {
    		throw new Error("<BookCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/containers/BookSearchContainer.svelte generated by Svelte v3.44.1 */
    const file$l = "src/containers/BookSearchContainer.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	return child_ctx;
    }

    // (143:0) {#if isSearching}
    function create_if_block_2$4(ctx) {
    	let div;
    	let syncloader;
    	let current;

    	syncloader = new SyncLoader({
    			props: {
    				size: "30",
    				color: Theme.PALETTE.primary,
    				unit: "px",
    				duration: "1s"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(syncloader.$$.fragment);
    			set_style(div, "margin-top", "20px");
    			add_location(div, file$l, 143, 2, 2958);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(syncloader, div, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syncloader.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syncloader.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(syncloader);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(143:0) {#if isSearching}",
    		ctx
    	});

    	return block;
    }

    // (158:67) 
    function create_if_block_1$8(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "Sin resultados";
    			attr_dev(p, "class", "empty-message svelte-m3aagn");
    			add_location(p, file$l, 158, 4, 3354);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$8.name,
    		type: "if",
    		source: "(158:67) ",
    		ctx
    	});

    	return block;
    }

    // (154:2) {#if filteredResults.length && !isSearching}
    function create_if_block$h(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*filteredResults*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filteredResults*/ 8) {
    				each_value = /*filteredResults*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$h.name,
    		type: "if",
    		source: "(154:2) {#if filteredResults.length && !isSearching}",
    		ctx
    	});

    	return block;
    }

    // (155:4) {#each filteredResults as result}
    function create_each_block$2(ctx) {
    	let bookcard;
    	let current;

    	bookcard = new BookCard({
    			props: { book: /*result*/ ctx[10] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(bookcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(bookcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const bookcard_changes = {};
    			if (dirty & /*filteredResults*/ 8) bookcard_changes.book = /*result*/ ctx[10];
    			bookcard.$set(bookcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(bookcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(bookcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(bookcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(155:4) {#each filteredResults as result}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$n(ctx) {
    	let link;
    	let t0;
    	let div1;
    	let h1;
    	let t1;
    	let t2;
    	let div0;
    	let i0;
    	let t3;
    	let input;
    	let t4;
    	let i1;
    	let t5;
    	let t6;
    	let section;
    	let show_if;
    	let current_block_type_index;
    	let if_block1;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*isSearching*/ ctx[2] && create_if_block_2$4(ctx);
    	const if_block_creators = [create_if_block$h, create_if_block_1$8];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*filteredResults*/ ctx[3].length && !/*isSearching*/ ctx[2]) return 0;
    		if (show_if == null || dirty & /*searchValue, isSearching, hasSearch*/ 7) show_if = !!(/*searchValue*/ ctx[0].trim().length && !/*isSearching*/ ctx[2] && /*hasSearch*/ ctx[1]);
    		if (show_if) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx, -1))) {
    		if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			link = element("link");
    			t0 = space();
    			div1 = element("div");
    			h1 = element("h1");
    			t1 = text("Buscar historia");
    			t2 = space();
    			div0 = element("div");
    			i0 = element("i");
    			t3 = space();
    			input = element("input");
    			t4 = space();
    			i1 = element("i");
    			t5 = space();
    			if (if_block0) if_block0.c();
    			t6 = space();
    			section = element("section");
    			if (if_block1) if_block1.c();
    			attr_dev(link, "rel", "stylesheet");
    			attr_dev(link, "href", "https://unpkg.com/mono-icons@1.0.5/iconfont/icons.css");
    			add_location(link, file$l, 124, 2, 2462);
    			set_style(h1, "color", Theme.PALETTE.gray);
    			attr_dev(h1, "class", "svelte-m3aagn");
    			add_location(h1, file$l, 130, 2, 2581);
    			attr_dev(i0, "class", "mi mi-search search-icon svelte-m3aagn");
    			add_location(i0, file$l, 133, 4, 2690);
    			attr_dev(input, "placeholder", "Busca por título");
    			input.value = /*searchValue*/ ctx[0];
    			attr_dev(input, "class", "svelte-m3aagn");
    			add_location(input, file$l, 134, 4, 2735);
    			attr_dev(i1, "class", "mi mi-close search-icon svelte-m3aagn");
    			add_location(i1, file$l, 138, 4, 2850);
    			attr_dev(div0, "class", "custom-searchbar-container svelte-m3aagn");
    			add_location(div0, file$l, 132, 2, 2645);
    			add_location(div1, file$l, 129, 0, 2573);
    			attr_dev(section, "class", "results-container svelte-m3aagn");
    			add_location(section, file$l, 152, 0, 3114);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, link);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h1);
    			append_dev(h1, t1);
    			append_dev(div1, t2);
    			append_dev(div1, div0);
    			append_dev(div0, i0);
    			append_dev(div0, t3);
    			append_dev(div0, input);
    			append_dev(div0, t4);
    			append_dev(div0, i1);
    			insert_dev(target, t5, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, section, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(section, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*handleTextChange*/ ctx[5], false, false, false),
    					listen_dev(i1, "click", /*handleResetSearch*/ ctx[4], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*searchValue*/ 1 && input.value !== /*searchValue*/ ctx[0]) {
    				prop_dev(input, "value", /*searchValue*/ ctx[0]);
    			}

    			if (/*isSearching*/ ctx[2]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*isSearching*/ 4) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_2$4(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t6.parentNode, t6);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx, dirty);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block1) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block1 = if_blocks[current_block_type_index];

    					if (!if_block1) {
    						if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block1.c();
    					} else {
    						if_block1.p(ctx, dirty);
    					}

    					transition_in(if_block1, 1);
    					if_block1.m(section, null);
    				} else {
    					if_block1 = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			detach_dev(link);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t5);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(section);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let filteredResults;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BookSearchContainer', slots, []);
    	let searchValue = "";
    	let results = [];
    	let prevSearch = "";
    	let hasSearch = false;
    	let timer;
    	let isSearching = false;

    	const handleResetSearch = () => {
    		$$invalidate(0, searchValue = "");
    		prevSearch = "";
    		$$invalidate(6, results = []);
    		$$invalidate(1, hasSearch = false);
    		clearTimeout(timer);
    		$$invalidate(2, isSearching = false);
    	};

    	const handleTextChange = event => {
    		const eventValue = event.target.value.trim();
    		const value = eventValue.replace("@", "");

    		if (!value.length) {
    			handleResetSearch();
    			return;
    		}

    		$$invalidate(2, isSearching = true);
    		$$invalidate(0, searchValue = value);
    		clearTimeout(timer);

    		timer = setTimeout(
    			() => {
    				handleSearch();
    			},
    			800
    		);
    	};

    	const handleSearch = () => {
    		if (prevSearch === searchValue) {
    			return;
    		}

    		$$invalidate(1, hasSearch = true);
    		prevSearch = searchValue;
    		$$invalidate(6, results = []);

    		gun.get(BOOKS).map().once(async _broughtBook => {
    			const broughtBook = await decryptData(_broughtBook.data);

    			gun.get(broughtBook.createdBy).once(async _author => {
    				const author = await decryptData(_author.data);

    				const withAuthorBook = {
    					...broughtBook,
    					createdByNickname: author.nickname
    				};

    				$$invalidate(6, results = [...results, withAuthorBook].filter(result => result.createdBy !== user.is.epub && result.published));
    			});
    		});

    		$$invalidate(2, isSearching = false);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BookSearchContainer> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		SyncLoader,
    		gun,
    		user,
    		Theme,
    		BOOKS,
    		decryptData,
    		smartFilter,
    		BookCard,
    		searchValue,
    		results,
    		prevSearch,
    		hasSearch,
    		timer,
    		isSearching,
    		handleResetSearch,
    		handleTextChange,
    		handleSearch,
    		filteredResults
    	});

    	$$self.$inject_state = $$props => {
    		if ('searchValue' in $$props) $$invalidate(0, searchValue = $$props.searchValue);
    		if ('results' in $$props) $$invalidate(6, results = $$props.results);
    		if ('prevSearch' in $$props) prevSearch = $$props.prevSearch;
    		if ('hasSearch' in $$props) $$invalidate(1, hasSearch = $$props.hasSearch);
    		if ('timer' in $$props) timer = $$props.timer;
    		if ('isSearching' in $$props) $$invalidate(2, isSearching = $$props.isSearching);
    		if ('filteredResults' in $$props) $$invalidate(3, filteredResults = $$props.filteredResults);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*searchValue, results*/ 65) {
    			$$invalidate(3, filteredResults = smartFilter(searchValue.trim(), ["title"], results));
    		}
    	};

    	return [
    		searchValue,
    		hasSearch,
    		isSearching,
    		filteredResults,
    		handleResetSearch,
    		handleTextChange,
    		results
    	];
    }

    class BookSearchContainer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$n, create_fragment$n, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BookSearchContainer",
    			options,
    			id: create_fragment$n.name
    		});
    	}
    }

    /* src/pages/Home.svelte generated by Svelte v3.44.1 */
    const file$k = "src/pages/Home.svelte";

    // (66:0) <MainLayout>
    function create_default_slot$6(ctx) {
    	let div2;
    	let section;
    	let div0;
    	let img0;
    	let img0_src_value;
    	let t0;
    	let p0;
    	let t1;
    	let t2;
    	let div1;
    	let img1;
    	let img1_src_value;
    	let t3;
    	let p1;
    	let t4;
    	let t5;
    	let usersearchcontainer;
    	let t6;
    	let booksearchcontainer;
    	let t7;
    	let recentbookscontainer;
    	let current;
    	let mounted;
    	let dispose;
    	usersearchcontainer = new UserSearchContainer({ $$inline: true });
    	booksearchcontainer = new BookSearchContainer({ $$inline: true });
    	recentbookscontainer = new RecentBooksContainer({ $$inline: true });

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			section = element("section");
    			div0 = element("div");
    			img0 = element("img");
    			t0 = space();
    			p0 = element("p");
    			t1 = text("Mis historias");
    			t2 = space();
    			div1 = element("div");
    			img1 = element("img");
    			t3 = space();
    			p1 = element("p");
    			t4 = text("Crear hitoria");
    			t5 = space();
    			create_component(usersearchcontainer.$$.fragment);
    			t6 = space();
    			create_component(booksearchcontainer.$$.fragment);
    			t7 = space();
    			create_component(recentbookscontainer.$$.fragment);
    			if (!src_url_equal(img0.src, img0_src_value = "assets/img/bookshelf-icon.png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "Mis historias");
    			attr_dev(img0, "class", "svelte-17tsqm3");
    			add_location(img0, file$k, 69, 8, 1410);
    			set_style(p0, "color", Theme.PALETTE.primary);
    			attr_dev(p0, "class", "create svelte-17tsqm3");
    			add_location(p0, file$k, 70, 8, 1482);
    			attr_dev(div0, "class", "cta-container svelte-17tsqm3");
    			add_location(div0, file$k, 68, 6, 1349);
    			if (!src_url_equal(img1.src, img1_src_value = "assets/img/create-icon.png")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "Crear historia");
    			attr_dev(img1, "class", "svelte-17tsqm3");
    			add_location(img1, file$k, 79, 8, 1705);
    			set_style(p1, "color", Theme.PALETTE.primary);
    			attr_dev(p1, "class", "create svelte-17tsqm3");
    			add_location(p1, file$k, 80, 8, 1775);
    			set_style(div1, "margin-left", "20px");
    			attr_dev(div1, "class", "cta-container svelte-17tsqm3");
    			add_location(div1, file$k, 75, 6, 1597);
    			attr_dev(section, "class", "cta-buttons-wrapper svelte-17tsqm3");
    			add_location(section, file$k, 67, 4, 1305);
    			attr_dev(div2, "class", "main-home-wrapper svelte-17tsqm3");
    			add_location(div2, file$k, 66, 2, 1269);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, section);
    			append_dev(section, div0);
    			append_dev(div0, img0);
    			append_dev(div0, t0);
    			append_dev(div0, p0);
    			append_dev(p0, t1);
    			append_dev(section, t2);
    			append_dev(section, div1);
    			append_dev(div1, img1);
    			append_dev(div1, t3);
    			append_dev(div1, p1);
    			append_dev(p1, t4);
    			append_dev(div2, t5);
    			mount_component(usersearchcontainer, div2, null);
    			append_dev(div2, t6);
    			mount_component(booksearchcontainer, div2, null);
    			append_dev(div2, t7);
    			mount_component(recentbookscontainer, div2, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*goToProfile*/ ctx[1], false, false, false),
    					listen_dev(div1, "click", /*goToForm*/ ctx[0], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(usersearchcontainer.$$.fragment, local);
    			transition_in(booksearchcontainer.$$.fragment, local);
    			transition_in(recentbookscontainer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(usersearchcontainer.$$.fragment, local);
    			transition_out(booksearchcontainer.$$.fragment, local);
    			transition_out(recentbookscontainer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(usersearchcontainer);
    			destroy_component(booksearchcontainer);
    			destroy_component(recentbookscontainer);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$6.name,
    		type: "slot",
    		source: "(66:0) <MainLayout>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$m(ctx) {
    	let t;
    	let mainlayout;
    	let current;

    	mainlayout = new Main({
    			props: {
    				$$slots: { default: [create_default_slot$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			t = space();
    			create_component(mainlayout.$$.fragment);
    			document.title = "Inicio";
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    			mount_component(mainlayout, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const mainlayout_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				mainlayout_changes.$$scope = { dirty, ctx };
    			}

    			mainlayout.$set(mainlayout_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mainlayout.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mainlayout.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    			destroy_component(mainlayout, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Home', slots, []);

    	onMount(() => {
    		setCurrentUser();
    	});

    	const goToForm = () => {
    		navigate("/create-book");
    	};

    	const goToProfile = () => {
    		navigate("/my-profile");
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Home> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		navigate,
    		MainLayout: Main,
    		Theme,
    		setCurrentUser,
    		RecentBooksContainer,
    		UserSearchContainer,
    		BookSearchContainer,
    		goToForm,
    		goToProfile
    	});

    	return [goToForm, goToProfile];
    }

    class Home extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$m, create_fragment$m, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Home",
    			options,
    			id: create_fragment$m.name
    		});
    	}
    }

    /* src/secure-routes/SecureHome.svelte generated by Svelte v3.44.1 */
    const file$j = "src/secure-routes/SecureHome.svelte";

    // (20:2) {#if canShow}
    function create_if_block$g(ctx) {
    	let home;
    	let current;
    	home = new Home({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(home.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(home, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(home.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(home.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(home, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$g.name,
    		type: "if",
    		source: "(20:2) {#if canShow}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let main;
    	let current;
    	let if_block = /*canShow*/ ctx[0] && create_if_block$g(ctx);

    	const block = {
    		c: function create() {
    			main = element("main");
    			if (if_block) if_block.c();
    			add_location(main, file$j, 18, 0, 302);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			if (if_block) if_block.m(main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*canShow*/ ctx[0]) {
    				if (if_block) {
    					if (dirty & /*canShow*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$g(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(main, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SecureHome', slots, []);
    	let canShow = false;

    	onMount(() => {
    		if (!user.is) {
    			navigate('/');
    			return;
    		}

    		$$invalidate(0, canShow = true);
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SecureHome> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ onMount, user, Home, navigate, canShow });

    	$$self.$inject_state = $$props => {
    		if ('canShow' in $$props) $$invalidate(0, canShow = $$props.canShow);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [canShow];
    }

    class SecureHome extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$l, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SecureHome",
    			options,
    			id: create_fragment$l.name
    		});
    	}
    }

    // Unique ID creation requires a high quality random # generator. In the browser we therefore
    // require the crypto API and do not support built-in fallback to lower quality random number
    // generators (like Math.random()).
    var getRandomValues;
    var rnds8 = new Uint8Array(16);
    function rng() {
      // lazy load so that environments that need to polyfill have a chance to do so
      if (!getRandomValues) {
        // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
        // find the complete implementation of crypto (msCrypto) on IE11.
        getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

        if (!getRandomValues) {
          throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
        }
      }

      return getRandomValues(rnds8);
    }

    var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

    function validate(uuid) {
      return typeof uuid === 'string' && REGEX.test(uuid);
    }

    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */

    var byteToHex = [];

    for (var i = 0; i < 256; ++i) {
      byteToHex.push((i + 0x100).toString(16).substr(1));
    }

    function stringify(arr) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      // Note: Be careful editing this code!  It's been tuned for performance
      // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
      var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
      // of the following:
      // - One or more input array values don't map to a hex octet (leading to
      // "undefined" in the uuid)
      // - Invalid input values for the RFC `version` or `variant` fields

      if (!validate(uuid)) {
        throw TypeError('Stringified UUID is invalid');
      }

      return uuid;
    }

    function v4(options, buf, offset) {
      options = options || {};
      var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

      rnds[6] = rnds[6] & 0x0f | 0x40;
      rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

      if (buf) {
        offset = offset || 0;

        for (var i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }

        return buf;
      }

      return stringify(rnds);
    }

    const getBookIdInRoute = (preIdPathName) => {
      const path = window.location.pathname.split("/");

      const preIdPathIndex = path.findIndex(
        (singlePath) => singlePath === preIdPathName
      );
      return path[preIdPathIndex + 1]
    };

    const generateGenericPageData = (date) => {
      return {
        views: [],
        content: "",
        createdAt: date,
        updatedAt: date,
      }
    };

    const addPageView = (pageId) => {
      const userId = user.is.epub;
      gun.get(pageId).once(async (_page) => {
        const page = await decryptData(_page.data);
        const pageViews = page.views;

        if (!pageViews.includes(userId)) {
          pageViews.push(userId);
          const pageNewData = await encryptData({
            ...page,
            views: pageViews,
          });

          gun.get(pageId).put({ data: pageNewData });
        }
      });
    };

    const generateGenericBookData = (date) => {
      return {
        views: [],
        likes: [],
        photo: "",
        published: false,
        createdAt: date,
        updatedAt: date,
      }
    };

    const addBookView = (bookId) => {
      const userId = user.is.epub;
      gun.get(bookId).once(async (_book) => {
        const book = await decryptData(_book.data);
        const bookViews = book.views;

        if (!bookViews.includes(userId)) {
          bookViews.push(userId);
          const bookNewData = await encryptData({
            ...book,
            views: bookViews,
          });

          gun.get(bookId).put({ data: bookNewData });
        }
      });
    };

    const updateBookLikes = (bookId) => {
      const userId = user.is.epub;
      gun.get(bookId).once(async (_book) => {
        const book = await decryptData(_book.data);
        let bookLikes = book.likes;

        if (!bookLikes.includes(userId)) {
          // Add like
          bookLikes.push(userId);
        } else {
          //Remove like
          bookLikes = bookLikes.filter((whoLiked) => whoLiked !== userId);
        }

        const bookNewData = await encryptData({
          ...book,
          likes: bookLikes,
        });

        gun.get(bookId).put({ data: bookNewData });
      });
    };

    // General update functions ==========================================================

    const updateBookField = (bookId, field, data) => {
      // Update book from user
      gun.get(bookId).once(async (_book) => {
        const book = await decryptData(_book.data);

        const newData = await encryptData({
          ...book,
          [field]: data,
        });

        gun.get(bookId).put({
          data: newData,
        });
      });
    };

    const updatePageField = (pageId, field, data) => {
      gun.get(pageId).once(async (_page) => {
        const page = await decryptData(_page.data);

        const newData = await encryptData({
          ...page,
          [field]: data,
        });

        gun.get(pageId).put({
          data: newData,
        });
      });
    };
    // ====================================================================================

    const createBook = async (title, description) => {
      const userId = user.is.epub;
      const currentBooks = gun.get(userId).get(BOOKS);
      const allBooks = gun.get(BOOKS);
      const bookId = v4();
      const pageId = v4();
      const date = new Date().getTime();

      const genericBookData = generateGenericBookData(date);
      const bookContent = await encryptData({
        id: bookId,
        title,
        description,
        createdBy: userId,
        ...genericBookData,
      });
      const newBook = gun.get(bookId).put({ data: bookContent });

      const genericPageInfo = generateGenericPageData(date);
      const pageContent = await encryptData({
        id: pageId,
        title: "Primera parte",
        ...genericPageInfo,
      });
      const firstPage = gun.get(pageId).put({ data: pageContent });

      newBook.get(PAGES).set(firstPage);
      currentBooks.set(newBook);
      allBooks.set(newBook);
      return bookId
    };

    const updateBookTimestamps = (bookId) => {
      const newDate = new Date().getTime();
      updateBookField(bookId, "updatedAt", newDate);
    };

    const createNewPage = async (bookId, callback) => {
      updateBookTimestamps(bookId);

      const pageId = v4();

      const genericPageInfo = generateGenericPageData(new Date().getTime());
      const pageContent = {
        id: pageId,
        title: "Nueva parte",
        ...genericPageInfo,
      };
      const encryptedContent = await encryptData(pageContent);
      const newPage = gun.get(pageId).put({ data: encryptedContent });

      const currentBook = gun.get(bookId);

      currentBook.get(PAGES).set(newPage);
      callback(pageContent);
    };

    const updatePageName = (bookId, pageId, newTitle) => {
      updateBookTimestamps(bookId);
      updatePageField(pageId, "title", newTitle);
    };

    const updatePageContent = (bookId, pageId, newContent) => {
      updateBookTimestamps(bookId);
      updatePageField(pageId, "content", newContent);
    };

    const deletePage = (bookId, pageId) => {
      updateBookTimestamps(bookId);
      const currentBook = gun.get(bookId);
      currentBook.get(PAGES).get(pageId).put(null);
    };

    const updateBookTitle = (bookId, newTitle) => {
      updateBookTimestamps(bookId);
      updateBookField(bookId, "title", newTitle);
    };

    const updateBookDescription = (bookId, newDescription) => {
      updateBookTimestamps(bookId);
      updateBookField(bookId, "description", newDescription);
    };

    const deleteBook = (bookId) => {
      gun.get(user.is.epub).get(BOOKS).get(bookId).put(null);
      gun.get(BOOKS).get(bookId).put(null);
    };

    const publishBook = (bookId, isPublished) => {
      updateBookField(bookId, "published", isPublished);
    };

    /* src/pages/BookForm.svelte generated by Svelte v3.44.1 */
    const file$i = "src/pages/BookForm.svelte";

    // (84:0) <MainLayout>
    function create_default_slot$5(ctx) {
    	let div2;
    	let h2;
    	let t1;
    	let form;
    	let div0;
    	let label0;
    	let t3;
    	let input;
    	let t4;
    	let div1;
    	let label1;
    	let t6;
    	let textarea;
    	let t7;
    	let span;
    	let t8_value = /*formData*/ ctx[0].description.length + "";
    	let t8;
    	let t9;
    	let t10;
    	let t11;
    	let button;
    	let t12;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			h2 = element("h2");
    			h2.textContent = "Crea una historia";
    			t1 = space();
    			form = element("form");
    			div0 = element("div");
    			label0 = element("label");
    			label0.textContent = "Título";
    			t3 = space();
    			input = element("input");
    			t4 = space();
    			div1 = element("div");
    			label1 = element("label");
    			label1.textContent = "Descripción";
    			t6 = space();
    			textarea = element("textarea");
    			t7 = space();
    			span = element("span");
    			t8 = text(t8_value);
    			t9 = text("/");
    			t10 = text(/*maxDescriptionLength*/ ctx[1]);
    			t11 = space();
    			button = element("button");
    			t12 = text("Crear");
    			add_location(h2, file$i, 85, 4, 1412);
    			attr_dev(label0, "for", "title");
    			attr_dev(label0, "class", "svelte-5vzxwv");
    			add_location(label0, file$i, 89, 8, 1513);
    			attr_dev(input, "id", "title");
    			attr_dev(input, "placeholder", "Escribe el título...");
    			attr_dev(input, "class", "svelte-5vzxwv");
    			add_location(input, file$i, 90, 8, 1555);
    			add_location(div0, file$i, 88, 6, 1499);
    			attr_dev(label1, "for", "title");
    			attr_dev(label1, "class", "svelte-5vzxwv");
    			add_location(label1, file$i, 97, 8, 1730);
    			attr_dev(textarea, "rows", "5");
    			attr_dev(textarea, "id", "description");
    			attr_dev(textarea, "maxlength", /*maxDescriptionLength*/ ctx[1]);
    			attr_dev(textarea, "placeholder", "Escribe una descripción...");
    			attr_dev(textarea, "class", "svelte-5vzxwv");
    			add_location(textarea, file$i, 98, 8, 1777);
    			attr_dev(span, "class", "word-counter svelte-5vzxwv");
    			add_location(span, file$i, 105, 8, 1996);
    			attr_dev(div1, "class", "textarea-wrapper svelte-5vzxwv");
    			add_location(div1, file$i, 96, 6, 1691);
    			set_style(button, "background", Theme.PALETTE.primary);
    			attr_dev(button, "class", "svelte-5vzxwv");
    			add_location(button, file$i, 109, 6, 2114);
    			attr_dev(form, "class", "svelte-5vzxwv");
    			add_location(form, file$i, 87, 4, 1444);
    			attr_dev(div2, "class", "book-form-wrapper svelte-5vzxwv");
    			add_location(div2, file$i, 84, 2, 1376);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, h2);
    			append_dev(div2, t1);
    			append_dev(div2, form);
    			append_dev(form, div0);
    			append_dev(div0, label0);
    			append_dev(div0, t3);
    			append_dev(div0, input);
    			set_input_value(input, /*formData*/ ctx[0].title);
    			append_dev(form, t4);
    			append_dev(form, div1);
    			append_dev(div1, label1);
    			append_dev(div1, t6);
    			append_dev(div1, textarea);
    			set_input_value(textarea, /*formData*/ ctx[0].description);
    			append_dev(div1, t7);
    			append_dev(div1, span);
    			append_dev(span, t8);
    			append_dev(span, t9);
    			append_dev(span, t10);
    			append_dev(form, t11);
    			append_dev(form, button);
    			append_dev(button, t12);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[3]),
    					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[4]),
    					listen_dev(form, "submit", prevent_default(/*handleSubmit*/ ctx[2]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*formData*/ 1 && input.value !== /*formData*/ ctx[0].title) {
    				set_input_value(input, /*formData*/ ctx[0].title);
    			}

    			if (dirty & /*formData*/ 1) {
    				set_input_value(textarea, /*formData*/ ctx[0].description);
    			}

    			if (dirty & /*formData*/ 1 && t8_value !== (t8_value = /*formData*/ ctx[0].description.length + "")) set_data_dev(t8, t8_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$5.name,
    		type: "slot",
    		source: "(84:0) <MainLayout>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let t;
    	let mainlayout;
    	let current;

    	mainlayout = new Main({
    			props: {
    				$$slots: { default: [create_default_slot$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			t = space();
    			create_component(mainlayout.$$.fragment);
    			document.title = "Crear nueva historia";
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    			mount_component(mainlayout, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const mainlayout_changes = {};

    			if (dirty & /*$$scope, formData*/ 33) {
    				mainlayout_changes.$$scope = { dirty, ctx };
    			}

    			mainlayout.$set(mainlayout_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mainlayout.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mainlayout.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    			destroy_component(mainlayout, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BookForm', slots, []);
    	let maxDescriptionLength = MAX_DESCRIPTION_LENGTH;
    	let formData = { title: "", description: "" };

    	const handleSubmit = async () => {
    		if (!formData.title.trim().length) {
    			alert("Escribe un título");
    			return;
    		}

    		if (!formData.description.trim().length) {
    			alert("Escribe una descripción");
    			return;
    		}

    		const bookId = await createBook(formData.title, formData.description);
    		navigate(`/my-books/${bookId}`);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BookForm> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		formData.title = this.value;
    		$$invalidate(0, formData);
    	}

    	function textarea_input_handler() {
    		formData.description = this.value;
    		$$invalidate(0, formData);
    	}

    	$$self.$capture_state = () => ({
    		MainLayout: Main,
    		Theme,
    		navigate,
    		createBook,
    		MAX_DESCRIPTION_LENGTH,
    		user,
    		maxDescriptionLength,
    		formData,
    		handleSubmit
    	});

    	$$self.$inject_state = $$props => {
    		if ('maxDescriptionLength' in $$props) $$invalidate(1, maxDescriptionLength = $$props.maxDescriptionLength);
    		if ('formData' in $$props) $$invalidate(0, formData = $$props.formData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		formData,
    		maxDescriptionLength,
    		handleSubmit,
    		input_input_handler,
    		textarea_input_handler
    	];
    }

    class BookForm extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$k, create_fragment$k, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BookForm",
    			options,
    			id: create_fragment$k.name
    		});
    	}
    }

    /* src/secure-routes/SecureBookForm.svelte generated by Svelte v3.44.1 */
    const file$h = "src/secure-routes/SecureBookForm.svelte";

    // (21:2) {#if canShow}
    function create_if_block$f(ctx) {
    	let bookform;
    	let current;
    	bookform = new BookForm({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(bookform.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(bookform, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(bookform.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(bookform.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(bookform, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(21:2) {#if canShow}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let main;
    	let current;
    	let if_block = /*canShow*/ ctx[0] && create_if_block$f(ctx);

    	const block = {
    		c: function create() {
    			main = element("main");
    			if (if_block) if_block.c();
    			add_location(main, file$h, 19, 0, 284);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			if (if_block) if_block.m(main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*canShow*/ ctx[0]) {
    				if (if_block) {
    					if (dirty & /*canShow*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$f(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(main, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SecureBookForm', slots, []);
    	let canShow = false;

    	onMount(() => {
    		if (!user.is) {
    			navigate("/");
    			return;
    		}

    		$$invalidate(0, canShow = true);
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SecureBookForm> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		user,
    		navigate,
    		BookForm,
    		canShow
    	});

    	$$self.$inject_state = $$props => {
    		if ('canShow' in $$props) $$invalidate(0, canShow = $$props.canShow);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [canShow];
    }

    class SecureBookForm extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SecureBookForm",
    			options,
    			id: create_fragment$j.name
    		});
    	}
    }

    /* src/components/Stats.svelte generated by Svelte v3.44.1 */
    const file$g = "src/components/Stats.svelte";

    // (21:2) {#if !justViews}
    function create_if_block$e(ctx) {
    	let div;
    	let i;
    	let t0;
    	let span;
    	let t1_value = numberParsed(/*likes*/ ctx[1]) + "";
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			i = element("i");
    			t0 = space();
    			span = element("span");
    			t1 = text(t1_value);
    			attr_dev(i, "class", "mi mi-heart");
    			set_style(i, "font-size", "20px");
    			set_style(i, "align-self", "center");
    			set_style(i, "margin-right", "5px");
    			set_style(i, "color", Theme.PALETTE.gray);
    			add_location(i, file$g, 22, 6, 632);
    			set_style(span, "color", Theme.PALETTE.gray);
    			set_style(span, "font-weight", "500");
    			add_location(span, file$g, 26, 6, 785);
    			set_style(div, "display", "flex");
    			set_style(div, "margin-left", "20px");
    			add_location(div, file$g, 21, 4, 580);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, i);
    			append_dev(div, t0);
    			append_dev(div, span);
    			append_dev(span, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*likes*/ 2 && t1_value !== (t1_value = numberParsed(/*likes*/ ctx[1]) + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(21:2) {#if !justViews}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let div1;
    	let div0;
    	let i;
    	let t0;
    	let span;
    	let t1_value = numberParsed(/*views*/ ctx[0]) + "";
    	let t1;
    	let t2;
    	let if_block = !/*justViews*/ ctx[2] && create_if_block$e(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			i = element("i");
    			t0 = space();
    			span = element("span");
    			t1 = text(t1_value);
    			t2 = space();
    			if (if_block) if_block.c();
    			attr_dev(i, "class", "mi mi-eye");
    			set_style(i, "font-size", "20px");
    			set_style(i, "align-self", "center");
    			set_style(i, "margin-right", "5px");
    			set_style(i, "color", Theme.PALETTE.gray);
    			add_location(i, file$g, 12, 4, 309);
    			set_style(span, "color", Theme.PALETTE.gray);
    			set_style(span, "font-weight", "500");
    			add_location(span, file$g, 16, 4, 452);
    			set_style(div0, "display", "flex");
    			add_location(div0, file$g, 11, 2, 277);
    			set_style(div1, "display", "flex");
    			set_style(div1, "justify-content", "flex-start");
    			set_style(div1, "align-items", "center");
    			set_style(div1, "margin-top", "5px");
    			add_location(div1, file$g, 9, 0, 178);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, i);
    			append_dev(div0, t0);
    			append_dev(div0, span);
    			append_dev(span, t1);
    			append_dev(div1, t2);
    			if (if_block) if_block.m(div1, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*views*/ 1 && t1_value !== (t1_value = numberParsed(/*views*/ ctx[0]) + "")) set_data_dev(t1, t1_value);

    			if (!/*justViews*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$e(ctx);
    					if_block.c();
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Stats', slots, []);
    	let { views = 0 } = $$props;
    	let { likes = 0 } = $$props;
    	let { justViews = false } = $$props;
    	const writable_props = ['views', 'likes', 'justViews'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Stats> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('views' in $$props) $$invalidate(0, views = $$props.views);
    		if ('likes' in $$props) $$invalidate(1, likes = $$props.likes);
    		if ('justViews' in $$props) $$invalidate(2, justViews = $$props.justViews);
    	};

    	$$self.$capture_state = () => ({
    		Theme,
    		numberParsed,
    		views,
    		likes,
    		justViews
    	});

    	$$self.$inject_state = $$props => {
    		if ('views' in $$props) $$invalidate(0, views = $$props.views);
    		if ('likes' in $$props) $$invalidate(1, likes = $$props.likes);
    		if ('justViews' in $$props) $$invalidate(2, justViews = $$props.justViews);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [views, likes, justViews];
    }

    class Stats extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, { views: 0, likes: 1, justViews: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Stats",
    			options,
    			id: create_fragment$i.name
    		});
    	}

    	get views() {
    		throw new Error("<Stats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set views(value) {
    		throw new Error("<Stats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get likes() {
    		throw new Error("<Stats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set likes(value) {
    		throw new Error("<Stats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get justViews() {
    		throw new Error("<Stats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set justViews(value) {
    		throw new Error("<Stats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/pages/Book.svelte generated by Svelte v3.44.1 */
    const file$f = "src/pages/Book.svelte";

    // (151:0) {#if showBook}
    function create_if_block$d(ctx) {
    	let mainlayout;
    	let current;

    	mainlayout = new Main({
    			props: {
    				logoPath: logoPath$2,
    				$$slots: { default: [create_default_slot$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mainlayout.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mainlayout, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mainlayout_changes = {};

    			if (dirty & /*$$scope, currentBook, myUser, bookAuthor, pages*/ 285) {
    				mainlayout_changes.$$scope = { dirty, ctx };
    			}

    			mainlayout.$set(mainlayout_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mainlayout.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mainlayout.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mainlayout, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(151:0) {#if showBook}",
    		ctx
    	});

    	return block;
    }

    // (172:8) {#if bookAuthor.uuid !== myUser.uuid}
    function create_if_block_1$7(ctx) {
    	let show_if;
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (show_if == null || dirty & /*currentBook, myUser*/ 5) show_if = !!/*currentBook*/ ctx[0].likes.includes(/*myUser*/ ctx[2].uuid);
    		if (show_if) return create_if_block_2$3;
    		return create_else_block$4;
    	}

    	let current_block_type = select_block_type(ctx, -1);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(172:8) {#if bookAuthor.uuid !== myUser.uuid}",
    		ctx
    	});

    	return block;
    }

    // (179:10) {:else}
    function create_else_block$4(ctx) {
    	let img;
    	let img_src_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "svg/outline-heart.svg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "heart");
    			attr_dev(img, "class", "heart-icon svelte-1odt6uv");
    			add_location(img, file$f, 179, 12, 3828);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);

    			if (!mounted) {
    				dispose = listen_dev(img, "click", /*handleBookLikesUpdate*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(179:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (173:10) {#if currentBook.likes.includes(myUser.uuid)}
    function create_if_block_2$3(ctx) {
    	let img;
    	let img_src_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "svg/filled-heart.svg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "heart");
    			attr_dev(img, "class", "heart-icon svelte-1odt6uv");
    			add_location(img, file$f, 173, 12, 3641);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);

    			if (!mounted) {
    				dispose = listen_dev(img, "click", /*handleBookLikesUpdate*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(173:10) {#if currentBook.likes.includes(myUser.uuid)}",
    		ctx
    	});

    	return block;
    }

    // (152:2) <MainLayout logoPath="{logoPath}">
    function create_default_slot$4(ctx) {
    	let div2;
    	let div1;
    	let section0;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t0;
    	let span0;
    	let t1;
    	let t2_value = /*bookAuthor*/ ctx[4].nickname + "";
    	let t2;
    	let t3;
    	let div0;
    	let stats;
    	let t4;
    	let section1;
    	let h2;
    	let t5_value = /*currentBook*/ ctx[0].title + "";
    	let t5;
    	let t6;
    	let p;
    	let t7_value = /*currentBook*/ ctx[0].description + "";
    	let t7;
    	let t8;
    	let span1;
    	let t9_value = /*pages*/ ctx[3].length + "";
    	let t9;
    	let t10;
    	let t11;
    	let t12;
    	let button;
    	let t13;
    	let current;
    	let mounted;
    	let dispose;

    	stats = new Stats({
    			props: {
    				views: /*currentBook*/ ctx[0].views.length,
    				likes: /*currentBook*/ ctx[0].likes.length
    			},
    			$$inline: true
    		});

    	let if_block = /*bookAuthor*/ ctx[4].uuid !== /*myUser*/ ctx[2].uuid && create_if_block_1$7(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			section0 = element("section");
    			img = element("img");
    			t0 = space();
    			span0 = element("span");
    			t1 = text("Escrito por @");
    			t2 = text(t2_value);
    			t3 = space();
    			div0 = element("div");
    			create_component(stats.$$.fragment);
    			t4 = space();
    			section1 = element("section");
    			h2 = element("h2");
    			t5 = text(t5_value);
    			t6 = space();
    			p = element("p");
    			t7 = text(t7_value);
    			t8 = space();
    			span1 = element("span");
    			t9 = text(t9_value);
    			t10 = text(" partes");
    			t11 = space();
    			if (if_block) if_block.c();
    			t12 = space();
    			button = element("button");
    			t13 = text("Empezar a leer");
    			if (!src_url_equal(img.src, img_src_value = /*bookAuthor*/ ctx[4].photo)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*bookAuthor*/ ctx[4].nickname);
    			attr_dev(img, "class", "svelte-1odt6uv");
    			add_location(img, file$f, 155, 10, 3020);
    			attr_dev(span0, "class", "svelte-1odt6uv");
    			add_location(span0, file$f, 156, 10, 3091);
    			attr_dev(div0, "class", "stats-section  svelte-1odt6uv");
    			add_location(div0, file$f, 158, 10, 3150);
    			attr_dev(section0, "class", "avatar-section svelte-1odt6uv");
    			add_location(section0, file$f, 154, 8, 2977);
    			attr_dev(h2, "class", "svelte-1odt6uv");
    			add_location(h2, file$f, 166, 10, 3390);
    			attr_dev(p, "class", "svelte-1odt6uv");
    			add_location(p, file$f, 167, 10, 3429);
    			attr_dev(span1, "class", "svelte-1odt6uv");
    			add_location(span1, file$f, 168, 10, 3472);
    			attr_dev(section1, "class", "book-info-section svelte-1odt6uv");
    			add_location(section1, file$f, 165, 8, 3344);
    			attr_dev(div1, "class", "book-container svelte-1odt6uv");
    			add_location(div1, file$f, 153, 6, 2940);
    			set_style(button, "background-color", Theme.PALETTE.primary);
    			attr_dev(button, "class", "svelte-1odt6uv");
    			add_location(button, file$f, 188, 6, 4036);
    			attr_dev(div2, "class", "main-wrapper svelte-1odt6uv");
    			add_location(div2, file$f, 152, 4, 2907);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, section0);
    			append_dev(section0, img);
    			append_dev(section0, t0);
    			append_dev(section0, span0);
    			append_dev(span0, t1);
    			append_dev(span0, t2);
    			append_dev(section0, t3);
    			append_dev(section0, div0);
    			mount_component(stats, div0, null);
    			append_dev(div1, t4);
    			append_dev(div1, section1);
    			append_dev(section1, h2);
    			append_dev(h2, t5);
    			append_dev(section1, t6);
    			append_dev(section1, p);
    			append_dev(p, t7);
    			append_dev(section1, t8);
    			append_dev(section1, span1);
    			append_dev(span1, t9);
    			append_dev(span1, t10);
    			append_dev(div1, t11);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div2, t12);
    			append_dev(div2, button);
    			append_dev(button, t13);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*goToPage*/ ctx[6], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*bookAuthor*/ 16 && !src_url_equal(img.src, img_src_value = /*bookAuthor*/ ctx[4].photo)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (!current || dirty & /*bookAuthor*/ 16 && img_alt_value !== (img_alt_value = /*bookAuthor*/ ctx[4].nickname)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if ((!current || dirty & /*bookAuthor*/ 16) && t2_value !== (t2_value = /*bookAuthor*/ ctx[4].nickname + "")) set_data_dev(t2, t2_value);
    			const stats_changes = {};
    			if (dirty & /*currentBook*/ 1) stats_changes.views = /*currentBook*/ ctx[0].views.length;
    			if (dirty & /*currentBook*/ 1) stats_changes.likes = /*currentBook*/ ctx[0].likes.length;
    			stats.$set(stats_changes);
    			if ((!current || dirty & /*currentBook*/ 1) && t5_value !== (t5_value = /*currentBook*/ ctx[0].title + "")) set_data_dev(t5, t5_value);
    			if ((!current || dirty & /*currentBook*/ 1) && t7_value !== (t7_value = /*currentBook*/ ctx[0].description + "")) set_data_dev(t7, t7_value);
    			if ((!current || dirty & /*pages*/ 8) && t9_value !== (t9_value = /*pages*/ ctx[3].length + "")) set_data_dev(t9, t9_value);

    			if (/*bookAuthor*/ ctx[4].uuid !== /*myUser*/ ctx[2].uuid) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$7(ctx);
    					if_block.c();
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stats.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stats.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(stats);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(152:2) <MainLayout logoPath=\\\"{logoPath}\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*showBook*/ ctx[1] && create_if_block$d(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*showBook*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*showBook*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$d(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const logoPath$2 = "images/dbook-logo.svg";

    function instance$h($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Book', slots, []);
    	let { bookId } = $$props;
    	let currentBook;
    	let showBook = false;
    	let myUser;
    	let pages = [];
    	let bookAuthor = "";

    	onMount(() => {
    		// Get book
    		gun.get(bookId).on(async _book => {
    			if (_book) {
    				const book = await decryptData(_book.data);
    				$$invalidate(0, currentBook = book);

    				// If not published go yo home (in case of getting from url)
    				if (!book.published) {
    					navigate("/home");
    				}

    				// Get book author
    				gun.get(book.createdBy).once(async _author => {
    					const author = await decryptData(_author.data);
    					$$invalidate(4, bookAuthor = author);
    					$$invalidate(1, showBook = true);
    				});
    			}
    		});

    		// Count book pages
    		gun.get(bookId).get(PAGES).map().once(async _page => {
    			if (_page) {
    				const page = await decryptData(_page.data);
    				$$invalidate(3, pages = [...pages, page]);
    			}
    		});
    	});

    	currentUser.subscribe(_user => {
    		$$invalidate(2, myUser = _user);
    	});

    	const handleBookLikesUpdate = () => {
    		updateBookLikes(bookId);
    	};

    	const goToPage = () => {
    		currentBook.createdBy !== myUser.uuid && addBookView(bookId);
    		navigate(`/book/${bookId}/pages`);
    	};

    	const writable_props = ['bookId'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Book> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('bookId' in $$props) $$invalidate(7, bookId = $$props.bookId);
    	};

    	$$self.$capture_state = () => ({
    		MainLayout: Main,
    		gun,
    		decryptData,
    		onMount,
    		currentUser,
    		PAGES,
    		Theme,
    		Stats,
    		navigate,
    		updateBookLikes,
    		addBookView,
    		logoPath: logoPath$2,
    		bookId,
    		currentBook,
    		showBook,
    		myUser,
    		pages,
    		bookAuthor,
    		handleBookLikesUpdate,
    		goToPage
    	});

    	$$self.$inject_state = $$props => {
    		if ('bookId' in $$props) $$invalidate(7, bookId = $$props.bookId);
    		if ('currentBook' in $$props) $$invalidate(0, currentBook = $$props.currentBook);
    		if ('showBook' in $$props) $$invalidate(1, showBook = $$props.showBook);
    		if ('myUser' in $$props) $$invalidate(2, myUser = $$props.myUser);
    		if ('pages' in $$props) $$invalidate(3, pages = $$props.pages);
    		if ('bookAuthor' in $$props) $$invalidate(4, bookAuthor = $$props.bookAuthor);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		currentBook,
    		showBook,
    		myUser,
    		pages,
    		bookAuthor,
    		handleBookLikesUpdate,
    		goToPage,
    		bookId
    	];
    }

    class Book extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, { bookId: 7 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Book",
    			options,
    			id: create_fragment$h.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*bookId*/ ctx[7] === undefined && !('bookId' in props)) {
    			console.warn("<Book> was created without expected prop 'bookId'");
    		}
    	}

    	get bookId() {
    		throw new Error("<Book>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set bookId(value) {
    		throw new Error("<Book>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/secure-routes/SecureBook.svelte generated by Svelte v3.44.1 */
    const file$e = "src/secure-routes/SecureBook.svelte";

    // (24:2) {#if canShow}
    function create_if_block$c(ctx) {
    	let book;
    	let current;

    	book = new Book({
    			props: { bookId: /*id*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(book.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(book, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const book_changes = {};
    			if (dirty & /*id*/ 1) book_changes.bookId = /*id*/ ctx[0];
    			book.$set(book_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(book.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(book.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(book, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(24:2) {#if canShow}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let main;
    	let current;
    	let if_block = /*canShow*/ ctx[1] && create_if_block$c(ctx);

    	const block = {
    		c: function create() {
    			main = element("main");
    			if (if_block) if_block.c();
    			add_location(main, file$e, 22, 0, 292);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			if (if_block) if_block.m(main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*canShow*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*canShow*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$c(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(main, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SecureBook', slots, []);
    	let canShow = false;
    	let { id } = $$props;

    	onMount(() => {
    		if (!user.is) {
    			navigate("/");
    			return;
    		}

    		$$invalidate(1, canShow = true);
    	});

    	const writable_props = ['id'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SecureBook> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    	};

    	$$self.$capture_state = () => ({
    		navigate,
    		onMount,
    		user,
    		Book,
    		canShow,
    		id
    	});

    	$$self.$inject_state = $$props => {
    		if ('canShow' in $$props) $$invalidate(1, canShow = $$props.canShow);
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [id, canShow];
    }

    class SecureBook extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, { id: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SecureBook",
    			options,
    			id: create_fragment$g.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[0] === undefined && !('id' in props)) {
    			console.warn("<SecureBook> was created without expected prop 'id'");
    		}
    	}

    	get id() {
    		throw new Error("<SecureBook>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<SecureBook>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const currentSelectedPage = writable({
      id: "",
      title: "",
      content: "",
    });

    const currentPageIndex = writable(0);

    const isEmptyBook = writable(false);

    /* src/containers/PagesContainer.svelte generated by Svelte v3.44.1 */

    const { Object: Object_1$1 } = globals;
    const file$d = "src/containers/PagesContainer.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	child_ctx[11] = i;
    	return child_ctx;
    }

    // (129:2) {#if reactiveAllPages.length > 0}
    function create_if_block$b(ctx) {
    	let ul;
    	let each_value = /*reactiveAllPages*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(ul, "class", "svelte-kdnkxu");
    			add_location(ul, file$d, 129, 4, 2559);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*currentIndex, Theme, selectPage, reactiveAllPages, quoteShortener*/ 11) {
    				each_value = /*reactiveAllPages*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(129:2) {#if reactiveAllPages.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (131:6) {#each reactiveAllPages as page, index}
    function create_each_block$1(ctx) {
    	let li;
    	let t0_value = quoteShortener(/*page*/ ctx[9].title, 25) + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[5](/*page*/ ctx[9], /*index*/ ctx[11]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			t0 = text(t0_value);
    			t1 = space();

    			set_style(li, "color", /*index*/ ctx[11] === /*currentIndex*/ ctx[0]
    			? Theme.PALETTE.primary
    			: 'black');

    			set_style(li, "font-weight", /*index*/ ctx[11] === /*currentIndex*/ ctx[0]
    			? '500'
    			: '400');

    			attr_dev(li, "class", "svelte-kdnkxu");
    			add_location(li, file$d, 131, 8, 2618);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t0);
    			append_dev(li, t1);

    			if (!mounted) {
    				dispose = listen_dev(li, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*reactiveAllPages*/ 2 && t0_value !== (t0_value = quoteShortener(/*page*/ ctx[9].title, 25) + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*currentIndex*/ 1) {
    				set_style(li, "color", /*index*/ ctx[11] === /*currentIndex*/ ctx[0]
    				? Theme.PALETTE.primary
    				: 'black');
    			}

    			if (dirty & /*currentIndex*/ 1) {
    				set_style(li, "font-weight", /*index*/ ctx[11] === /*currentIndex*/ ctx[0]
    				? '500'
    				: '400');
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(131:6) {#each reactiveAllPages as page, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let main;
    	let button;
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;
    	let if_block = /*reactiveAllPages*/ ctx[1].length > 0 && create_if_block$b(ctx);

    	const block = {
    		c: function create() {
    			main = element("main");
    			button = element("button");
    			t0 = text("Crear parte +");
    			t1 = space();
    			if (if_block) if_block.c();
    			set_style(button, "background-color", Theme.PALETTE.primary);
    			attr_dev(button, "class", "svelte-kdnkxu");
    			add_location(button, file$d, 122, 2, 2394);
    			attr_dev(main, "class", "svelte-kdnkxu");
    			add_location(main, file$d, 121, 0, 2385);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, button);
    			append_dev(button, t0);
    			append_dev(main, t1);
    			if (if_block) if_block.m(main, null);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*createNewPart*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*reactiveAllPages*/ ctx[1].length > 0) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$b(ctx);
    					if_block.c();
    					if_block.m(main, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let reactiveAllPages;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PagesContainer', slots, []);
    	let store = {};
    	let currentPage;
    	let currentIndex = 0;
    	const bookId = getBookIdInRoute("my-books");

    	currentSelectedPage.subscribe(sP => {
    		currentPage = sP;
    	});

    	currentPageIndex.subscribe(index => $$invalidate(0, currentIndex = index));

    	onMount(() => {
    		gun.get(bookId).get(PAGES).map().on(async (_page, key) => {
    			if (_page) {
    				const page = await decryptData(_page.data);
    				$$invalidate(4, store[key] = page, store);
    			} else {
    				delete store[key];
    				$$invalidate(4, store);
    			}
    		});
    	});

    	const selectAfterCreating = pageContent => {
    		setTimeout(
    			() => {
    				selectPage(pageContent, reactiveAllPages.length - 1);
    			},
    			10
    		);
    	};

    	const createNewPart = async () => {
    		await createNewPage(bookId, selectAfterCreating);
    	};

    	const selectPage = (selectedPage, index) => {
    		currentPageIndex.set(index);
    		currentSelectedPage.set(selectedPage);
    	};

    	const writable_props = [];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PagesContainer> was created with unknown prop '${key}'`);
    	});

    	const click_handler = (page, index) => selectPage(page, index);

    	$$self.$capture_state = () => ({
    		onMount,
    		gun,
    		getBookIdInRoute,
    		PAGES,
    		currentSelectedPage,
    		currentPageIndex,
    		isEmptyBook,
    		Theme,
    		quoteShortener,
    		createNewPage,
    		decryptData,
    		store,
    		currentPage,
    		currentIndex,
    		bookId,
    		selectAfterCreating,
    		createNewPart,
    		selectPage,
    		reactiveAllPages
    	});

    	$$self.$inject_state = $$props => {
    		if ('store' in $$props) $$invalidate(4, store = $$props.store);
    		if ('currentPage' in $$props) currentPage = $$props.currentPage;
    		if ('currentIndex' in $$props) $$invalidate(0, currentIndex = $$props.currentIndex);
    		if ('reactiveAllPages' in $$props) $$invalidate(1, reactiveAllPages = $$props.reactiveAllPages);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*store*/ 16) {
    			$$invalidate(1, reactiveAllPages = Object.values(store).sort((a, b) => a.createdAt - b.createdAt));
    		}

    		if ($$self.$$.dirty & /*reactiveAllPages, currentIndex*/ 3) {
    			{
    				if (reactiveAllPages.filter(Boolean).length) {
    					isEmptyBook.set(false);

    					// Doing this cuz of the reacting behaviour from 2 sources, reactiveAllPages and currentIndex
    					const index = reactiveAllPages[currentIndex]
    					? currentIndex
    					: reactiveAllPages.length - 1;

    					const { id, title, content } = reactiveAllPages[index];
    					currentSelectedPage.update(sP => ({ ...sP, title, id, content }));
    					currentPageIndex.set(index);
    				} else {
    					isEmptyBook.set(true);
    				}
    			}
    		}
    	};

    	return [
    		currentIndex,
    		reactiveAllPages,
    		createNewPart,
    		selectPage,
    		store,
    		click_handler
    	];
    }

    class PagesContainer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PagesContainer",
    			options,
    			id: create_fragment$f.name
    		});
    	}
    }

    var index_umd = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
    	factory(exports) ;
    }(commonjsGlobal, (function (exports) {
    	var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof self !== 'undefined' ? self : {};

    	function unwrapExports (x) {
    		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    	}

    	function createCommonjsModule(fn, module) {
    		return module = { exports: {} }, fn(module, module.exports), module.exports;
    	}

    	var quill = createCommonjsModule(function (module, exports) {
    	/*!
    	 * Quill Editor v1.3.7
    	 * https://quilljs.com/
    	 * Copyright (c) 2014, Jason Chen
    	 * Copyright (c) 2013, salesforce.com
    	 */
    	(function webpackUniversalModuleDefinition(root, factory) {
    		module.exports = factory();
    	})(typeof self !== 'undefined' ? self : commonjsGlobal$1, function() {
    	return /******/ (function(modules) { // webpackBootstrap
    	/******/ 	// The module cache
    	/******/ 	var installedModules = {};
    	/******/
    	/******/ 	// The require function
    	/******/ 	function __webpack_require__(moduleId) {
    	/******/
    	/******/ 		// Check if module is in cache
    	/******/ 		if(installedModules[moduleId]) {
    	/******/ 			return installedModules[moduleId].exports;
    	/******/ 		}
    	/******/ 		// Create a new module (and put it into the cache)
    	/******/ 		var module = installedModules[moduleId] = {
    	/******/ 			i: moduleId,
    	/******/ 			l: false,
    	/******/ 			exports: {}
    	/******/ 		};
    	/******/
    	/******/ 		// Execute the module function
    	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    	/******/
    	/******/ 		// Flag the module as loaded
    	/******/ 		module.l = true;
    	/******/
    	/******/ 		// Return the exports of the module
    	/******/ 		return module.exports;
    	/******/ 	}
    	/******/
    	/******/
    	/******/ 	// expose the modules object (__webpack_modules__)
    	/******/ 	__webpack_require__.m = modules;
    	/******/
    	/******/ 	// expose the module cache
    	/******/ 	__webpack_require__.c = installedModules;
    	/******/
    	/******/ 	// define getter function for harmony exports
    	/******/ 	__webpack_require__.d = function(exports, name, getter) {
    	/******/ 		if(!__webpack_require__.o(exports, name)) {
    	/******/ 			Object.defineProperty(exports, name, {
    	/******/ 				configurable: false,
    	/******/ 				enumerable: true,
    	/******/ 				get: getter
    	/******/ 			});
    	/******/ 		}
    	/******/ 	};
    	/******/
    	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
    	/******/ 	__webpack_require__.n = function(module) {
    	/******/ 		var getter = module && module.__esModule ?
    	/******/ 			function getDefault() { return module['default']; } :
    	/******/ 			function getModuleExports() { return module; };
    	/******/ 		__webpack_require__.d(getter, 'a', getter);
    	/******/ 		return getter;
    	/******/ 	};
    	/******/
    	/******/ 	// Object.prototype.hasOwnProperty.call
    	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    	/******/
    	/******/ 	// __webpack_public_path__
    	/******/ 	__webpack_require__.p = "";
    	/******/
    	/******/ 	// Load entry module and return exports
    	/******/ 	return __webpack_require__(__webpack_require__.s = 109);
    	/******/ })
    	/************************************************************************/
    	/******/ ([
    	/* 0 */
    	/***/ (function(module, exports, __webpack_require__) {

    	Object.defineProperty(exports, "__esModule", { value: true });
    	var container_1 = __webpack_require__(17);
    	var format_1 = __webpack_require__(18);
    	var leaf_1 = __webpack_require__(19);
    	var scroll_1 = __webpack_require__(45);
    	var inline_1 = __webpack_require__(46);
    	var block_1 = __webpack_require__(47);
    	var embed_1 = __webpack_require__(48);
    	var text_1 = __webpack_require__(49);
    	var attributor_1 = __webpack_require__(12);
    	var class_1 = __webpack_require__(32);
    	var style_1 = __webpack_require__(33);
    	var store_1 = __webpack_require__(31);
    	var Registry = __webpack_require__(1);
    	var Parchment = {
    	    Scope: Registry.Scope,
    	    create: Registry.create,
    	    find: Registry.find,
    	    query: Registry.query,
    	    register: Registry.register,
    	    Container: container_1.default,
    	    Format: format_1.default,
    	    Leaf: leaf_1.default,
    	    Embed: embed_1.default,
    	    Scroll: scroll_1.default,
    	    Block: block_1.default,
    	    Inline: inline_1.default,
    	    Text: text_1.default,
    	    Attributor: {
    	        Attribute: attributor_1.default,
    	        Class: class_1.default,
    	        Style: style_1.default,
    	        Store: store_1.default,
    	    },
    	};
    	exports.default = Parchment;


    	/***/ }),
    	/* 1 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var ParchmentError = /** @class */ (function (_super) {
    	    __extends(ParchmentError, _super);
    	    function ParchmentError(message) {
    	        var _this = this;
    	        message = '[Parchment] ' + message;
    	        _this = _super.call(this, message) || this;
    	        _this.message = message;
    	        _this.name = _this.constructor.name;
    	        return _this;
    	    }
    	    return ParchmentError;
    	}(Error));
    	exports.ParchmentError = ParchmentError;
    	var attributes = {};
    	var classes = {};
    	var tags = {};
    	var types = {};
    	exports.DATA_KEY = '__blot';
    	var Scope;
    	(function (Scope) {
    	    Scope[Scope["TYPE"] = 3] = "TYPE";
    	    Scope[Scope["LEVEL"] = 12] = "LEVEL";
    	    Scope[Scope["ATTRIBUTE"] = 13] = "ATTRIBUTE";
    	    Scope[Scope["BLOT"] = 14] = "BLOT";
    	    Scope[Scope["INLINE"] = 7] = "INLINE";
    	    Scope[Scope["BLOCK"] = 11] = "BLOCK";
    	    Scope[Scope["BLOCK_BLOT"] = 10] = "BLOCK_BLOT";
    	    Scope[Scope["INLINE_BLOT"] = 6] = "INLINE_BLOT";
    	    Scope[Scope["BLOCK_ATTRIBUTE"] = 9] = "BLOCK_ATTRIBUTE";
    	    Scope[Scope["INLINE_ATTRIBUTE"] = 5] = "INLINE_ATTRIBUTE";
    	    Scope[Scope["ANY"] = 15] = "ANY";
    	})(Scope = exports.Scope || (exports.Scope = {}));
    	function create(input, value) {
    	    var match = query(input);
    	    if (match == null) {
    	        throw new ParchmentError("Unable to create " + input + " blot");
    	    }
    	    var BlotClass = match;
    	    var node = 
    	    // @ts-ignore
    	    input instanceof Node || input['nodeType'] === Node.TEXT_NODE ? input : BlotClass.create(value);
    	    return new BlotClass(node, value);
    	}
    	exports.create = create;
    	function find(node, bubble) {
    	    if (bubble === void 0) { bubble = false; }
    	    if (node == null)
    	        return null;
    	    // @ts-ignore
    	    if (node[exports.DATA_KEY] != null)
    	        return node[exports.DATA_KEY].blot;
    	    if (bubble)
    	        return find(node.parentNode, bubble);
    	    return null;
    	}
    	exports.find = find;
    	function query(query, scope) {
    	    if (scope === void 0) { scope = Scope.ANY; }
    	    var match;
    	    if (typeof query === 'string') {
    	        match = types[query] || attributes[query];
    	        // @ts-ignore
    	    }
    	    else if (query instanceof Text || query['nodeType'] === Node.TEXT_NODE) {
    	        match = types['text'];
    	    }
    	    else if (typeof query === 'number') {
    	        if (query & Scope.LEVEL & Scope.BLOCK) {
    	            match = types['block'];
    	        }
    	        else if (query & Scope.LEVEL & Scope.INLINE) {
    	            match = types['inline'];
    	        }
    	    }
    	    else if (query instanceof HTMLElement) {
    	        var names = (query.getAttribute('class') || '').split(/\s+/);
    	        for (var i in names) {
    	            match = classes[names[i]];
    	            if (match)
    	                break;
    	        }
    	        match = match || tags[query.tagName];
    	    }
    	    if (match == null)
    	        return null;
    	    // @ts-ignore
    	    if (scope & Scope.LEVEL & match.scope && scope & Scope.TYPE & match.scope)
    	        return match;
    	    return null;
    	}
    	exports.query = query;
    	function register() {
    	    var Definitions = [];
    	    for (var _i = 0; _i < arguments.length; _i++) {
    	        Definitions[_i] = arguments[_i];
    	    }
    	    if (Definitions.length > 1) {
    	        return Definitions.map(function (d) {
    	            return register(d);
    	        });
    	    }
    	    var Definition = Definitions[0];
    	    if (typeof Definition.blotName !== 'string' && typeof Definition.attrName !== 'string') {
    	        throw new ParchmentError('Invalid definition');
    	    }
    	    else if (Definition.blotName === 'abstract') {
    	        throw new ParchmentError('Cannot register abstract class');
    	    }
    	    types[Definition.blotName || Definition.attrName] = Definition;
    	    if (typeof Definition.keyName === 'string') {
    	        attributes[Definition.keyName] = Definition;
    	    }
    	    else {
    	        if (Definition.className != null) {
    	            classes[Definition.className] = Definition;
    	        }
    	        if (Definition.tagName != null) {
    	            if (Array.isArray(Definition.tagName)) {
    	                Definition.tagName = Definition.tagName.map(function (tagName) {
    	                    return tagName.toUpperCase();
    	                });
    	            }
    	            else {
    	                Definition.tagName = Definition.tagName.toUpperCase();
    	            }
    	            var tagNames = Array.isArray(Definition.tagName) ? Definition.tagName : [Definition.tagName];
    	            tagNames.forEach(function (tag) {
    	                if (tags[tag] == null || Definition.className == null) {
    	                    tags[tag] = Definition;
    	                }
    	            });
    	        }
    	    }
    	    return Definition;
    	}
    	exports.register = register;


    	/***/ }),
    	/* 2 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var diff = __webpack_require__(51);
    	var equal = __webpack_require__(11);
    	var extend = __webpack_require__(3);
    	var op = __webpack_require__(20);


    	var NULL_CHARACTER = String.fromCharCode(0);  // Placeholder char for embed in diff()


    	var Delta = function (ops) {
    	  // Assume we are given a well formed ops
    	  if (Array.isArray(ops)) {
    	    this.ops = ops;
    	  } else if (ops != null && Array.isArray(ops.ops)) {
    	    this.ops = ops.ops;
    	  } else {
    	    this.ops = [];
    	  }
    	};


    	Delta.prototype.insert = function (text, attributes) {
    	  var newOp = {};
    	  if (text.length === 0) return this;
    	  newOp.insert = text;
    	  if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {
    	    newOp.attributes = attributes;
    	  }
    	  return this.push(newOp);
    	};

    	Delta.prototype['delete'] = function (length) {
    	  if (length <= 0) return this;
    	  return this.push({ 'delete': length });
    	};

    	Delta.prototype.retain = function (length, attributes) {
    	  if (length <= 0) return this;
    	  var newOp = { retain: length };
    	  if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {
    	    newOp.attributes = attributes;
    	  }
    	  return this.push(newOp);
    	};

    	Delta.prototype.push = function (newOp) {
    	  var index = this.ops.length;
    	  var lastOp = this.ops[index - 1];
    	  newOp = extend(true, {}, newOp);
    	  if (typeof lastOp === 'object') {
    	    if (typeof newOp['delete'] === 'number' && typeof lastOp['delete'] === 'number') {
    	      this.ops[index - 1] = { 'delete': lastOp['delete'] + newOp['delete'] };
    	      return this;
    	    }
    	    // Since it does not matter if we insert before or after deleting at the same index,
    	    // always prefer to insert first
    	    if (typeof lastOp['delete'] === 'number' && newOp.insert != null) {
    	      index -= 1;
    	      lastOp = this.ops[index - 1];
    	      if (typeof lastOp !== 'object') {
    	        this.ops.unshift(newOp);
    	        return this;
    	      }
    	    }
    	    if (equal(newOp.attributes, lastOp.attributes)) {
    	      if (typeof newOp.insert === 'string' && typeof lastOp.insert === 'string') {
    	        this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };
    	        if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes;
    	        return this;
    	      } else if (typeof newOp.retain === 'number' && typeof lastOp.retain === 'number') {
    	        this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };
    	        if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes;
    	        return this;
    	      }
    	    }
    	  }
    	  if (index === this.ops.length) {
    	    this.ops.push(newOp);
    	  } else {
    	    this.ops.splice(index, 0, newOp);
    	  }
    	  return this;
    	};

    	Delta.prototype.chop = function () {
    	  var lastOp = this.ops[this.ops.length - 1];
    	  if (lastOp && lastOp.retain && !lastOp.attributes) {
    	    this.ops.pop();
    	  }
    	  return this;
    	};

    	Delta.prototype.filter = function (predicate) {
    	  return this.ops.filter(predicate);
    	};

    	Delta.prototype.forEach = function (predicate) {
    	  this.ops.forEach(predicate);
    	};

    	Delta.prototype.map = function (predicate) {
    	  return this.ops.map(predicate);
    	};

    	Delta.prototype.partition = function (predicate) {
    	  var passed = [], failed = [];
    	  this.forEach(function(op) {
    	    var target = predicate(op) ? passed : failed;
    	    target.push(op);
    	  });
    	  return [passed, failed];
    	};

    	Delta.prototype.reduce = function (predicate, initial) {
    	  return this.ops.reduce(predicate, initial);
    	};

    	Delta.prototype.changeLength = function () {
    	  return this.reduce(function (length, elem) {
    	    if (elem.insert) {
    	      return length + op.length(elem);
    	    } else if (elem.delete) {
    	      return length - elem.delete;
    	    }
    	    return length;
    	  }, 0);
    	};

    	Delta.prototype.length = function () {
    	  return this.reduce(function (length, elem) {
    	    return length + op.length(elem);
    	  }, 0);
    	};

    	Delta.prototype.slice = function (start, end) {
    	  start = start || 0;
    	  if (typeof end !== 'number') end = Infinity;
    	  var ops = [];
    	  var iter = op.iterator(this.ops);
    	  var index = 0;
    	  while (index < end && iter.hasNext()) {
    	    var nextOp;
    	    if (index < start) {
    	      nextOp = iter.next(start - index);
    	    } else {
    	      nextOp = iter.next(end - index);
    	      ops.push(nextOp);
    	    }
    	    index += op.length(nextOp);
    	  }
    	  return new Delta(ops);
    	};


    	Delta.prototype.compose = function (other) {
    	  var thisIter = op.iterator(this.ops);
    	  var otherIter = op.iterator(other.ops);
    	  var ops = [];
    	  var firstOther = otherIter.peek();
    	  if (firstOther != null && typeof firstOther.retain === 'number' && firstOther.attributes == null) {
    	    var firstLeft = firstOther.retain;
    	    while (thisIter.peekType() === 'insert' && thisIter.peekLength() <= firstLeft) {
    	      firstLeft -= thisIter.peekLength();
    	      ops.push(thisIter.next());
    	    }
    	    if (firstOther.retain - firstLeft > 0) {
    	      otherIter.next(firstOther.retain - firstLeft);
    	    }
    	  }
    	  var delta = new Delta(ops);
    	  while (thisIter.hasNext() || otherIter.hasNext()) {
    	    if (otherIter.peekType() === 'insert') {
    	      delta.push(otherIter.next());
    	    } else if (thisIter.peekType() === 'delete') {
    	      delta.push(thisIter.next());
    	    } else {
    	      var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
    	      var thisOp = thisIter.next(length);
    	      var otherOp = otherIter.next(length);
    	      if (typeof otherOp.retain === 'number') {
    	        var newOp = {};
    	        if (typeof thisOp.retain === 'number') {
    	          newOp.retain = length;
    	        } else {
    	          newOp.insert = thisOp.insert;
    	        }
    	        // Preserve null when composing with a retain, otherwise remove it for inserts
    	        var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');
    	        if (attributes) newOp.attributes = attributes;
    	        delta.push(newOp);

    	        // Optimization if rest of other is just retain
    	        if (!otherIter.hasNext() && equal(delta.ops[delta.ops.length - 1], newOp)) {
    	          var rest = new Delta(thisIter.rest());
    	          return delta.concat(rest).chop();
    	        }

    	      // Other op should be delete, we could be an insert or retain
    	      // Insert + delete cancels out
    	      } else if (typeof otherOp['delete'] === 'number' && typeof thisOp.retain === 'number') {
    	        delta.push(otherOp);
    	      }
    	    }
    	  }
    	  return delta.chop();
    	};

    	Delta.prototype.concat = function (other) {
    	  var delta = new Delta(this.ops.slice());
    	  if (other.ops.length > 0) {
    	    delta.push(other.ops[0]);
    	    delta.ops = delta.ops.concat(other.ops.slice(1));
    	  }
    	  return delta;
    	};

    	Delta.prototype.diff = function (other, index) {
    	  if (this.ops === other.ops) {
    	    return new Delta();
    	  }
    	  var strings = [this, other].map(function (delta) {
    	    return delta.map(function (op) {
    	      if (op.insert != null) {
    	        return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;
    	      }
    	      var prep = (delta === other) ? 'on' : 'with';
    	      throw new Error('diff() called ' + prep + ' non-document');
    	    }).join('');
    	  });
    	  var delta = new Delta();
    	  var diffResult = diff(strings[0], strings[1], index);
    	  var thisIter = op.iterator(this.ops);
    	  var otherIter = op.iterator(other.ops);
    	  diffResult.forEach(function (component) {
    	    var length = component[1].length;
    	    while (length > 0) {
    	      var opLength = 0;
    	      switch (component[0]) {
    	        case diff.INSERT:
    	          opLength = Math.min(otherIter.peekLength(), length);
    	          delta.push(otherIter.next(opLength));
    	          break;
    	        case diff.DELETE:
    	          opLength = Math.min(length, thisIter.peekLength());
    	          thisIter.next(opLength);
    	          delta['delete'](opLength);
    	          break;
    	        case diff.EQUAL:
    	          opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
    	          var thisOp = thisIter.next(opLength);
    	          var otherOp = otherIter.next(opLength);
    	          if (equal(thisOp.insert, otherOp.insert)) {
    	            delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));
    	          } else {
    	            delta.push(otherOp)['delete'](opLength);
    	          }
    	          break;
    	      }
    	      length -= opLength;
    	    }
    	  });
    	  return delta.chop();
    	};

    	Delta.prototype.eachLine = function (predicate, newline) {
    	  newline = newline || '\n';
    	  var iter = op.iterator(this.ops);
    	  var line = new Delta();
    	  var i = 0;
    	  while (iter.hasNext()) {
    	    if (iter.peekType() !== 'insert') return;
    	    var thisOp = iter.peek();
    	    var start = op.length(thisOp) - iter.peekLength();
    	    var index = typeof thisOp.insert === 'string' ?
    	      thisOp.insert.indexOf(newline, start) - start : -1;
    	    if (index < 0) {
    	      line.push(iter.next());
    	    } else if (index > 0) {
    	      line.push(iter.next(index));
    	    } else {
    	      if (predicate(line, iter.next(1).attributes || {}, i) === false) {
    	        return;
    	      }
    	      i += 1;
    	      line = new Delta();
    	    }
    	  }
    	  if (line.length() > 0) {
    	    predicate(line, {}, i);
    	  }
    	};

    	Delta.prototype.transform = function (other, priority) {
    	  priority = !!priority;
    	  if (typeof other === 'number') {
    	    return this.transformPosition(other, priority);
    	  }
    	  var thisIter = op.iterator(this.ops);
    	  var otherIter = op.iterator(other.ops);
    	  var delta = new Delta();
    	  while (thisIter.hasNext() || otherIter.hasNext()) {
    	    if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {
    	      delta.retain(op.length(thisIter.next()));
    	    } else if (otherIter.peekType() === 'insert') {
    	      delta.push(otherIter.next());
    	    } else {
    	      var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
    	      var thisOp = thisIter.next(length);
    	      var otherOp = otherIter.next(length);
    	      if (thisOp['delete']) {
    	        // Our delete either makes their delete redundant or removes their retain
    	        continue;
    	      } else if (otherOp['delete']) {
    	        delta.push(otherOp);
    	      } else {
    	        // We retain either their retain or insert
    	        delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));
    	      }
    	    }
    	  }
    	  return delta.chop();
    	};

    	Delta.prototype.transformPosition = function (index, priority) {
    	  priority = !!priority;
    	  var thisIter = op.iterator(this.ops);
    	  var offset = 0;
    	  while (thisIter.hasNext() && offset <= index) {
    	    var length = thisIter.peekLength();
    	    var nextType = thisIter.peekType();
    	    thisIter.next();
    	    if (nextType === 'delete') {
    	      index -= Math.min(length, index - offset);
    	      continue;
    	    } else if (nextType === 'insert' && (offset < index || !priority)) {
    	      index += length;
    	    }
    	    offset += length;
    	  }
    	  return index;
    	};


    	module.exports = Delta;


    	/***/ }),
    	/* 3 */
    	/***/ (function(module, exports) {

    	var hasOwn = Object.prototype.hasOwnProperty;
    	var toStr = Object.prototype.toString;
    	var defineProperty = Object.defineProperty;
    	var gOPD = Object.getOwnPropertyDescriptor;

    	var isArray = function isArray(arr) {
    		if (typeof Array.isArray === 'function') {
    			return Array.isArray(arr);
    		}

    		return toStr.call(arr) === '[object Array]';
    	};

    	var isPlainObject = function isPlainObject(obj) {
    		if (!obj || toStr.call(obj) !== '[object Object]') {
    			return false;
    		}

    		var hasOwnConstructor = hasOwn.call(obj, 'constructor');
    		var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
    		// Not own constructor property must be Object
    		if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
    			return false;
    		}

    		// Own properties are enumerated firstly, so to speed up,
    		// if last one is own, then all properties are own.
    		var key;
    		for (key in obj) { /**/ }

    		return typeof key === 'undefined' || hasOwn.call(obj, key);
    	};

    	// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
    	var setProperty = function setProperty(target, options) {
    		if (defineProperty && options.name === '__proto__') {
    			defineProperty(target, options.name, {
    				enumerable: true,
    				configurable: true,
    				value: options.newValue,
    				writable: true
    			});
    		} else {
    			target[options.name] = options.newValue;
    		}
    	};

    	// Return undefined instead of __proto__ if '__proto__' is not an own property
    	var getProperty = function getProperty(obj, name) {
    		if (name === '__proto__') {
    			if (!hasOwn.call(obj, name)) {
    				return void 0;
    			} else if (gOPD) {
    				// In early versions of node, obj['__proto__'] is buggy when obj has
    				// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
    				return gOPD(obj, name).value;
    			}
    		}

    		return obj[name];
    	};

    	module.exports = function extend() {
    		var options, name, src, copy, copyIsArray, clone;
    		var target = arguments[0];
    		var i = 1;
    		var length = arguments.length;
    		var deep = false;

    		// Handle a deep copy situation
    		if (typeof target === 'boolean') {
    			deep = target;
    			target = arguments[1] || {};
    			// skip the boolean and the target
    			i = 2;
    		}
    		if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
    			target = {};
    		}

    		for (; i < length; ++i) {
    			options = arguments[i];
    			// Only deal with non-null/undefined values
    			if (options != null) {
    				// Extend the base object
    				for (name in options) {
    					src = getProperty(target, name);
    					copy = getProperty(options, name);

    					// Prevent never-ending loop
    					if (target !== copy) {
    						// Recurse if we're merging plain objects or arrays
    						if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
    							if (copyIsArray) {
    								copyIsArray = false;
    								clone = src && isArray(src) ? src : [];
    							} else {
    								clone = src && isPlainObject(src) ? src : {};
    							}

    							// Never move original objects, clone them
    							setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

    						// Don't bring in undefined values
    						} else if (typeof copy !== 'undefined') {
    							setProperty(target, { name: name, newValue: copy });
    						}
    					}
    				}
    			}
    		}

    		// Return the modified object
    		return target;
    	};


    	/***/ }),
    	/* 4 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.BlockEmbed = exports.bubbleFormats = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _break = __webpack_require__(16);

    	var _break2 = _interopRequireDefault(_break);

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	var _text = __webpack_require__(7);

    	var _text2 = _interopRequireDefault(_text);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var NEWLINE_LENGTH = 1;

    	var BlockEmbed = function (_Parchment$Embed) {
    	  _inherits(BlockEmbed, _Parchment$Embed);

    	  function BlockEmbed() {
    	    _classCallCheck(this, BlockEmbed);

    	    return _possibleConstructorReturn(this, (BlockEmbed.__proto__ || Object.getPrototypeOf(BlockEmbed)).apply(this, arguments));
    	  }

    	  _createClass(BlockEmbed, [{
    	    key: 'attach',
    	    value: function attach() {
    	      _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'attach', this).call(this);
    	      this.attributes = new _parchment2.default.Attributor.Store(this.domNode);
    	    }
    	  }, {
    	    key: 'delta',
    	    value: function delta() {
    	      return new _quillDelta2.default().insert(this.value(), (0, _extend2.default)(this.formats(), this.attributes.values()));
    	    }
    	  }, {
    	    key: 'format',
    	    value: function format(name, value) {
    	      var attribute = _parchment2.default.query(name, _parchment2.default.Scope.BLOCK_ATTRIBUTE);
    	      if (attribute != null) {
    	        this.attributes.attribute(attribute, value);
    	      }
    	    }
    	  }, {
    	    key: 'formatAt',
    	    value: function formatAt(index, length, name, value) {
    	      this.format(name, value);
    	    }
    	  }, {
    	    key: 'insertAt',
    	    value: function insertAt(index, value, def) {
    	      if (typeof value === 'string' && value.endsWith('\n')) {
    	        var block = _parchment2.default.create(Block.blotName);
    	        this.parent.insertBefore(block, index === 0 ? this : this.next);
    	        block.insertAt(0, value.slice(0, -1));
    	      } else {
    	        _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'insertAt', this).call(this, index, value, def);
    	      }
    	    }
    	  }]);

    	  return BlockEmbed;
    	}(_parchment2.default.Embed);

    	BlockEmbed.scope = _parchment2.default.Scope.BLOCK_BLOT;
    	// It is important for cursor behavior BlockEmbeds use tags that are block level elements


    	var Block = function (_Parchment$Block) {
    	  _inherits(Block, _Parchment$Block);

    	  function Block(domNode) {
    	    _classCallCheck(this, Block);

    	    var _this2 = _possibleConstructorReturn(this, (Block.__proto__ || Object.getPrototypeOf(Block)).call(this, domNode));

    	    _this2.cache = {};
    	    return _this2;
    	  }

    	  _createClass(Block, [{
    	    key: 'delta',
    	    value: function delta() {
    	      if (this.cache.delta == null) {
    	        this.cache.delta = this.descendants(_parchment2.default.Leaf).reduce(function (delta, leaf) {
    	          if (leaf.length() === 0) {
    	            return delta;
    	          } else {
    	            return delta.insert(leaf.value(), bubbleFormats(leaf));
    	          }
    	        }, new _quillDelta2.default()).insert('\n', bubbleFormats(this));
    	      }
    	      return this.cache.delta;
    	    }
    	  }, {
    	    key: 'deleteAt',
    	    value: function deleteAt(index, length) {
    	      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'deleteAt', this).call(this, index, length);
    	      this.cache = {};
    	    }
    	  }, {
    	    key: 'formatAt',
    	    value: function formatAt(index, length, name, value) {
    	      if (length <= 0) return;
    	      if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
    	        if (index + length === this.length()) {
    	          this.format(name, value);
    	        }
    	      } else {
    	        _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'formatAt', this).call(this, index, Math.min(length, this.length() - index - 1), name, value);
    	      }
    	      this.cache = {};
    	    }
    	  }, {
    	    key: 'insertAt',
    	    value: function insertAt(index, value, def) {
    	      if (def != null) return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, index, value, def);
    	      if (value.length === 0) return;
    	      var lines = value.split('\n');
    	      var text = lines.shift();
    	      if (text.length > 0) {
    	        if (index < this.length() - 1 || this.children.tail == null) {
    	          _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, Math.min(index, this.length() - 1), text);
    	        } else {
    	          this.children.tail.insertAt(this.children.tail.length(), text);
    	        }
    	        this.cache = {};
    	      }
    	      var block = this;
    	      lines.reduce(function (index, line) {
    	        block = block.split(index, true);
    	        block.insertAt(0, line);
    	        return line.length;
    	      }, index + text.length);
    	    }
    	  }, {
    	    key: 'insertBefore',
    	    value: function insertBefore(blot, ref) {
    	      var head = this.children.head;
    	      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertBefore', this).call(this, blot, ref);
    	      if (head instanceof _break2.default) {
    	        head.remove();
    	      }
    	      this.cache = {};
    	    }
    	  }, {
    	    key: 'length',
    	    value: function length() {
    	      if (this.cache.length == null) {
    	        this.cache.length = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'length', this).call(this) + NEWLINE_LENGTH;
    	      }
    	      return this.cache.length;
    	    }
    	  }, {
    	    key: 'moveChildren',
    	    value: function moveChildren(target, ref) {
    	      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'moveChildren', this).call(this, target, ref);
    	      this.cache = {};
    	    }
    	  }, {
    	    key: 'optimize',
    	    value: function optimize(context) {
    	      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'optimize', this).call(this, context);
    	      this.cache = {};
    	    }
    	  }, {
    	    key: 'path',
    	    value: function path(index) {
    	      return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'path', this).call(this, index, true);
    	    }
    	  }, {
    	    key: 'removeChild',
    	    value: function removeChild(child) {
    	      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'removeChild', this).call(this, child);
    	      this.cache = {};
    	    }
    	  }, {
    	    key: 'split',
    	    value: function split(index) {
    	      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    	      if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {
    	        var clone = this.clone();
    	        if (index === 0) {
    	          this.parent.insertBefore(clone, this);
    	          return this;
    	        } else {
    	          this.parent.insertBefore(clone, this.next);
    	          return clone;
    	        }
    	      } else {
    	        var next = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'split', this).call(this, index, force);
    	        this.cache = {};
    	        return next;
    	      }
    	    }
    	  }]);

    	  return Block;
    	}(_parchment2.default.Block);

    	Block.blotName = 'block';
    	Block.tagName = 'P';
    	Block.defaultChild = 'break';
    	Block.allowedChildren = [_inline2.default, _parchment2.default.Embed, _text2.default];

    	function bubbleFormats(blot) {
    	  var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    	  if (blot == null) return formats;
    	  if (typeof blot.formats === 'function') {
    	    formats = (0, _extend2.default)(formats, blot.formats());
    	  }
    	  if (blot.parent == null || blot.parent.blotName == 'scroll' || blot.parent.statics.scope !== blot.statics.scope) {
    	    return formats;
    	  }
    	  return bubbleFormats(blot.parent, formats);
    	}

    	exports.bubbleFormats = bubbleFormats;
    	exports.BlockEmbed = BlockEmbed;
    	exports.default = Block;

    	/***/ }),
    	/* 5 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.overload = exports.expandConfig = undefined;

    	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	__webpack_require__(50);

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _editor = __webpack_require__(14);

    	var _editor2 = _interopRequireDefault(_editor);

    	var _emitter3 = __webpack_require__(8);

    	var _emitter4 = _interopRequireDefault(_emitter3);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _selection = __webpack_require__(15);

    	var _selection2 = _interopRequireDefault(_selection);

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	var _logger = __webpack_require__(10);

    	var _logger2 = _interopRequireDefault(_logger);

    	var _theme = __webpack_require__(34);

    	var _theme2 = _interopRequireDefault(_theme);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var debug = (0, _logger2.default)('quill');

    	var Quill = function () {
    	  _createClass(Quill, null, [{
    	    key: 'debug',
    	    value: function debug(limit) {
    	      if (limit === true) {
    	        limit = 'log';
    	      }
    	      _logger2.default.level(limit);
    	    }
    	  }, {
    	    key: 'find',
    	    value: function find(node) {
    	      return node.__quill || _parchment2.default.find(node);
    	    }
    	  }, {
    	    key: 'import',
    	    value: function _import(name) {
    	      if (this.imports[name] == null) {
    	        debug.error('Cannot import ' + name + '. Are you sure it was registered?');
    	      }
    	      return this.imports[name];
    	    }
    	  }, {
    	    key: 'register',
    	    value: function register(path, target) {
    	      var _this = this;

    	      var overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    	      if (typeof path !== 'string') {
    	        var name = path.attrName || path.blotName;
    	        if (typeof name === 'string') {
    	          // register(Blot | Attributor, overwrite)
    	          this.register('formats/' + name, path, target);
    	        } else {
    	          Object.keys(path).forEach(function (key) {
    	            _this.register(key, path[key], target);
    	          });
    	        }
    	      } else {
    	        if (this.imports[path] != null && !overwrite) {
    	          debug.warn('Overwriting ' + path + ' with', target);
    	        }
    	        this.imports[path] = target;
    	        if ((path.startsWith('blots/') || path.startsWith('formats/')) && target.blotName !== 'abstract') {
    	          _parchment2.default.register(target);
    	        } else if (path.startsWith('modules') && typeof target.register === 'function') {
    	          target.register();
    	        }
    	      }
    	    }
    	  }]);

    	  function Quill(container) {
    	    var _this2 = this;

    	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    	    _classCallCheck(this, Quill);

    	    this.options = expandConfig(container, options);
    	    this.container = this.options.container;
    	    if (this.container == null) {
    	      return debug.error('Invalid Quill container', container);
    	    }
    	    if (this.options.debug) {
    	      Quill.debug(this.options.debug);
    	    }
    	    var html = this.container.innerHTML.trim();
    	    this.container.classList.add('ql-container');
    	    this.container.innerHTML = '';
    	    this.container.__quill = this;
    	    this.root = this.addContainer('ql-editor');
    	    this.root.classList.add('ql-blank');
    	    this.root.setAttribute('data-gramm', false);
    	    this.scrollingContainer = this.options.scrollingContainer || this.root;
    	    this.emitter = new _emitter4.default();
    	    this.scroll = _parchment2.default.create(this.root, {
    	      emitter: this.emitter,
    	      whitelist: this.options.formats
    	    });
    	    this.editor = new _editor2.default(this.scroll);
    	    this.selection = new _selection2.default(this.scroll, this.emitter);
    	    this.theme = new this.options.theme(this, this.options);
    	    this.keyboard = this.theme.addModule('keyboard');
    	    this.clipboard = this.theme.addModule('clipboard');
    	    this.history = this.theme.addModule('history');
    	    this.theme.init();
    	    this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type) {
    	      if (type === _emitter4.default.events.TEXT_CHANGE) {
    	        _this2.root.classList.toggle('ql-blank', _this2.editor.isBlank());
    	      }
    	    });
    	    this.emitter.on(_emitter4.default.events.SCROLL_UPDATE, function (source, mutations) {
    	      var range = _this2.selection.lastRange;
    	      var index = range && range.length === 0 ? range.index : undefined;
    	      modify.call(_this2, function () {
    	        return _this2.editor.update(null, mutations, index);
    	      }, source);
    	    });
    	    var contents = this.clipboard.convert('<div class=\'ql-editor\' style="white-space: normal;">' + html + '<p><br></p></div>');
    	    this.setContents(contents);
    	    this.history.clear();
    	    if (this.options.placeholder) {
    	      this.root.setAttribute('data-placeholder', this.options.placeholder);
    	    }
    	    if (this.options.readOnly) {
    	      this.disable();
    	    }
    	  }

    	  _createClass(Quill, [{
    	    key: 'addContainer',
    	    value: function addContainer(container) {
    	      var refNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    	      if (typeof container === 'string') {
    	        var className = container;
    	        container = document.createElement('div');
    	        container.classList.add(className);
    	      }
    	      this.container.insertBefore(container, refNode);
    	      return container;
    	    }
    	  }, {
    	    key: 'blur',
    	    value: function blur() {
    	      this.selection.setRange(null);
    	    }
    	  }, {
    	    key: 'deleteText',
    	    value: function deleteText(index, length, source) {
    	      var _this3 = this;

    	      var _overload = overload(index, length, source);

    	      var _overload2 = _slicedToArray(_overload, 4);

    	      index = _overload2[0];
    	      length = _overload2[1];
    	      source = _overload2[3];

    	      return modify.call(this, function () {
    	        return _this3.editor.deleteText(index, length);
    	      }, source, index, -1 * length);
    	    }
    	  }, {
    	    key: 'disable',
    	    value: function disable() {
    	      this.enable(false);
    	    }
    	  }, {
    	    key: 'enable',
    	    value: function enable() {
    	      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    	      this.scroll.enable(enabled);
    	      this.container.classList.toggle('ql-disabled', !enabled);
    	    }
    	  }, {
    	    key: 'focus',
    	    value: function focus() {
    	      var scrollTop = this.scrollingContainer.scrollTop;
    	      this.selection.focus();
    	      this.scrollingContainer.scrollTop = scrollTop;
    	      this.scrollIntoView();
    	    }
    	  }, {
    	    key: 'format',
    	    value: function format(name, value) {
    	      var _this4 = this;

    	      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;

    	      return modify.call(this, function () {
    	        var range = _this4.getSelection(true);
    	        var change = new _quillDelta2.default();
    	        if (range == null) {
    	          return change;
    	        } else if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
    	          change = _this4.editor.formatLine(range.index, range.length, _defineProperty({}, name, value));
    	        } else if (range.length === 0) {
    	          _this4.selection.format(name, value);
    	          return change;
    	        } else {
    	          change = _this4.editor.formatText(range.index, range.length, _defineProperty({}, name, value));
    	        }
    	        _this4.setSelection(range, _emitter4.default.sources.SILENT);
    	        return change;
    	      }, source);
    	    }
    	  }, {
    	    key: 'formatLine',
    	    value: function formatLine(index, length, name, value, source) {
    	      var _this5 = this;

    	      var formats = void 0;

    	      var _overload3 = overload(index, length, name, value, source);

    	      var _overload4 = _slicedToArray(_overload3, 4);

    	      index = _overload4[0];
    	      length = _overload4[1];
    	      formats = _overload4[2];
    	      source = _overload4[3];

    	      return modify.call(this, function () {
    	        return _this5.editor.formatLine(index, length, formats);
    	      }, source, index, 0);
    	    }
    	  }, {
    	    key: 'formatText',
    	    value: function formatText(index, length, name, value, source) {
    	      var _this6 = this;

    	      var formats = void 0;

    	      var _overload5 = overload(index, length, name, value, source);

    	      var _overload6 = _slicedToArray(_overload5, 4);

    	      index = _overload6[0];
    	      length = _overload6[1];
    	      formats = _overload6[2];
    	      source = _overload6[3];

    	      return modify.call(this, function () {
    	        return _this6.editor.formatText(index, length, formats);
    	      }, source, index, 0);
    	    }
    	  }, {
    	    key: 'getBounds',
    	    value: function getBounds(index) {
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    	      var bounds = void 0;
    	      if (typeof index === 'number') {
    	        bounds = this.selection.getBounds(index, length);
    	      } else {
    	        bounds = this.selection.getBounds(index.index, index.length);
    	      }
    	      var containerBounds = this.container.getBoundingClientRect();
    	      return {
    	        bottom: bounds.bottom - containerBounds.top,
    	        height: bounds.height,
    	        left: bounds.left - containerBounds.left,
    	        right: bounds.right - containerBounds.left,
    	        top: bounds.top - containerBounds.top,
    	        width: bounds.width
    	      };
    	    }
    	  }, {
    	    key: 'getContents',
    	    value: function getContents() {
    	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

    	      var _overload7 = overload(index, length);

    	      var _overload8 = _slicedToArray(_overload7, 2);

    	      index = _overload8[0];
    	      length = _overload8[1];

    	      return this.editor.getContents(index, length);
    	    }
    	  }, {
    	    key: 'getFormat',
    	    value: function getFormat() {
    	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSelection(true);
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    	      if (typeof index === 'number') {
    	        return this.editor.getFormat(index, length);
    	      } else {
    	        return this.editor.getFormat(index.index, index.length);
    	      }
    	    }
    	  }, {
    	    key: 'getIndex',
    	    value: function getIndex(blot) {
    	      return blot.offset(this.scroll);
    	    }
    	  }, {
    	    key: 'getLength',
    	    value: function getLength() {
    	      return this.scroll.length();
    	    }
    	  }, {
    	    key: 'getLeaf',
    	    value: function getLeaf(index) {
    	      return this.scroll.leaf(index);
    	    }
    	  }, {
    	    key: 'getLine',
    	    value: function getLine(index) {
    	      return this.scroll.line(index);
    	    }
    	  }, {
    	    key: 'getLines',
    	    value: function getLines() {
    	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

    	      if (typeof index !== 'number') {
    	        return this.scroll.lines(index.index, index.length);
    	      } else {
    	        return this.scroll.lines(index, length);
    	      }
    	    }
    	  }, {
    	    key: 'getModule',
    	    value: function getModule(name) {
    	      return this.theme.modules[name];
    	    }
    	  }, {
    	    key: 'getSelection',
    	    value: function getSelection() {
    	      var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    	      if (focus) this.focus();
    	      this.update(); // Make sure we access getRange with editor in consistent state
    	      return this.selection.getRange()[0];
    	    }
    	  }, {
    	    key: 'getText',
    	    value: function getText() {
    	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

    	      var _overload9 = overload(index, length);

    	      var _overload10 = _slicedToArray(_overload9, 2);

    	      index = _overload10[0];
    	      length = _overload10[1];

    	      return this.editor.getText(index, length);
    	    }
    	  }, {
    	    key: 'hasFocus',
    	    value: function hasFocus() {
    	      return this.selection.hasFocus();
    	    }
    	  }, {
    	    key: 'insertEmbed',
    	    value: function insertEmbed(index, embed, value) {
    	      var _this7 = this;

    	      var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Quill.sources.API;

    	      return modify.call(this, function () {
    	        return _this7.editor.insertEmbed(index, embed, value);
    	      }, source, index);
    	    }
    	  }, {
    	    key: 'insertText',
    	    value: function insertText(index, text, name, value, source) {
    	      var _this8 = this;

    	      var formats = void 0;

    	      var _overload11 = overload(index, 0, name, value, source);

    	      var _overload12 = _slicedToArray(_overload11, 4);

    	      index = _overload12[0];
    	      formats = _overload12[2];
    	      source = _overload12[3];

    	      return modify.call(this, function () {
    	        return _this8.editor.insertText(index, text, formats);
    	      }, source, index, text.length);
    	    }
    	  }, {
    	    key: 'isEnabled',
    	    value: function isEnabled() {
    	      return !this.container.classList.contains('ql-disabled');
    	    }
    	  }, {
    	    key: 'off',
    	    value: function off() {
    	      return this.emitter.off.apply(this.emitter, arguments);
    	    }
    	  }, {
    	    key: 'on',
    	    value: function on() {
    	      return this.emitter.on.apply(this.emitter, arguments);
    	    }
    	  }, {
    	    key: 'once',
    	    value: function once() {
    	      return this.emitter.once.apply(this.emitter, arguments);
    	    }
    	  }, {
    	    key: 'pasteHTML',
    	    value: function pasteHTML(index, html, source) {
    	      this.clipboard.dangerouslyPasteHTML(index, html, source);
    	    }
    	  }, {
    	    key: 'removeFormat',
    	    value: function removeFormat(index, length, source) {
    	      var _this9 = this;

    	      var _overload13 = overload(index, length, source);

    	      var _overload14 = _slicedToArray(_overload13, 4);

    	      index = _overload14[0];
    	      length = _overload14[1];
    	      source = _overload14[3];

    	      return modify.call(this, function () {
    	        return _this9.editor.removeFormat(index, length);
    	      }, source, index);
    	    }
    	  }, {
    	    key: 'scrollIntoView',
    	    value: function scrollIntoView() {
    	      this.selection.scrollIntoView(this.scrollingContainer);
    	    }
    	  }, {
    	    key: 'setContents',
    	    value: function setContents(delta) {
    	      var _this10 = this;

    	      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

    	      return modify.call(this, function () {
    	        delta = new _quillDelta2.default(delta);
    	        var length = _this10.getLength();
    	        var deleted = _this10.editor.deleteText(0, length);
    	        var applied = _this10.editor.applyDelta(delta);
    	        var lastOp = applied.ops[applied.ops.length - 1];
    	        if (lastOp != null && typeof lastOp.insert === 'string' && lastOp.insert[lastOp.insert.length - 1] === '\n') {
    	          _this10.editor.deleteText(_this10.getLength() - 1, 1);
    	          applied.delete(1);
    	        }
    	        var ret = deleted.compose(applied);
    	        return ret;
    	      }, source);
    	    }
    	  }, {
    	    key: 'setSelection',
    	    value: function setSelection(index, length, source) {
    	      if (index == null) {
    	        this.selection.setRange(null, length || Quill.sources.API);
    	      } else {
    	        var _overload15 = overload(index, length, source);

    	        var _overload16 = _slicedToArray(_overload15, 4);

    	        index = _overload16[0];
    	        length = _overload16[1];
    	        source = _overload16[3];

    	        this.selection.setRange(new _selection.Range(index, length), source);
    	        if (source !== _emitter4.default.sources.SILENT) {
    	          this.selection.scrollIntoView(this.scrollingContainer);
    	        }
    	      }
    	    }
    	  }, {
    	    key: 'setText',
    	    value: function setText(text) {
    	      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

    	      var delta = new _quillDelta2.default().insert(text);
    	      return this.setContents(delta, source);
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update() {
    	      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;

    	      var change = this.scroll.update(source); // Will update selection before selection.update() does if text changes
    	      this.selection.update(source);
    	      return change;
    	    }
    	  }, {
    	    key: 'updateContents',
    	    value: function updateContents(delta) {
    	      var _this11 = this;

    	      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

    	      return modify.call(this, function () {
    	        delta = new _quillDelta2.default(delta);
    	        return _this11.editor.applyDelta(delta, source);
    	      }, source, true);
    	    }
    	  }]);

    	  return Quill;
    	}();

    	Quill.DEFAULTS = {
    	  bounds: null,
    	  formats: null,
    	  modules: {},
    	  placeholder: '',
    	  readOnly: false,
    	  scrollingContainer: null,
    	  strict: true,
    	  theme: 'default'
    	};
    	Quill.events = _emitter4.default.events;
    	Quill.sources = _emitter4.default.sources;
    	// eslint-disable-next-line no-undef
    	Quill.version =   "1.3.7";

    	Quill.imports = {
    	  'delta': _quillDelta2.default,
    	  'parchment': _parchment2.default,
    	  'core/module': _module2.default,
    	  'core/theme': _theme2.default
    	};

    	function expandConfig(container, userConfig) {
    	  userConfig = (0, _extend2.default)(true, {
    	    container: container,
    	    modules: {
    	      clipboard: true,
    	      keyboard: true,
    	      history: true
    	    }
    	  }, userConfig);
    	  if (!userConfig.theme || userConfig.theme === Quill.DEFAULTS.theme) {
    	    userConfig.theme = _theme2.default;
    	  } else {
    	    userConfig.theme = Quill.import('themes/' + userConfig.theme);
    	    if (userConfig.theme == null) {
    	      throw new Error('Invalid theme ' + userConfig.theme + '. Did you register it?');
    	    }
    	  }
    	  var themeConfig = (0, _extend2.default)(true, {}, userConfig.theme.DEFAULTS);
    	  [themeConfig, userConfig].forEach(function (config) {
    	    config.modules = config.modules || {};
    	    Object.keys(config.modules).forEach(function (module) {
    	      if (config.modules[module] === true) {
    	        config.modules[module] = {};
    	      }
    	    });
    	  });
    	  var moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));
    	  var moduleConfig = moduleNames.reduce(function (config, name) {
    	    var moduleClass = Quill.import('modules/' + name);
    	    if (moduleClass == null) {
    	      debug.error('Cannot load ' + name + ' module. Are you sure you registered it?');
    	    } else {
    	      config[name] = moduleClass.DEFAULTS || {};
    	    }
    	    return config;
    	  }, {});
    	  // Special case toolbar shorthand
    	  if (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {
    	    userConfig.modules.toolbar = {
    	      container: userConfig.modules.toolbar
    	    };
    	  }
    	  userConfig = (0, _extend2.default)(true, {}, Quill.DEFAULTS, { modules: moduleConfig }, themeConfig, userConfig);
    	  ['bounds', 'container', 'scrollingContainer'].forEach(function (key) {
    	    if (typeof userConfig[key] === 'string') {
    	      userConfig[key] = document.querySelector(userConfig[key]);
    	    }
    	  });
    	  userConfig.modules = Object.keys(userConfig.modules).reduce(function (config, name) {
    	    if (userConfig.modules[name]) {
    	      config[name] = userConfig.modules[name];
    	    }
    	    return config;
    	  }, {});
    	  return userConfig;
    	}

    	// Handle selection preservation and TEXT_CHANGE emission
    	// common to modification APIs
    	function modify(modifier, source, index, shift) {
    	  if (this.options.strict && !this.isEnabled() && source === _emitter4.default.sources.USER) {
    	    return new _quillDelta2.default();
    	  }
    	  var range = index == null ? null : this.getSelection();
    	  var oldDelta = this.editor.delta;
    	  var change = modifier();
    	  if (range != null) {
    	    if (index === true) index = range.index;
    	    if (shift == null) {
    	      range = shiftRange(range, change, source);
    	    } else if (shift !== 0) {
    	      range = shiftRange(range, index, shift, source);
    	    }
    	    this.setSelection(range, _emitter4.default.sources.SILENT);
    	  }
    	  if (change.length() > 0) {
    	    var _emitter;

    	    var args = [_emitter4.default.events.TEXT_CHANGE, change, oldDelta, source];
    	    (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
    	    if (source !== _emitter4.default.sources.SILENT) {
    	      var _emitter2;

    	      (_emitter2 = this.emitter).emit.apply(_emitter2, args);
    	    }
    	  }
    	  return change;
    	}

    	function overload(index, length, name, value, source) {
    	  var formats = {};
    	  if (typeof index.index === 'number' && typeof index.length === 'number') {
    	    // Allow for throwaway end (used by insertText/insertEmbed)
    	    if (typeof length !== 'number') {
    	      source = value, value = name, name = length, length = index.length, index = index.index;
    	    } else {
    	      length = index.length, index = index.index;
    	    }
    	  } else if (typeof length !== 'number') {
    	    source = value, value = name, name = length, length = 0;
    	  }
    	  // Handle format being object, two format name/value strings or excluded
    	  if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
    	    formats = name;
    	    source = value;
    	  } else if (typeof name === 'string') {
    	    if (value != null) {
    	      formats[name] = value;
    	    } else {
    	      source = name;
    	    }
    	  }
    	  // Handle optional source
    	  source = source || _emitter4.default.sources.API;
    	  return [index, length, formats, source];
    	}

    	function shiftRange(range, index, length, source) {
    	  if (range == null) return null;
    	  var start = void 0,
    	      end = void 0;
    	  if (index instanceof _quillDelta2.default) {
    	    var _map = [range.index, range.index + range.length].map(function (pos) {
    	      return index.transformPosition(pos, source !== _emitter4.default.sources.USER);
    	    });

    	    var _map2 = _slicedToArray(_map, 2);

    	    start = _map2[0];
    	    end = _map2[1];
    	  } else {
    	    var _map3 = [range.index, range.index + range.length].map(function (pos) {
    	      if (pos < index || pos === index && source === _emitter4.default.sources.USER) return pos;
    	      if (length >= 0) {
    	        return pos + length;
    	      } else {
    	        return Math.max(index, pos + length);
    	      }
    	    });

    	    var _map4 = _slicedToArray(_map3, 2);

    	    start = _map4[0];
    	    end = _map4[1];
    	  }
    	  return new _selection.Range(start, end - start);
    	}

    	exports.expandConfig = expandConfig;
    	exports.overload = overload;
    	exports.default = Quill;

    	/***/ }),
    	/* 6 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _text = __webpack_require__(7);

    	var _text2 = _interopRequireDefault(_text);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Inline = function (_Parchment$Inline) {
    	  _inherits(Inline, _Parchment$Inline);

    	  function Inline() {
    	    _classCallCheck(this, Inline);

    	    return _possibleConstructorReturn(this, (Inline.__proto__ || Object.getPrototypeOf(Inline)).apply(this, arguments));
    	  }

    	  _createClass(Inline, [{
    	    key: 'formatAt',
    	    value: function formatAt(index, length, name, value) {
    	      if (Inline.compare(this.statics.blotName, name) < 0 && _parchment2.default.query(name, _parchment2.default.Scope.BLOT)) {
    	        var blot = this.isolate(index, length);
    	        if (value) {
    	          blot.wrap(name, value);
    	        }
    	      } else {
    	        _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'formatAt', this).call(this, index, length, name, value);
    	      }
    	    }
    	  }, {
    	    key: 'optimize',
    	    value: function optimize(context) {
    	      _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'optimize', this).call(this, context);
    	      if (this.parent instanceof Inline && Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {
    	        var parent = this.parent.isolate(this.offset(), this.length());
    	        this.moveChildren(parent);
    	        parent.wrap(this);
    	      }
    	    }
    	  }], [{
    	    key: 'compare',
    	    value: function compare(self, other) {
    	      var selfIndex = Inline.order.indexOf(self);
    	      var otherIndex = Inline.order.indexOf(other);
    	      if (selfIndex >= 0 || otherIndex >= 0) {
    	        return selfIndex - otherIndex;
    	      } else if (self === other) {
    	        return 0;
    	      } else if (self < other) {
    	        return -1;
    	      } else {
    	        return 1;
    	      }
    	    }
    	  }]);

    	  return Inline;
    	}(_parchment2.default.Inline);

    	Inline.allowedChildren = [Inline, _parchment2.default.Embed, _text2.default];
    	// Lower index means deeper in the DOM tree, since not found (-1) is for embeds
    	Inline.order = ['cursor', 'inline', // Must be lower
    	'underline', 'strike', 'italic', 'bold', 'script', 'link', 'code' // Must be higher
    	];

    	exports.default = Inline;

    	/***/ }),
    	/* 7 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var TextBlot = function (_Parchment$Text) {
    	  _inherits(TextBlot, _Parchment$Text);

    	  function TextBlot() {
    	    _classCallCheck(this, TextBlot);

    	    return _possibleConstructorReturn(this, (TextBlot.__proto__ || Object.getPrototypeOf(TextBlot)).apply(this, arguments));
    	  }

    	  return TextBlot;
    	}(_parchment2.default.Text);

    	exports.default = TextBlot;

    	/***/ }),
    	/* 8 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _eventemitter = __webpack_require__(54);

    	var _eventemitter2 = _interopRequireDefault(_eventemitter);

    	var _logger = __webpack_require__(10);

    	var _logger2 = _interopRequireDefault(_logger);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var debug = (0, _logger2.default)('quill:events');

    	var EVENTS = ['selectionchange', 'mousedown', 'mouseup', 'click'];

    	EVENTS.forEach(function (eventName) {
    	  document.addEventListener(eventName, function () {
    	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    	      args[_key] = arguments[_key];
    	    }

    	    [].slice.call(document.querySelectorAll('.ql-container')).forEach(function (node) {
    	      // TODO use WeakMap
    	      if (node.__quill && node.__quill.emitter) {
    	        var _node$__quill$emitter;

    	        (_node$__quill$emitter = node.__quill.emitter).handleDOM.apply(_node$__quill$emitter, args);
    	      }
    	    });
    	  });
    	});

    	var Emitter = function (_EventEmitter) {
    	  _inherits(Emitter, _EventEmitter);

    	  function Emitter() {
    	    _classCallCheck(this, Emitter);

    	    var _this = _possibleConstructorReturn(this, (Emitter.__proto__ || Object.getPrototypeOf(Emitter)).call(this));

    	    _this.listeners = {};
    	    _this.on('error', debug.error);
    	    return _this;
    	  }

    	  _createClass(Emitter, [{
    	    key: 'emit',
    	    value: function emit() {
    	      debug.log.apply(debug, arguments);
    	      _get(Emitter.prototype.__proto__ || Object.getPrototypeOf(Emitter.prototype), 'emit', this).apply(this, arguments);
    	    }
    	  }, {
    	    key: 'handleDOM',
    	    value: function handleDOM(event) {
    	      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    	        args[_key2 - 1] = arguments[_key2];
    	      }

    	      (this.listeners[event.type] || []).forEach(function (_ref) {
    	        var node = _ref.node,
    	            handler = _ref.handler;

    	        if (event.target === node || node.contains(event.target)) {
    	          handler.apply(undefined, [event].concat(args));
    	        }
    	      });
    	    }
    	  }, {
    	    key: 'listenDOM',
    	    value: function listenDOM(eventName, node, handler) {
    	      if (!this.listeners[eventName]) {
    	        this.listeners[eventName] = [];
    	      }
    	      this.listeners[eventName].push({ node: node, handler: handler });
    	    }
    	  }]);

    	  return Emitter;
    	}(_eventemitter2.default);

    	Emitter.events = {
    	  EDITOR_CHANGE: 'editor-change',
    	  SCROLL_BEFORE_UPDATE: 'scroll-before-update',
    	  SCROLL_OPTIMIZE: 'scroll-optimize',
    	  SCROLL_UPDATE: 'scroll-update',
    	  SELECTION_CHANGE: 'selection-change',
    	  TEXT_CHANGE: 'text-change'
    	};
    	Emitter.sources = {
    	  API: 'api',
    	  SILENT: 'silent',
    	  USER: 'user'
    	};

    	exports.default = Emitter;

    	/***/ }),
    	/* 9 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var Module = function Module(quill) {
    	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    	  _classCallCheck(this, Module);

    	  this.quill = quill;
    	  this.options = options;
    	};

    	Module.DEFAULTS = {};

    	exports.default = Module;

    	/***/ }),
    	/* 10 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	var levels = ['error', 'warn', 'log', 'info'];
    	var level = 'warn';

    	function debug(method) {
    	  if (levels.indexOf(method) <= levels.indexOf(level)) {
    	    var _console;

    	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    	      args[_key - 1] = arguments[_key];
    	    }

    	    (_console = console)[method].apply(_console, args); // eslint-disable-line no-console
    	  }
    	}

    	function namespace(ns) {
    	  return levels.reduce(function (logger, method) {
    	    logger[method] = debug.bind(console, method, ns);
    	    return logger;
    	  }, {});
    	}

    	debug.level = namespace.level = function (newLevel) {
    	  level = newLevel;
    	};

    	exports.default = namespace;

    	/***/ }),
    	/* 11 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var pSlice = Array.prototype.slice;
    	var objectKeys = __webpack_require__(52);
    	var isArguments = __webpack_require__(53);

    	var deepEqual = module.exports = function (actual, expected, opts) {
    	  if (!opts) opts = {};
    	  // 7.1. All identical values are equivalent, as determined by ===.
    	  if (actual === expected) {
    	    return true;

    	  } else if (actual instanceof Date && expected instanceof Date) {
    	    return actual.getTime() === expected.getTime();

    	  // 7.3. Other pairs that do not both pass typeof value == 'object',
    	  // equivalence is determined by ==.
    	  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    	    return opts.strict ? actual === expected : actual == expected;

    	  // 7.4. For all other Object pairs, including Array objects, equivalence is
    	  // determined by having the same number of owned properties (as verified
    	  // with Object.prototype.hasOwnProperty.call), the same set of keys
    	  // (although not necessarily the same order), equivalent values for every
    	  // corresponding key, and an identical 'prototype' property. Note: this
    	  // accounts for both named and indexed properties on Arrays.
    	  } else {
    	    return objEquiv(actual, expected, opts);
    	  }
    	};

    	function isUndefinedOrNull(value) {
    	  return value === null || value === undefined;
    	}

    	function isBuffer (x) {
    	  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
    	  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    	    return false;
    	  }
    	  if (x.length > 0 && typeof x[0] !== 'number') return false;
    	  return true;
    	}

    	function objEquiv(a, b, opts) {
    	  var i, key;
    	  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    	    return false;
    	  // an identical 'prototype' property.
    	  if (a.prototype !== b.prototype) return false;
    	  //~~~I've managed to break Object.keys through screwy arguments passing.
    	  //   Converting to array solves the problem.
    	  if (isArguments(a)) {
    	    if (!isArguments(b)) {
    	      return false;
    	    }
    	    a = pSlice.call(a);
    	    b = pSlice.call(b);
    	    return deepEqual(a, b, opts);
    	  }
    	  if (isBuffer(a)) {
    	    if (!isBuffer(b)) {
    	      return false;
    	    }
    	    if (a.length !== b.length) return false;
    	    for (i = 0; i < a.length; i++) {
    	      if (a[i] !== b[i]) return false;
    	    }
    	    return true;
    	  }
    	  try {
    	    var ka = objectKeys(a),
    	        kb = objectKeys(b);
    	  } catch (e) {//happens when one is a string literal and the other isn't
    	    return false;
    	  }
    	  // having the same number of owned properties (keys incorporates
    	  // hasOwnProperty)
    	  if (ka.length != kb.length)
    	    return false;
    	  //the same set of keys (although not necessarily the same order),
    	  ka.sort();
    	  kb.sort();
    	  //~~~cheap key test
    	  for (i = ka.length - 1; i >= 0; i--) {
    	    if (ka[i] != kb[i])
    	      return false;
    	  }
    	  //equivalent values for every corresponding key, and
    	  //~~~possibly expensive deep test
    	  for (i = ka.length - 1; i >= 0; i--) {
    	    key = ka[i];
    	    if (!deepEqual(a[key], b[key], opts)) return false;
    	  }
    	  return typeof a === typeof b;
    	}


    	/***/ }),
    	/* 12 */
    	/***/ (function(module, exports, __webpack_require__) {

    	Object.defineProperty(exports, "__esModule", { value: true });
    	var Registry = __webpack_require__(1);
    	var Attributor = /** @class */ (function () {
    	    function Attributor(attrName, keyName, options) {
    	        if (options === void 0) { options = {}; }
    	        this.attrName = attrName;
    	        this.keyName = keyName;
    	        var attributeBit = Registry.Scope.TYPE & Registry.Scope.ATTRIBUTE;
    	        if (options.scope != null) {
    	            // Ignore type bits, force attribute bit
    	            this.scope = (options.scope & Registry.Scope.LEVEL) | attributeBit;
    	        }
    	        else {
    	            this.scope = Registry.Scope.ATTRIBUTE;
    	        }
    	        if (options.whitelist != null)
    	            this.whitelist = options.whitelist;
    	    }
    	    Attributor.keys = function (node) {
    	        return [].map.call(node.attributes, function (item) {
    	            return item.name;
    	        });
    	    };
    	    Attributor.prototype.add = function (node, value) {
    	        if (!this.canAdd(node, value))
    	            return false;
    	        node.setAttribute(this.keyName, value);
    	        return true;
    	    };
    	    Attributor.prototype.canAdd = function (node, value) {
    	        var match = Registry.query(node, Registry.Scope.BLOT & (this.scope | Registry.Scope.TYPE));
    	        if (match == null)
    	            return false;
    	        if (this.whitelist == null)
    	            return true;
    	        if (typeof value === 'string') {
    	            return this.whitelist.indexOf(value.replace(/["']/g, '')) > -1;
    	        }
    	        else {
    	            return this.whitelist.indexOf(value) > -1;
    	        }
    	    };
    	    Attributor.prototype.remove = function (node) {
    	        node.removeAttribute(this.keyName);
    	    };
    	    Attributor.prototype.value = function (node) {
    	        var value = node.getAttribute(this.keyName);
    	        if (this.canAdd(node, value) && value) {
    	            return value;
    	        }
    	        return '';
    	    };
    	    return Attributor;
    	}());
    	exports.default = Attributor;


    	/***/ }),
    	/* 13 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.Code = undefined;

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	var _text = __webpack_require__(7);

    	var _text2 = _interopRequireDefault(_text);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Code = function (_Inline) {
    	  _inherits(Code, _Inline);

    	  function Code() {
    	    _classCallCheck(this, Code);

    	    return _possibleConstructorReturn(this, (Code.__proto__ || Object.getPrototypeOf(Code)).apply(this, arguments));
    	  }

    	  return Code;
    	}(_inline2.default);

    	Code.blotName = 'code';
    	Code.tagName = 'CODE';

    	var CodeBlock = function (_Block) {
    	  _inherits(CodeBlock, _Block);

    	  function CodeBlock() {
    	    _classCallCheck(this, CodeBlock);

    	    return _possibleConstructorReturn(this, (CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock)).apply(this, arguments));
    	  }

    	  _createClass(CodeBlock, [{
    	    key: 'delta',
    	    value: function delta() {
    	      var _this3 = this;

    	      var text = this.domNode.textContent;
    	      if (text.endsWith('\n')) {
    	        // Should always be true
    	        text = text.slice(0, -1);
    	      }
    	      return text.split('\n').reduce(function (delta, frag) {
    	        return delta.insert(frag).insert('\n', _this3.formats());
    	      }, new _quillDelta2.default());
    	    }
    	  }, {
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (name === this.statics.blotName && value) return;

    	      var _descendant = this.descendant(_text2.default, this.length() - 1),
    	          _descendant2 = _slicedToArray(_descendant, 1),
    	          text = _descendant2[0];

    	      if (text != null) {
    	        text.deleteAt(text.length() - 1, 1);
    	      }
    	      _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'format', this).call(this, name, value);
    	    }
    	  }, {
    	    key: 'formatAt',
    	    value: function formatAt(index, length, name, value) {
    	      if (length === 0) return;
    	      if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK) == null || name === this.statics.blotName && value === this.statics.formats(this.domNode)) {
    	        return;
    	      }
    	      var nextNewline = this.newlineIndex(index);
    	      if (nextNewline < 0 || nextNewline >= index + length) return;
    	      var prevNewline = this.newlineIndex(index, true) + 1;
    	      var isolateLength = nextNewline - prevNewline + 1;
    	      var blot = this.isolate(prevNewline, isolateLength);
    	      var next = blot.next;
    	      blot.format(name, value);
    	      if (next instanceof CodeBlock) {
    	        next.formatAt(0, index - prevNewline + length - isolateLength, name, value);
    	      }
    	    }
    	  }, {
    	    key: 'insertAt',
    	    value: function insertAt(index, value, def) {
    	      if (def != null) return;

    	      var _descendant3 = this.descendant(_text2.default, index),
    	          _descendant4 = _slicedToArray(_descendant3, 2),
    	          text = _descendant4[0],
    	          offset = _descendant4[1];

    	      text.insertAt(offset, value);
    	    }
    	  }, {
    	    key: 'length',
    	    value: function length() {
    	      var length = this.domNode.textContent.length;
    	      if (!this.domNode.textContent.endsWith('\n')) {
    	        return length + 1;
    	      }
    	      return length;
    	    }
    	  }, {
    	    key: 'newlineIndex',
    	    value: function newlineIndex(searchIndex) {
    	      var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    	      if (!reverse) {
    	        var offset = this.domNode.textContent.slice(searchIndex).indexOf('\n');
    	        return offset > -1 ? searchIndex + offset : -1;
    	      } else {
    	        return this.domNode.textContent.slice(0, searchIndex).lastIndexOf('\n');
    	      }
    	    }
    	  }, {
    	    key: 'optimize',
    	    value: function optimize(context) {
    	      if (!this.domNode.textContent.endsWith('\n')) {
    	        this.appendChild(_parchment2.default.create('text', '\n'));
    	      }
    	      _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'optimize', this).call(this, context);
    	      var next = this.next;
    	      if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && this.statics.formats(this.domNode) === next.statics.formats(next.domNode)) {
    	        next.optimize(context);
    	        next.moveChildren(this);
    	        next.remove();
    	      }
    	    }
    	  }, {
    	    key: 'replace',
    	    value: function replace(target) {
    	      _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'replace', this).call(this, target);
    	      [].slice.call(this.domNode.querySelectorAll('*')).forEach(function (node) {
    	        var blot = _parchment2.default.find(node);
    	        if (blot == null) {
    	          node.parentNode.removeChild(node);
    	        } else if (blot instanceof _parchment2.default.Embed) {
    	          blot.remove();
    	        } else {
    	          blot.unwrap();
    	        }
    	      });
    	    }
    	  }], [{
    	    key: 'create',
    	    value: function create(value) {
    	      var domNode = _get(CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock), 'create', this).call(this, value);
    	      domNode.setAttribute('spellcheck', false);
    	      return domNode;
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats() {
    	      return true;
    	    }
    	  }]);

    	  return CodeBlock;
    	}(_block2.default);

    	CodeBlock.blotName = 'code-block';
    	CodeBlock.tagName = 'PRE';
    	CodeBlock.TAB = '  ';

    	exports.Code = Code;
    	exports.default = CodeBlock;

    	/***/ }),
    	/* 14 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _op = __webpack_require__(20);

    	var _op2 = _interopRequireDefault(_op);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _code = __webpack_require__(13);

    	var _code2 = _interopRequireDefault(_code);

    	var _cursor = __webpack_require__(24);

    	var _cursor2 = _interopRequireDefault(_cursor);

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	var _break = __webpack_require__(16);

    	var _break2 = _interopRequireDefault(_break);

    	var _clone = __webpack_require__(21);

    	var _clone2 = _interopRequireDefault(_clone);

    	var _deepEqual = __webpack_require__(11);

    	var _deepEqual2 = _interopRequireDefault(_deepEqual);

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var ASCII = /^[ -~]*$/;

    	var Editor = function () {
    	  function Editor(scroll) {
    	    _classCallCheck(this, Editor);

    	    this.scroll = scroll;
    	    this.delta = this.getDelta();
    	  }

    	  _createClass(Editor, [{
    	    key: 'applyDelta',
    	    value: function applyDelta(delta) {
    	      var _this = this;

    	      var consumeNextNewline = false;
    	      this.scroll.update();
    	      var scrollLength = this.scroll.length();
    	      this.scroll.batchStart();
    	      delta = normalizeDelta(delta);
    	      delta.reduce(function (index, op) {
    	        var length = op.retain || op.delete || op.insert.length || 1;
    	        var attributes = op.attributes || {};
    	        if (op.insert != null) {
    	          if (typeof op.insert === 'string') {
    	            var text = op.insert;
    	            if (text.endsWith('\n') && consumeNextNewline) {
    	              consumeNextNewline = false;
    	              text = text.slice(0, -1);
    	            }
    	            if (index >= scrollLength && !text.endsWith('\n')) {
    	              consumeNextNewline = true;
    	            }
    	            _this.scroll.insertAt(index, text);

    	            var _scroll$line = _this.scroll.line(index),
    	                _scroll$line2 = _slicedToArray(_scroll$line, 2),
    	                line = _scroll$line2[0],
    	                offset = _scroll$line2[1];

    	            var formats = (0, _extend2.default)({}, (0, _block.bubbleFormats)(line));
    	            if (line instanceof _block2.default) {
    	              var _line$descendant = line.descendant(_parchment2.default.Leaf, offset),
    	                  _line$descendant2 = _slicedToArray(_line$descendant, 1),
    	                  leaf = _line$descendant2[0];

    	              formats = (0, _extend2.default)(formats, (0, _block.bubbleFormats)(leaf));
    	            }
    	            attributes = _op2.default.attributes.diff(formats, attributes) || {};
    	          } else if (_typeof(op.insert) === 'object') {
    	            var key = Object.keys(op.insert)[0]; // There should only be one key
    	            if (key == null) return index;
    	            _this.scroll.insertAt(index, key, op.insert[key]);
    	          }
    	          scrollLength += length;
    	        }
    	        Object.keys(attributes).forEach(function (name) {
    	          _this.scroll.formatAt(index, length, name, attributes[name]);
    	        });
    	        return index + length;
    	      }, 0);
    	      delta.reduce(function (index, op) {
    	        if (typeof op.delete === 'number') {
    	          _this.scroll.deleteAt(index, op.delete);
    	          return index;
    	        }
    	        return index + (op.retain || op.insert.length || 1);
    	      }, 0);
    	      this.scroll.batchEnd();
    	      return this.update(delta);
    	    }
    	  }, {
    	    key: 'deleteText',
    	    value: function deleteText(index, length) {
    	      this.scroll.deleteAt(index, length);
    	      return this.update(new _quillDelta2.default().retain(index).delete(length));
    	    }
    	  }, {
    	    key: 'formatLine',
    	    value: function formatLine(index, length) {
    	      var _this2 = this;

    	      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    	      this.scroll.update();
    	      Object.keys(formats).forEach(function (format) {
    	        if (_this2.scroll.whitelist != null && !_this2.scroll.whitelist[format]) return;
    	        var lines = _this2.scroll.lines(index, Math.max(length, 1));
    	        var lengthRemaining = length;
    	        lines.forEach(function (line) {
    	          var lineLength = line.length();
    	          if (!(line instanceof _code2.default)) {
    	            line.format(format, formats[format]);
    	          } else {
    	            var codeIndex = index - line.offset(_this2.scroll);
    	            var codeLength = line.newlineIndex(codeIndex + lengthRemaining) - codeIndex + 1;
    	            line.formatAt(codeIndex, codeLength, format, formats[format]);
    	          }
    	          lengthRemaining -= lineLength;
    	        });
    	      });
    	      this.scroll.optimize();
    	      return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
    	    }
    	  }, {
    	    key: 'formatText',
    	    value: function formatText(index, length) {
    	      var _this3 = this;

    	      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    	      Object.keys(formats).forEach(function (format) {
    	        _this3.scroll.formatAt(index, length, format, formats[format]);
    	      });
    	      return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
    	    }
    	  }, {
    	    key: 'getContents',
    	    value: function getContents(index, length) {
    	      return this.delta.slice(index, index + length);
    	    }
    	  }, {
    	    key: 'getDelta',
    	    value: function getDelta() {
    	      return this.scroll.lines().reduce(function (delta, line) {
    	        return delta.concat(line.delta());
    	      }, new _quillDelta2.default());
    	    }
    	  }, {
    	    key: 'getFormat',
    	    value: function getFormat(index) {
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    	      var lines = [],
    	          leaves = [];
    	      if (length === 0) {
    	        this.scroll.path(index).forEach(function (path) {
    	          var _path = _slicedToArray(path, 1),
    	              blot = _path[0];

    	          if (blot instanceof _block2.default) {
    	            lines.push(blot);
    	          } else if (blot instanceof _parchment2.default.Leaf) {
    	            leaves.push(blot);
    	          }
    	        });
    	      } else {
    	        lines = this.scroll.lines(index, length);
    	        leaves = this.scroll.descendants(_parchment2.default.Leaf, index, length);
    	      }
    	      var formatsArr = [lines, leaves].map(function (blots) {
    	        if (blots.length === 0) return {};
    	        var formats = (0, _block.bubbleFormats)(blots.shift());
    	        while (Object.keys(formats).length > 0) {
    	          var blot = blots.shift();
    	          if (blot == null) return formats;
    	          formats = combineFormats((0, _block.bubbleFormats)(blot), formats);
    	        }
    	        return formats;
    	      });
    	      return _extend2.default.apply(_extend2.default, formatsArr);
    	    }
    	  }, {
    	    key: 'getText',
    	    value: function getText(index, length) {
    	      return this.getContents(index, length).filter(function (op) {
    	        return typeof op.insert === 'string';
    	      }).map(function (op) {
    	        return op.insert;
    	      }).join('');
    	    }
    	  }, {
    	    key: 'insertEmbed',
    	    value: function insertEmbed(index, embed, value) {
    	      this.scroll.insertAt(index, embed, value);
    	      return this.update(new _quillDelta2.default().retain(index).insert(_defineProperty({}, embed, value)));
    	    }
    	  }, {
    	    key: 'insertText',
    	    value: function insertText(index, text) {
    	      var _this4 = this;

    	      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    	      text = text.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
    	      this.scroll.insertAt(index, text);
    	      Object.keys(formats).forEach(function (format) {
    	        _this4.scroll.formatAt(index, text.length, format, formats[format]);
    	      });
    	      return this.update(new _quillDelta2.default().retain(index).insert(text, (0, _clone2.default)(formats)));
    	    }
    	  }, {
    	    key: 'isBlank',
    	    value: function isBlank() {
    	      if (this.scroll.children.length == 0) return true;
    	      if (this.scroll.children.length > 1) return false;
    	      var block = this.scroll.children.head;
    	      if (block.statics.blotName !== _block2.default.blotName) return false;
    	      if (block.children.length > 1) return false;
    	      return block.children.head instanceof _break2.default;
    	    }
    	  }, {
    	    key: 'removeFormat',
    	    value: function removeFormat(index, length) {
    	      var text = this.getText(index, length);

    	      var _scroll$line3 = this.scroll.line(index + length),
    	          _scroll$line4 = _slicedToArray(_scroll$line3, 2),
    	          line = _scroll$line4[0],
    	          offset = _scroll$line4[1];

    	      var suffixLength = 0,
    	          suffix = new _quillDelta2.default();
    	      if (line != null) {
    	        if (!(line instanceof _code2.default)) {
    	          suffixLength = line.length() - offset;
    	        } else {
    	          suffixLength = line.newlineIndex(offset) - offset + 1;
    	        }
    	        suffix = line.delta().slice(offset, offset + suffixLength - 1).insert('\n');
    	      }
    	      var contents = this.getContents(index, length + suffixLength);
    	      var diff = contents.diff(new _quillDelta2.default().insert(text).concat(suffix));
    	      var delta = new _quillDelta2.default().retain(index).concat(diff);
    	      return this.applyDelta(delta);
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update(change) {
    	      var mutations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    	      var cursorIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    	      var oldDelta = this.delta;
    	      if (mutations.length === 1 && mutations[0].type === 'characterData' && mutations[0].target.data.match(ASCII) && _parchment2.default.find(mutations[0].target)) {
    	        // Optimization for character changes
    	        var textBlot = _parchment2.default.find(mutations[0].target);
    	        var formats = (0, _block.bubbleFormats)(textBlot);
    	        var index = textBlot.offset(this.scroll);
    	        var oldValue = mutations[0].oldValue.replace(_cursor2.default.CONTENTS, '');
    	        var oldText = new _quillDelta2.default().insert(oldValue);
    	        var newText = new _quillDelta2.default().insert(textBlot.value());
    	        var diffDelta = new _quillDelta2.default().retain(index).concat(oldText.diff(newText, cursorIndex));
    	        change = diffDelta.reduce(function (delta, op) {
    	          if (op.insert) {
    	            return delta.insert(op.insert, formats);
    	          } else {
    	            return delta.push(op);
    	          }
    	        }, new _quillDelta2.default());
    	        this.delta = oldDelta.compose(change);
    	      } else {
    	        this.delta = this.getDelta();
    	        if (!change || !(0, _deepEqual2.default)(oldDelta.compose(change), this.delta)) {
    	          change = oldDelta.diff(this.delta, cursorIndex);
    	        }
    	      }
    	      return change;
    	    }
    	  }]);

    	  return Editor;
    	}();

    	function combineFormats(formats, combined) {
    	  return Object.keys(combined).reduce(function (merged, name) {
    	    if (formats[name] == null) return merged;
    	    if (combined[name] === formats[name]) {
    	      merged[name] = combined[name];
    	    } else if (Array.isArray(combined[name])) {
    	      if (combined[name].indexOf(formats[name]) < 0) {
    	        merged[name] = combined[name].concat([formats[name]]);
    	      }
    	    } else {
    	      merged[name] = [combined[name], formats[name]];
    	    }
    	    return merged;
    	  }, {});
    	}

    	function normalizeDelta(delta) {
    	  return delta.reduce(function (delta, op) {
    	    if (op.insert === 1) {
    	      var attributes = (0, _clone2.default)(op.attributes);
    	      delete attributes['image'];
    	      return delta.insert({ image: op.attributes.image }, attributes);
    	    }
    	    if (op.attributes != null && (op.attributes.list === true || op.attributes.bullet === true)) {
    	      op = (0, _clone2.default)(op);
    	      if (op.attributes.list) {
    	        op.attributes.list = 'ordered';
    	      } else {
    	        op.attributes.list = 'bullet';
    	        delete op.attributes.bullet;
    	      }
    	    }
    	    if (typeof op.insert === 'string') {
    	      var text = op.insert.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
    	      return delta.insert(text, op.attributes);
    	    }
    	    return delta.push(op);
    	  }, new _quillDelta2.default());
    	}

    	exports.default = Editor;

    	/***/ }),
    	/* 15 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.Range = undefined;

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _clone = __webpack_require__(21);

    	var _clone2 = _interopRequireDefault(_clone);

    	var _deepEqual = __webpack_require__(11);

    	var _deepEqual2 = _interopRequireDefault(_deepEqual);

    	var _emitter3 = __webpack_require__(8);

    	var _emitter4 = _interopRequireDefault(_emitter3);

    	var _logger = __webpack_require__(10);

    	var _logger2 = _interopRequireDefault(_logger);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var debug = (0, _logger2.default)('quill:selection');

    	var Range = function Range(index) {
    	  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    	  _classCallCheck(this, Range);

    	  this.index = index;
    	  this.length = length;
    	};

    	var Selection = function () {
    	  function Selection(scroll, emitter) {
    	    var _this = this;

    	    _classCallCheck(this, Selection);

    	    this.emitter = emitter;
    	    this.scroll = scroll;
    	    this.composing = false;
    	    this.mouseDown = false;
    	    this.root = this.scroll.domNode;
    	    this.cursor = _parchment2.default.create('cursor', this);
    	    // savedRange is last non-null range
    	    this.lastRange = this.savedRange = new Range(0, 0);
    	    this.handleComposition();
    	    this.handleDragging();
    	    this.emitter.listenDOM('selectionchange', document, function () {
    	      if (!_this.mouseDown) {
    	        setTimeout(_this.update.bind(_this, _emitter4.default.sources.USER), 1);
    	      }
    	    });
    	    this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type, delta) {
    	      if (type === _emitter4.default.events.TEXT_CHANGE && delta.length() > 0) {
    	        _this.update(_emitter4.default.sources.SILENT);
    	      }
    	    });
    	    this.emitter.on(_emitter4.default.events.SCROLL_BEFORE_UPDATE, function () {
    	      if (!_this.hasFocus()) return;
    	      var native = _this.getNativeRange();
    	      if (native == null) return;
    	      if (native.start.node === _this.cursor.textNode) return; // cursor.restore() will handle
    	      // TODO unclear if this has negative side effects
    	      _this.emitter.once(_emitter4.default.events.SCROLL_UPDATE, function () {
    	        try {
    	          _this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);
    	        } catch (ignored) {}
    	      });
    	    });
    	    this.emitter.on(_emitter4.default.events.SCROLL_OPTIMIZE, function (mutations, context) {
    	      if (context.range) {
    	        var _context$range = context.range,
    	            startNode = _context$range.startNode,
    	            startOffset = _context$range.startOffset,
    	            endNode = _context$range.endNode,
    	            endOffset = _context$range.endOffset;

    	        _this.setNativeRange(startNode, startOffset, endNode, endOffset);
    	      }
    	    });
    	    this.update(_emitter4.default.sources.SILENT);
    	  }

    	  _createClass(Selection, [{
    	    key: 'handleComposition',
    	    value: function handleComposition() {
    	      var _this2 = this;

    	      this.root.addEventListener('compositionstart', function () {
    	        _this2.composing = true;
    	      });
    	      this.root.addEventListener('compositionend', function () {
    	        _this2.composing = false;
    	        if (_this2.cursor.parent) {
    	          var range = _this2.cursor.restore();
    	          if (!range) return;
    	          setTimeout(function () {
    	            _this2.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);
    	          }, 1);
    	        }
    	      });
    	    }
    	  }, {
    	    key: 'handleDragging',
    	    value: function handleDragging() {
    	      var _this3 = this;

    	      this.emitter.listenDOM('mousedown', document.body, function () {
    	        _this3.mouseDown = true;
    	      });
    	      this.emitter.listenDOM('mouseup', document.body, function () {
    	        _this3.mouseDown = false;
    	        _this3.update(_emitter4.default.sources.USER);
    	      });
    	    }
    	  }, {
    	    key: 'focus',
    	    value: function focus() {
    	      if (this.hasFocus()) return;
    	      this.root.focus();
    	      this.setRange(this.savedRange);
    	    }
    	  }, {
    	    key: 'format',
    	    value: function format(_format, value) {
    	      if (this.scroll.whitelist != null && !this.scroll.whitelist[_format]) return;
    	      this.scroll.update();
    	      var nativeRange = this.getNativeRange();
    	      if (nativeRange == null || !nativeRange.native.collapsed || _parchment2.default.query(_format, _parchment2.default.Scope.BLOCK)) return;
    	      if (nativeRange.start.node !== this.cursor.textNode) {
    	        var blot = _parchment2.default.find(nativeRange.start.node, false);
    	        if (blot == null) return;
    	        // TODO Give blot ability to not split
    	        if (blot instanceof _parchment2.default.Leaf) {
    	          var after = blot.split(nativeRange.start.offset);
    	          blot.parent.insertBefore(this.cursor, after);
    	        } else {
    	          blot.insertBefore(this.cursor, nativeRange.start.node); // Should never happen
    	        }
    	        this.cursor.attach();
    	      }
    	      this.cursor.format(_format, value);
    	      this.scroll.optimize();
    	      this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);
    	      this.update();
    	    }
    	  }, {
    	    key: 'getBounds',
    	    value: function getBounds(index) {
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    	      var scrollLength = this.scroll.length();
    	      index = Math.min(index, scrollLength - 1);
    	      length = Math.min(index + length, scrollLength - 1) - index;
    	      var node = void 0,
    	          _scroll$leaf = this.scroll.leaf(index),
    	          _scroll$leaf2 = _slicedToArray(_scroll$leaf, 2),
    	          leaf = _scroll$leaf2[0],
    	          offset = _scroll$leaf2[1];
    	      if (leaf == null) return null;

    	      var _leaf$position = leaf.position(offset, true);

    	      var _leaf$position2 = _slicedToArray(_leaf$position, 2);

    	      node = _leaf$position2[0];
    	      offset = _leaf$position2[1];

    	      var range = document.createRange();
    	      if (length > 0) {
    	        range.setStart(node, offset);

    	        var _scroll$leaf3 = this.scroll.leaf(index + length);

    	        var _scroll$leaf4 = _slicedToArray(_scroll$leaf3, 2);

    	        leaf = _scroll$leaf4[0];
    	        offset = _scroll$leaf4[1];

    	        if (leaf == null) return null;

    	        var _leaf$position3 = leaf.position(offset, true);

    	        var _leaf$position4 = _slicedToArray(_leaf$position3, 2);

    	        node = _leaf$position4[0];
    	        offset = _leaf$position4[1];

    	        range.setEnd(node, offset);
    	        return range.getBoundingClientRect();
    	      } else {
    	        var side = 'left';
    	        var rect = void 0;
    	        if (node instanceof Text) {
    	          if (offset < node.data.length) {
    	            range.setStart(node, offset);
    	            range.setEnd(node, offset + 1);
    	          } else {
    	            range.setStart(node, offset - 1);
    	            range.setEnd(node, offset);
    	            side = 'right';
    	          }
    	          rect = range.getBoundingClientRect();
    	        } else {
    	          rect = leaf.domNode.getBoundingClientRect();
    	          if (offset > 0) side = 'right';
    	        }
    	        return {
    	          bottom: rect.top + rect.height,
    	          height: rect.height,
    	          left: rect[side],
    	          right: rect[side],
    	          top: rect.top,
    	          width: 0
    	        };
    	      }
    	    }
    	  }, {
    	    key: 'getNativeRange',
    	    value: function getNativeRange() {
    	      var selection = document.getSelection();
    	      if (selection == null || selection.rangeCount <= 0) return null;
    	      var nativeRange = selection.getRangeAt(0);
    	      if (nativeRange == null) return null;
    	      var range = this.normalizeNative(nativeRange);
    	      debug.info('getNativeRange', range);
    	      return range;
    	    }
    	  }, {
    	    key: 'getRange',
    	    value: function getRange() {
    	      var normalized = this.getNativeRange();
    	      if (normalized == null) return [null, null];
    	      var range = this.normalizedToRange(normalized);
    	      return [range, normalized];
    	    }
    	  }, {
    	    key: 'hasFocus',
    	    value: function hasFocus() {
    	      return document.activeElement === this.root;
    	    }
    	  }, {
    	    key: 'normalizedToRange',
    	    value: function normalizedToRange(range) {
    	      var _this4 = this;

    	      var positions = [[range.start.node, range.start.offset]];
    	      if (!range.native.collapsed) {
    	        positions.push([range.end.node, range.end.offset]);
    	      }
    	      var indexes = positions.map(function (position) {
    	        var _position = _slicedToArray(position, 2),
    	            node = _position[0],
    	            offset = _position[1];

    	        var blot = _parchment2.default.find(node, true);
    	        var index = blot.offset(_this4.scroll);
    	        if (offset === 0) {
    	          return index;
    	        } else if (blot instanceof _parchment2.default.Container) {
    	          return index + blot.length();
    	        } else {
    	          return index + blot.index(node, offset);
    	        }
    	      });
    	      var end = Math.min(Math.max.apply(Math, _toConsumableArray(indexes)), this.scroll.length() - 1);
    	      var start = Math.min.apply(Math, [end].concat(_toConsumableArray(indexes)));
    	      return new Range(start, end - start);
    	    }
    	  }, {
    	    key: 'normalizeNative',
    	    value: function normalizeNative(nativeRange) {
    	      if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {
    	        return null;
    	      }
    	      var range = {
    	        start: { node: nativeRange.startContainer, offset: nativeRange.startOffset },
    	        end: { node: nativeRange.endContainer, offset: nativeRange.endOffset },
    	        native: nativeRange
    	      };
    	      [range.start, range.end].forEach(function (position) {
    	        var node = position.node,
    	            offset = position.offset;
    	        while (!(node instanceof Text) && node.childNodes.length > 0) {
    	          if (node.childNodes.length > offset) {
    	            node = node.childNodes[offset];
    	            offset = 0;
    	          } else if (node.childNodes.length === offset) {
    	            node = node.lastChild;
    	            offset = node instanceof Text ? node.data.length : node.childNodes.length + 1;
    	          } else {
    	            break;
    	          }
    	        }
    	        position.node = node, position.offset = offset;
    	      });
    	      return range;
    	    }
    	  }, {
    	    key: 'rangeToNative',
    	    value: function rangeToNative(range) {
    	      var _this5 = this;

    	      var indexes = range.collapsed ? [range.index] : [range.index, range.index + range.length];
    	      var args = [];
    	      var scrollLength = this.scroll.length();
    	      indexes.forEach(function (index, i) {
    	        index = Math.min(scrollLength - 1, index);
    	        var node = void 0,
    	            _scroll$leaf5 = _this5.scroll.leaf(index),
    	            _scroll$leaf6 = _slicedToArray(_scroll$leaf5, 2),
    	            leaf = _scroll$leaf6[0],
    	            offset = _scroll$leaf6[1];
    	        var _leaf$position5 = leaf.position(offset, i !== 0);

    	        var _leaf$position6 = _slicedToArray(_leaf$position5, 2);

    	        node = _leaf$position6[0];
    	        offset = _leaf$position6[1];

    	        args.push(node, offset);
    	      });
    	      if (args.length < 2) {
    	        args = args.concat(args);
    	      }
    	      return args;
    	    }
    	  }, {
    	    key: 'scrollIntoView',
    	    value: function scrollIntoView(scrollingContainer) {
    	      var range = this.lastRange;
    	      if (range == null) return;
    	      var bounds = this.getBounds(range.index, range.length);
    	      if (bounds == null) return;
    	      var limit = this.scroll.length() - 1;

    	      var _scroll$line = this.scroll.line(Math.min(range.index, limit)),
    	          _scroll$line2 = _slicedToArray(_scroll$line, 1),
    	          first = _scroll$line2[0];

    	      var last = first;
    	      if (range.length > 0) {
    	        var _scroll$line3 = this.scroll.line(Math.min(range.index + range.length, limit));

    	        var _scroll$line4 = _slicedToArray(_scroll$line3, 1);

    	        last = _scroll$line4[0];
    	      }
    	      if (first == null || last == null) return;
    	      var scrollBounds = scrollingContainer.getBoundingClientRect();
    	      if (bounds.top < scrollBounds.top) {
    	        scrollingContainer.scrollTop -= scrollBounds.top - bounds.top;
    	      } else if (bounds.bottom > scrollBounds.bottom) {
    	        scrollingContainer.scrollTop += bounds.bottom - scrollBounds.bottom;
    	      }
    	    }
    	  }, {
    	    key: 'setNativeRange',
    	    value: function setNativeRange(startNode, startOffset) {
    	      var endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;
    	      var endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;
    	      var force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

    	      debug.info('setNativeRange', startNode, startOffset, endNode, endOffset);
    	      if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {
    	        return;
    	      }
    	      var selection = document.getSelection();
    	      if (selection == null) return;
    	      if (startNode != null) {
    	        if (!this.hasFocus()) this.root.focus();
    	        var native = (this.getNativeRange() || {}).native;
    	        if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {

    	          if (startNode.tagName == "BR") {
    	            startOffset = [].indexOf.call(startNode.parentNode.childNodes, startNode);
    	            startNode = startNode.parentNode;
    	          }
    	          if (endNode.tagName == "BR") {
    	            endOffset = [].indexOf.call(endNode.parentNode.childNodes, endNode);
    	            endNode = endNode.parentNode;
    	          }
    	          var range = document.createRange();
    	          range.setStart(startNode, startOffset);
    	          range.setEnd(endNode, endOffset);
    	          selection.removeAllRanges();
    	          selection.addRange(range);
    	        }
    	      } else {
    	        selection.removeAllRanges();
    	        this.root.blur();
    	        document.body.focus(); // root.blur() not enough on IE11+Travis+SauceLabs (but not local VMs)
    	      }
    	    }
    	  }, {
    	    key: 'setRange',
    	    value: function setRange(range) {
    	      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    	      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;

    	      if (typeof force === 'string') {
    	        source = force;
    	        force = false;
    	      }
    	      debug.info('setRange', range);
    	      if (range != null) {
    	        var args = this.rangeToNative(range);
    	        this.setNativeRange.apply(this, _toConsumableArray(args).concat([force]));
    	      } else {
    	        this.setNativeRange(null);
    	      }
    	      this.update(source);
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update() {
    	      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;

    	      var oldRange = this.lastRange;

    	      var _getRange = this.getRange(),
    	          _getRange2 = _slicedToArray(_getRange, 2),
    	          lastRange = _getRange2[0],
    	          nativeRange = _getRange2[1];

    	      this.lastRange = lastRange;
    	      if (this.lastRange != null) {
    	        this.savedRange = this.lastRange;
    	      }
    	      if (!(0, _deepEqual2.default)(oldRange, this.lastRange)) {
    	        var _emitter;

    	        if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {
    	          this.cursor.restore();
    	        }
    	        var args = [_emitter4.default.events.SELECTION_CHANGE, (0, _clone2.default)(this.lastRange), (0, _clone2.default)(oldRange), source];
    	        (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
    	        if (source !== _emitter4.default.sources.SILENT) {
    	          var _emitter2;

    	          (_emitter2 = this.emitter).emit.apply(_emitter2, args);
    	        }
    	      }
    	    }
    	  }]);

    	  return Selection;
    	}();

    	function contains(parent, descendant) {
    	  try {
    	    // Firefox inserts inaccessible nodes around video elements
    	    descendant.parentNode;
    	  } catch (e) {
    	    return false;
    	  }
    	  // IE11 has bug with Text nodes
    	  // https://connect.microsoft.com/IE/feedback/details/780874/node-contains-is-incorrect
    	  if (descendant instanceof Text) {
    	    descendant = descendant.parentNode;
    	  }
    	  return parent.contains(descendant);
    	}

    	exports.Range = Range;
    	exports.default = Selection;

    	/***/ }),
    	/* 16 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Break = function (_Parchment$Embed) {
    	  _inherits(Break, _Parchment$Embed);

    	  function Break() {
    	    _classCallCheck(this, Break);

    	    return _possibleConstructorReturn(this, (Break.__proto__ || Object.getPrototypeOf(Break)).apply(this, arguments));
    	  }

    	  _createClass(Break, [{
    	    key: 'insertInto',
    	    value: function insertInto(parent, ref) {
    	      if (parent.children.length === 0) {
    	        _get(Break.prototype.__proto__ || Object.getPrototypeOf(Break.prototype), 'insertInto', this).call(this, parent, ref);
    	      } else {
    	        this.remove();
    	      }
    	    }
    	  }, {
    	    key: 'length',
    	    value: function length() {
    	      return 0;
    	    }
    	  }, {
    	    key: 'value',
    	    value: function value() {
    	      return '';
    	    }
    	  }], [{
    	    key: 'value',
    	    value: function value() {
    	      return undefined;
    	    }
    	  }]);

    	  return Break;
    	}(_parchment2.default.Embed);

    	Break.blotName = 'break';
    	Break.tagName = 'BR';

    	exports.default = Break;

    	/***/ }),
    	/* 17 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var linked_list_1 = __webpack_require__(44);
    	var shadow_1 = __webpack_require__(30);
    	var Registry = __webpack_require__(1);
    	var ContainerBlot = /** @class */ (function (_super) {
    	    __extends(ContainerBlot, _super);
    	    function ContainerBlot(domNode) {
    	        var _this = _super.call(this, domNode) || this;
    	        _this.build();
    	        return _this;
    	    }
    	    ContainerBlot.prototype.appendChild = function (other) {
    	        this.insertBefore(other);
    	    };
    	    ContainerBlot.prototype.attach = function () {
    	        _super.prototype.attach.call(this);
    	        this.children.forEach(function (child) {
    	            child.attach();
    	        });
    	    };
    	    ContainerBlot.prototype.build = function () {
    	        var _this = this;
    	        this.children = new linked_list_1.default();
    	        // Need to be reversed for if DOM nodes already in order
    	        [].slice
    	            .call(this.domNode.childNodes)
    	            .reverse()
    	            .forEach(function (node) {
    	            try {
    	                var child = makeBlot(node);
    	                _this.insertBefore(child, _this.children.head || undefined);
    	            }
    	            catch (err) {
    	                if (err instanceof Registry.ParchmentError)
    	                    return;
    	                else
    	                    throw err;
    	            }
    	        });
    	    };
    	    ContainerBlot.prototype.deleteAt = function (index, length) {
    	        if (index === 0 && length === this.length()) {
    	            return this.remove();
    	        }
    	        this.children.forEachAt(index, length, function (child, offset, length) {
    	            child.deleteAt(offset, length);
    	        });
    	    };
    	    ContainerBlot.prototype.descendant = function (criteria, index) {
    	        var _a = this.children.find(index), child = _a[0], offset = _a[1];
    	        if ((criteria.blotName == null && criteria(child)) ||
    	            (criteria.blotName != null && child instanceof criteria)) {
    	            return [child, offset];
    	        }
    	        else if (child instanceof ContainerBlot) {
    	            return child.descendant(criteria, offset);
    	        }
    	        else {
    	            return [null, -1];
    	        }
    	    };
    	    ContainerBlot.prototype.descendants = function (criteria, index, length) {
    	        if (index === void 0) { index = 0; }
    	        if (length === void 0) { length = Number.MAX_VALUE; }
    	        var descendants = [];
    	        var lengthLeft = length;
    	        this.children.forEachAt(index, length, function (child, index, length) {
    	            if ((criteria.blotName == null && criteria(child)) ||
    	                (criteria.blotName != null && child instanceof criteria)) {
    	                descendants.push(child);
    	            }
    	            if (child instanceof ContainerBlot) {
    	                descendants = descendants.concat(child.descendants(criteria, index, lengthLeft));
    	            }
    	            lengthLeft -= length;
    	        });
    	        return descendants;
    	    };
    	    ContainerBlot.prototype.detach = function () {
    	        this.children.forEach(function (child) {
    	            child.detach();
    	        });
    	        _super.prototype.detach.call(this);
    	    };
    	    ContainerBlot.prototype.formatAt = function (index, length, name, value) {
    	        this.children.forEachAt(index, length, function (child, offset, length) {
    	            child.formatAt(offset, length, name, value);
    	        });
    	    };
    	    ContainerBlot.prototype.insertAt = function (index, value, def) {
    	        var _a = this.children.find(index), child = _a[0], offset = _a[1];
    	        if (child) {
    	            child.insertAt(offset, value, def);
    	        }
    	        else {
    	            var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
    	            this.appendChild(blot);
    	        }
    	    };
    	    ContainerBlot.prototype.insertBefore = function (childBlot, refBlot) {
    	        if (this.statics.allowedChildren != null &&
    	            !this.statics.allowedChildren.some(function (child) {
    	                return childBlot instanceof child;
    	            })) {
    	            throw new Registry.ParchmentError("Cannot insert " + childBlot.statics.blotName + " into " + this.statics.blotName);
    	        }
    	        childBlot.insertInto(this, refBlot);
    	    };
    	    ContainerBlot.prototype.length = function () {
    	        return this.children.reduce(function (memo, child) {
    	            return memo + child.length();
    	        }, 0);
    	    };
    	    ContainerBlot.prototype.moveChildren = function (targetParent, refNode) {
    	        this.children.forEach(function (child) {
    	            targetParent.insertBefore(child, refNode);
    	        });
    	    };
    	    ContainerBlot.prototype.optimize = function (context) {
    	        _super.prototype.optimize.call(this, context);
    	        if (this.children.length === 0) {
    	            if (this.statics.defaultChild != null) {
    	                var child = Registry.create(this.statics.defaultChild);
    	                this.appendChild(child);
    	                child.optimize(context);
    	            }
    	            else {
    	                this.remove();
    	            }
    	        }
    	    };
    	    ContainerBlot.prototype.path = function (index, inclusive) {
    	        if (inclusive === void 0) { inclusive = false; }
    	        var _a = this.children.find(index, inclusive), child = _a[0], offset = _a[1];
    	        var position = [[this, index]];
    	        if (child instanceof ContainerBlot) {
    	            return position.concat(child.path(offset, inclusive));
    	        }
    	        else if (child != null) {
    	            position.push([child, offset]);
    	        }
    	        return position;
    	    };
    	    ContainerBlot.prototype.removeChild = function (child) {
    	        this.children.remove(child);
    	    };
    	    ContainerBlot.prototype.replace = function (target) {
    	        if (target instanceof ContainerBlot) {
    	            target.moveChildren(this);
    	        }
    	        _super.prototype.replace.call(this, target);
    	    };
    	    ContainerBlot.prototype.split = function (index, force) {
    	        if (force === void 0) { force = false; }
    	        if (!force) {
    	            if (index === 0)
    	                return this;
    	            if (index === this.length())
    	                return this.next;
    	        }
    	        var after = this.clone();
    	        this.parent.insertBefore(after, this.next);
    	        this.children.forEachAt(index, this.length(), function (child, offset, length) {
    	            child = child.split(offset, force);
    	            after.appendChild(child);
    	        });
    	        return after;
    	    };
    	    ContainerBlot.prototype.unwrap = function () {
    	        this.moveChildren(this.parent, this.next);
    	        this.remove();
    	    };
    	    ContainerBlot.prototype.update = function (mutations, context) {
    	        var _this = this;
    	        var addedNodes = [];
    	        var removedNodes = [];
    	        mutations.forEach(function (mutation) {
    	            if (mutation.target === _this.domNode && mutation.type === 'childList') {
    	                addedNodes.push.apply(addedNodes, mutation.addedNodes);
    	                removedNodes.push.apply(removedNodes, mutation.removedNodes);
    	            }
    	        });
    	        removedNodes.forEach(function (node) {
    	            // Check node has actually been removed
    	            // One exception is Chrome does not immediately remove IFRAMEs
    	            // from DOM but MutationRecord is correct in its reported removal
    	            if (node.parentNode != null &&
    	                // @ts-ignore
    	                node.tagName !== 'IFRAME' &&
    	                document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
    	                return;
    	            }
    	            var blot = Registry.find(node);
    	            if (blot == null)
    	                return;
    	            if (blot.domNode.parentNode == null || blot.domNode.parentNode === _this.domNode) {
    	                blot.detach();
    	            }
    	        });
    	        addedNodes
    	            .filter(function (node) {
    	            return node.parentNode == _this.domNode;
    	        })
    	            .sort(function (a, b) {
    	            if (a === b)
    	                return 0;
    	            if (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {
    	                return 1;
    	            }
    	            return -1;
    	        })
    	            .forEach(function (node) {
    	            var refBlot = null;
    	            if (node.nextSibling != null) {
    	                refBlot = Registry.find(node.nextSibling);
    	            }
    	            var blot = makeBlot(node);
    	            if (blot.next != refBlot || blot.next == null) {
    	                if (blot.parent != null) {
    	                    blot.parent.removeChild(_this);
    	                }
    	                _this.insertBefore(blot, refBlot || undefined);
    	            }
    	        });
    	    };
    	    return ContainerBlot;
    	}(shadow_1.default));
    	function makeBlot(node) {
    	    var blot = Registry.find(node);
    	    if (blot == null) {
    	        try {
    	            blot = Registry.create(node);
    	        }
    	        catch (e) {
    	            blot = Registry.create(Registry.Scope.INLINE);
    	            [].slice.call(node.childNodes).forEach(function (child) {
    	                // @ts-ignore
    	                blot.domNode.appendChild(child);
    	            });
    	            if (node.parentNode) {
    	                node.parentNode.replaceChild(blot.domNode, node);
    	            }
    	            blot.attach();
    	        }
    	    }
    	    return blot;
    	}
    	exports.default = ContainerBlot;


    	/***/ }),
    	/* 18 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var attributor_1 = __webpack_require__(12);
    	var store_1 = __webpack_require__(31);
    	var container_1 = __webpack_require__(17);
    	var Registry = __webpack_require__(1);
    	var FormatBlot = /** @class */ (function (_super) {
    	    __extends(FormatBlot, _super);
    	    function FormatBlot(domNode) {
    	        var _this = _super.call(this, domNode) || this;
    	        _this.attributes = new store_1.default(_this.domNode);
    	        return _this;
    	    }
    	    FormatBlot.formats = function (domNode) {
    	        if (typeof this.tagName === 'string') {
    	            return true;
    	        }
    	        else if (Array.isArray(this.tagName)) {
    	            return domNode.tagName.toLowerCase();
    	        }
    	        return undefined;
    	    };
    	    FormatBlot.prototype.format = function (name, value) {
    	        var format = Registry.query(name);
    	        if (format instanceof attributor_1.default) {
    	            this.attributes.attribute(format, value);
    	        }
    	        else if (value) {
    	            if (format != null && (name !== this.statics.blotName || this.formats()[name] !== value)) {
    	                this.replaceWith(name, value);
    	            }
    	        }
    	    };
    	    FormatBlot.prototype.formats = function () {
    	        var formats = this.attributes.values();
    	        var format = this.statics.formats(this.domNode);
    	        if (format != null) {
    	            formats[this.statics.blotName] = format;
    	        }
    	        return formats;
    	    };
    	    FormatBlot.prototype.replaceWith = function (name, value) {
    	        var replacement = _super.prototype.replaceWith.call(this, name, value);
    	        this.attributes.copy(replacement);
    	        return replacement;
    	    };
    	    FormatBlot.prototype.update = function (mutations, context) {
    	        var _this = this;
    	        _super.prototype.update.call(this, mutations, context);
    	        if (mutations.some(function (mutation) {
    	            return mutation.target === _this.domNode && mutation.type === 'attributes';
    	        })) {
    	            this.attributes.build();
    	        }
    	    };
    	    FormatBlot.prototype.wrap = function (name, value) {
    	        var wrapper = _super.prototype.wrap.call(this, name, value);
    	        if (wrapper instanceof FormatBlot && wrapper.statics.scope === this.statics.scope) {
    	            this.attributes.move(wrapper);
    	        }
    	        return wrapper;
    	    };
    	    return FormatBlot;
    	}(container_1.default));
    	exports.default = FormatBlot;


    	/***/ }),
    	/* 19 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var shadow_1 = __webpack_require__(30);
    	var Registry = __webpack_require__(1);
    	var LeafBlot = /** @class */ (function (_super) {
    	    __extends(LeafBlot, _super);
    	    function LeafBlot() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    LeafBlot.value = function (domNode) {
    	        return true;
    	    };
    	    LeafBlot.prototype.index = function (node, offset) {
    	        if (this.domNode === node ||
    	            this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
    	            return Math.min(offset, 1);
    	        }
    	        return -1;
    	    };
    	    LeafBlot.prototype.position = function (index, inclusive) {
    	        var offset = [].indexOf.call(this.parent.domNode.childNodes, this.domNode);
    	        if (index > 0)
    	            offset += 1;
    	        return [this.parent.domNode, offset];
    	    };
    	    LeafBlot.prototype.value = function () {
    	        var _a;
    	        return _a = {}, _a[this.statics.blotName] = this.statics.value(this.domNode) || true, _a;
    	    };
    	    LeafBlot.scope = Registry.Scope.INLINE_BLOT;
    	    return LeafBlot;
    	}(shadow_1.default));
    	exports.default = LeafBlot;


    	/***/ }),
    	/* 20 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var equal = __webpack_require__(11);
    	var extend = __webpack_require__(3);


    	var lib = {
    	  attributes: {
    	    compose: function (a, b, keepNull) {
    	      if (typeof a !== 'object') a = {};
    	      if (typeof b !== 'object') b = {};
    	      var attributes = extend(true, {}, b);
    	      if (!keepNull) {
    	        attributes = Object.keys(attributes).reduce(function (copy, key) {
    	          if (attributes[key] != null) {
    	            copy[key] = attributes[key];
    	          }
    	          return copy;
    	        }, {});
    	      }
    	      for (var key in a) {
    	        if (a[key] !== undefined && b[key] === undefined) {
    	          attributes[key] = a[key];
    	        }
    	      }
    	      return Object.keys(attributes).length > 0 ? attributes : undefined;
    	    },

    	    diff: function(a, b) {
    	      if (typeof a !== 'object') a = {};
    	      if (typeof b !== 'object') b = {};
    	      var attributes = Object.keys(a).concat(Object.keys(b)).reduce(function (attributes, key) {
    	        if (!equal(a[key], b[key])) {
    	          attributes[key] = b[key] === undefined ? null : b[key];
    	        }
    	        return attributes;
    	      }, {});
    	      return Object.keys(attributes).length > 0 ? attributes : undefined;
    	    },

    	    transform: function (a, b, priority) {
    	      if (typeof a !== 'object') return b;
    	      if (typeof b !== 'object') return undefined;
    	      if (!priority) return b;  // b simply overwrites us without priority
    	      var attributes = Object.keys(b).reduce(function (attributes, key) {
    	        if (a[key] === undefined) attributes[key] = b[key];  // null is a valid value
    	        return attributes;
    	      }, {});
    	      return Object.keys(attributes).length > 0 ? attributes : undefined;
    	    }
    	  },

    	  iterator: function (ops) {
    	    return new Iterator(ops);
    	  },

    	  length: function (op) {
    	    if (typeof op['delete'] === 'number') {
    	      return op['delete'];
    	    } else if (typeof op.retain === 'number') {
    	      return op.retain;
    	    } else {
    	      return typeof op.insert === 'string' ? op.insert.length : 1;
    	    }
    	  }
    	};


    	function Iterator(ops) {
    	  this.ops = ops;
    	  this.index = 0;
    	  this.offset = 0;
    	}
    	Iterator.prototype.hasNext = function () {
    	  return this.peekLength() < Infinity;
    	};

    	Iterator.prototype.next = function (length) {
    	  if (!length) length = Infinity;
    	  var nextOp = this.ops[this.index];
    	  if (nextOp) {
    	    var offset = this.offset;
    	    var opLength = lib.length(nextOp);
    	    if (length >= opLength - offset) {
    	      length = opLength - offset;
    	      this.index += 1;
    	      this.offset = 0;
    	    } else {
    	      this.offset += length;
    	    }
    	    if (typeof nextOp['delete'] === 'number') {
    	      return { 'delete': length };
    	    } else {
    	      var retOp = {};
    	      if (nextOp.attributes) {
    	        retOp.attributes = nextOp.attributes;
    	      }
    	      if (typeof nextOp.retain === 'number') {
    	        retOp.retain = length;
    	      } else if (typeof nextOp.insert === 'string') {
    	        retOp.insert = nextOp.insert.substr(offset, length);
    	      } else {
    	        // offset should === 0, length should === 1
    	        retOp.insert = nextOp.insert;
    	      }
    	      return retOp;
    	    }
    	  } else {
    	    return { retain: Infinity };
    	  }
    	};

    	Iterator.prototype.peek = function () {
    	  return this.ops[this.index];
    	};

    	Iterator.prototype.peekLength = function () {
    	  if (this.ops[this.index]) {
    	    // Should never return 0 if our index is being managed correctly
    	    return lib.length(this.ops[this.index]) - this.offset;
    	  } else {
    	    return Infinity;
    	  }
    	};

    	Iterator.prototype.peekType = function () {
    	  if (this.ops[this.index]) {
    	    if (typeof this.ops[this.index]['delete'] === 'number') {
    	      return 'delete';
    	    } else if (typeof this.ops[this.index].retain === 'number') {
    	      return 'retain';
    	    } else {
    	      return 'insert';
    	    }
    	  }
    	  return 'retain';
    	};

    	Iterator.prototype.rest = function () {
    	  if (!this.hasNext()) {
    	    return [];
    	  } else if (this.offset === 0) {
    	    return this.ops.slice(this.index);
    	  } else {
    	    var offset = this.offset;
    	    var index = this.index;
    	    var next = this.next();
    	    var rest = this.ops.slice(this.index);
    	    this.offset = offset;
    	    this.index = index;
    	    return [next].concat(rest);
    	  }
    	};


    	module.exports = lib;


    	/***/ }),
    	/* 21 */
    	/***/ (function(module, exports) {

    	var clone = (function() {

    	function _instanceof(obj, type) {
    	  return type != null && obj instanceof type;
    	}

    	var nativeMap;
    	try {
    	  nativeMap = Map;
    	} catch(_) {
    	  // maybe a reference error because no `Map`. Give it a dummy value that no
    	  // value will ever be an instanceof.
    	  nativeMap = function() {};
    	}

    	var nativeSet;
    	try {
    	  nativeSet = Set;
    	} catch(_) {
    	  nativeSet = function() {};
    	}

    	var nativePromise;
    	try {
    	  nativePromise = Promise;
    	} catch(_) {
    	  nativePromise = function() {};
    	}

    	/**
    	 * Clones (copies) an Object using deep copying.
    	 *
    	 * This function supports circular references by default, but if you are certain
    	 * there are no circular references in your object, you can save some CPU time
    	 * by calling clone(obj, false).
    	 *
    	 * Caution: if `circular` is false and `parent` contains circular references,
    	 * your program may enter an infinite loop and crash.
    	 *
    	 * @param `parent` - the object to be cloned
    	 * @param `circular` - set to true if the object to be cloned may contain
    	 *    circular references. (optional - true by default)
    	 * @param `depth` - set to a number if the object is only to be cloned to
    	 *    a particular depth. (optional - defaults to Infinity)
    	 * @param `prototype` - sets the prototype to be used when cloning an object.
    	 *    (optional - defaults to parent prototype).
    	 * @param `includeNonEnumerable` - set to true if the non-enumerable properties
    	 *    should be cloned as well. Non-enumerable properties on the prototype
    	 *    chain will be ignored. (optional - false by default)
    	*/
    	function clone(parent, circular, depth, prototype, includeNonEnumerable) {
    	  if (typeof circular === 'object') {
    	    depth = circular.depth;
    	    prototype = circular.prototype;
    	    includeNonEnumerable = circular.includeNonEnumerable;
    	    circular = circular.circular;
    	  }
    	  // maintain two arrays for circular references, where corresponding parents
    	  // and children have the same index
    	  var allParents = [];
    	  var allChildren = [];

    	  var useBuffer = typeof Buffer != 'undefined';

    	  if (typeof circular == 'undefined')
    	    circular = true;

    	  if (typeof depth == 'undefined')
    	    depth = Infinity;

    	  // recurse this function so we don't reset allParents and allChildren
    	  function _clone(parent, depth) {
    	    // cloning null always returns null
    	    if (parent === null)
    	      return null;

    	    if (depth === 0)
    	      return parent;

    	    var child;
    	    var proto;
    	    if (typeof parent != 'object') {
    	      return parent;
    	    }

    	    if (_instanceof(parent, nativeMap)) {
    	      child = new nativeMap();
    	    } else if (_instanceof(parent, nativeSet)) {
    	      child = new nativeSet();
    	    } else if (_instanceof(parent, nativePromise)) {
    	      child = new nativePromise(function (resolve, reject) {
    	        parent.then(function(value) {
    	          resolve(_clone(value, depth - 1));
    	        }, function(err) {
    	          reject(_clone(err, depth - 1));
    	        });
    	      });
    	    } else if (clone.__isArray(parent)) {
    	      child = [];
    	    } else if (clone.__isRegExp(parent)) {
    	      child = new RegExp(parent.source, __getRegExpFlags(parent));
    	      if (parent.lastIndex) child.lastIndex = parent.lastIndex;
    	    } else if (clone.__isDate(parent)) {
    	      child = new Date(parent.getTime());
    	    } else if (useBuffer && Buffer.isBuffer(parent)) {
    	      if (Buffer.allocUnsafe) {
    	        // Node.js >= 4.5.0
    	        child = Buffer.allocUnsafe(parent.length);
    	      } else {
    	        // Older Node.js versions
    	        child = new Buffer(parent.length);
    	      }
    	      parent.copy(child);
    	      return child;
    	    } else if (_instanceof(parent, Error)) {
    	      child = Object.create(parent);
    	    } else {
    	      if (typeof prototype == 'undefined') {
    	        proto = Object.getPrototypeOf(parent);
    	        child = Object.create(proto);
    	      }
    	      else {
    	        child = Object.create(prototype);
    	        proto = prototype;
    	      }
    	    }

    	    if (circular) {
    	      var index = allParents.indexOf(parent);

    	      if (index != -1) {
    	        return allChildren[index];
    	      }
    	      allParents.push(parent);
    	      allChildren.push(child);
    	    }

    	    if (_instanceof(parent, nativeMap)) {
    	      parent.forEach(function(value, key) {
    	        var keyChild = _clone(key, depth - 1);
    	        var valueChild = _clone(value, depth - 1);
    	        child.set(keyChild, valueChild);
    	      });
    	    }
    	    if (_instanceof(parent, nativeSet)) {
    	      parent.forEach(function(value) {
    	        var entryChild = _clone(value, depth - 1);
    	        child.add(entryChild);
    	      });
    	    }

    	    for (var i in parent) {
    	      var attrs;
    	      if (proto) {
    	        attrs = Object.getOwnPropertyDescriptor(proto, i);
    	      }

    	      if (attrs && attrs.set == null) {
    	        continue;
    	      }
    	      child[i] = _clone(parent[i], depth - 1);
    	    }

    	    if (Object.getOwnPropertySymbols) {
    	      var symbols = Object.getOwnPropertySymbols(parent);
    	      for (var i = 0; i < symbols.length; i++) {
    	        // Don't need to worry about cloning a symbol because it is a primitive,
    	        // like a number or string.
    	        var symbol = symbols[i];
    	        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
    	        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
    	          continue;
    	        }
    	        child[symbol] = _clone(parent[symbol], depth - 1);
    	        if (!descriptor.enumerable) {
    	          Object.defineProperty(child, symbol, {
    	            enumerable: false
    	          });
    	        }
    	      }
    	    }

    	    if (includeNonEnumerable) {
    	      var allPropertyNames = Object.getOwnPropertyNames(parent);
    	      for (var i = 0; i < allPropertyNames.length; i++) {
    	        var propertyName = allPropertyNames[i];
    	        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
    	        if (descriptor && descriptor.enumerable) {
    	          continue;
    	        }
    	        child[propertyName] = _clone(parent[propertyName], depth - 1);
    	        Object.defineProperty(child, propertyName, {
    	          enumerable: false
    	        });
    	      }
    	    }

    	    return child;
    	  }

    	  return _clone(parent, depth);
    	}

    	/**
    	 * Simple flat clone using prototype, accepts only objects, usefull for property
    	 * override on FLAT configuration object (no nested props).
    	 *
    	 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
    	 * works.
    	 */
    	clone.clonePrototype = function clonePrototype(parent) {
    	  if (parent === null)
    	    return null;

    	  var c = function () {};
    	  c.prototype = parent;
    	  return new c();
    	};

    	// private utility functions

    	function __objToStr(o) {
    	  return Object.prototype.toString.call(o);
    	}
    	clone.__objToStr = __objToStr;

    	function __isDate(o) {
    	  return typeof o === 'object' && __objToStr(o) === '[object Date]';
    	}
    	clone.__isDate = __isDate;

    	function __isArray(o) {
    	  return typeof o === 'object' && __objToStr(o) === '[object Array]';
    	}
    	clone.__isArray = __isArray;

    	function __isRegExp(o) {
    	  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
    	}
    	clone.__isRegExp = __isRegExp;

    	function __getRegExpFlags(re) {
    	  var flags = '';
    	  if (re.global) flags += 'g';
    	  if (re.ignoreCase) flags += 'i';
    	  if (re.multiline) flags += 'm';
    	  return flags;
    	}
    	clone.__getRegExpFlags = __getRegExpFlags;

    	return clone;
    	})();

    	if (typeof module === 'object' && module.exports) {
    	  module.exports = clone;
    	}


    	/***/ }),
    	/* 22 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _emitter = __webpack_require__(8);

    	var _emitter2 = _interopRequireDefault(_emitter);

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	var _break = __webpack_require__(16);

    	var _break2 = _interopRequireDefault(_break);

    	var _code = __webpack_require__(13);

    	var _code2 = _interopRequireDefault(_code);

    	var _container = __webpack_require__(25);

    	var _container2 = _interopRequireDefault(_container);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	function isLine(blot) {
    	  return blot instanceof _block2.default || blot instanceof _block.BlockEmbed;
    	}

    	var Scroll = function (_Parchment$Scroll) {
    	  _inherits(Scroll, _Parchment$Scroll);

    	  function Scroll(domNode, config) {
    	    _classCallCheck(this, Scroll);

    	    var _this = _possibleConstructorReturn(this, (Scroll.__proto__ || Object.getPrototypeOf(Scroll)).call(this, domNode));

    	    _this.emitter = config.emitter;
    	    if (Array.isArray(config.whitelist)) {
    	      _this.whitelist = config.whitelist.reduce(function (whitelist, format) {
    	        whitelist[format] = true;
    	        return whitelist;
    	      }, {});
    	    }
    	    // Some reason fixes composition issues with character languages in Windows/Chrome, Safari
    	    _this.domNode.addEventListener('DOMNodeInserted', function () {});
    	    _this.optimize();
    	    _this.enable();
    	    return _this;
    	  }

    	  _createClass(Scroll, [{
    	    key: 'batchStart',
    	    value: function batchStart() {
    	      this.batch = true;
    	    }
    	  }, {
    	    key: 'batchEnd',
    	    value: function batchEnd() {
    	      this.batch = false;
    	      this.optimize();
    	    }
    	  }, {
    	    key: 'deleteAt',
    	    value: function deleteAt(index, length) {
    	      var _line = this.line(index),
    	          _line2 = _slicedToArray(_line, 2),
    	          first = _line2[0],
    	          offset = _line2[1];

    	      var _line3 = this.line(index + length),
    	          _line4 = _slicedToArray(_line3, 1),
    	          last = _line4[0];

    	      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'deleteAt', this).call(this, index, length);
    	      if (last != null && first !== last && offset > 0) {
    	        if (first instanceof _block.BlockEmbed || last instanceof _block.BlockEmbed) {
    	          this.optimize();
    	          return;
    	        }
    	        if (first instanceof _code2.default) {
    	          var newlineIndex = first.newlineIndex(first.length(), true);
    	          if (newlineIndex > -1) {
    	            first = first.split(newlineIndex + 1);
    	            if (first === last) {
    	              this.optimize();
    	              return;
    	            }
    	          }
    	        } else if (last instanceof _code2.default) {
    	          var _newlineIndex = last.newlineIndex(0);
    	          if (_newlineIndex > -1) {
    	            last.split(_newlineIndex + 1);
    	          }
    	        }
    	        var ref = last.children.head instanceof _break2.default ? null : last.children.head;
    	        first.moveChildren(last, ref);
    	        first.remove();
    	      }
    	      this.optimize();
    	    }
    	  }, {
    	    key: 'enable',
    	    value: function enable() {
    	      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    	      this.domNode.setAttribute('contenteditable', enabled);
    	    }
    	  }, {
    	    key: 'formatAt',
    	    value: function formatAt(index, length, format, value) {
    	      if (this.whitelist != null && !this.whitelist[format]) return;
    	      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'formatAt', this).call(this, index, length, format, value);
    	      this.optimize();
    	    }
    	  }, {
    	    key: 'insertAt',
    	    value: function insertAt(index, value, def) {
    	      if (def != null && this.whitelist != null && !this.whitelist[value]) return;
    	      if (index >= this.length()) {
    	        if (def == null || _parchment2.default.query(value, _parchment2.default.Scope.BLOCK) == null) {
    	          var blot = _parchment2.default.create(this.statics.defaultChild);
    	          this.appendChild(blot);
    	          if (def == null && value.endsWith('\n')) {
    	            value = value.slice(0, -1);
    	          }
    	          blot.insertAt(0, value, def);
    	        } else {
    	          var embed = _parchment2.default.create(value, def);
    	          this.appendChild(embed);
    	        }
    	      } else {
    	        _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertAt', this).call(this, index, value, def);
    	      }
    	      this.optimize();
    	    }
    	  }, {
    	    key: 'insertBefore',
    	    value: function insertBefore(blot, ref) {
    	      if (blot.statics.scope === _parchment2.default.Scope.INLINE_BLOT) {
    	        var wrapper = _parchment2.default.create(this.statics.defaultChild);
    	        wrapper.appendChild(blot);
    	        blot = wrapper;
    	      }
    	      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertBefore', this).call(this, blot, ref);
    	    }
    	  }, {
    	    key: 'leaf',
    	    value: function leaf(index) {
    	      return this.path(index).pop() || [null, -1];
    	    }
    	  }, {
    	    key: 'line',
    	    value: function line(index) {
    	      if (index === this.length()) {
    	        return this.line(index - 1);
    	      }
    	      return this.descendant(isLine, index);
    	    }
    	  }, {
    	    key: 'lines',
    	    value: function lines() {
    	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

    	      var getLines = function getLines(blot, index, length) {
    	        var lines = [],
    	            lengthLeft = length;
    	        blot.children.forEachAt(index, length, function (child, index, length) {
    	          if (isLine(child)) {
    	            lines.push(child);
    	          } else if (child instanceof _parchment2.default.Container) {
    	            lines = lines.concat(getLines(child, index, lengthLeft));
    	          }
    	          lengthLeft -= length;
    	        });
    	        return lines;
    	      };
    	      return getLines(this, index, length);
    	    }
    	  }, {
    	    key: 'optimize',
    	    value: function optimize() {
    	      var mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    	      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    	      if (this.batch === true) return;
    	      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'optimize', this).call(this, mutations, context);
    	      if (mutations.length > 0) {
    	        this.emitter.emit(_emitter2.default.events.SCROLL_OPTIMIZE, mutations, context);
    	      }
    	    }
    	  }, {
    	    key: 'path',
    	    value: function path(index) {
    	      return _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'path', this).call(this, index).slice(1); // Exclude self
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update(mutations) {
    	      if (this.batch === true) return;
    	      var source = _emitter2.default.sources.USER;
    	      if (typeof mutations === 'string') {
    	        source = mutations;
    	      }
    	      if (!Array.isArray(mutations)) {
    	        mutations = this.observer.takeRecords();
    	      }
    	      if (mutations.length > 0) {
    	        this.emitter.emit(_emitter2.default.events.SCROLL_BEFORE_UPDATE, source, mutations);
    	      }
    	      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'update', this).call(this, mutations.concat([])); // pass copy
    	      if (mutations.length > 0) {
    	        this.emitter.emit(_emitter2.default.events.SCROLL_UPDATE, source, mutations);
    	      }
    	    }
    	  }]);

    	  return Scroll;
    	}(_parchment2.default.Scroll);

    	Scroll.blotName = 'scroll';
    	Scroll.className = 'ql-editor';
    	Scroll.tagName = 'DIV';
    	Scroll.defaultChild = 'block';
    	Scroll.allowedChildren = [_block2.default, _block.BlockEmbed, _container2.default];

    	exports.default = Scroll;

    	/***/ }),
    	/* 23 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.SHORTKEY = exports.default = undefined;

    	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _clone = __webpack_require__(21);

    	var _clone2 = _interopRequireDefault(_clone);

    	var _deepEqual = __webpack_require__(11);

    	var _deepEqual2 = _interopRequireDefault(_deepEqual);

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _op = __webpack_require__(20);

    	var _op2 = _interopRequireDefault(_op);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _logger = __webpack_require__(10);

    	var _logger2 = _interopRequireDefault(_logger);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var debug = (0, _logger2.default)('quill:keyboard');

    	var SHORTKEY = /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';

    	var Keyboard = function (_Module) {
    	  _inherits(Keyboard, _Module);

    	  _createClass(Keyboard, null, [{
    	    key: 'match',
    	    value: function match(evt, binding) {
    	      binding = normalize(binding);
    	      if (['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].some(function (key) {
    	        return !!binding[key] !== evt[key] && binding[key] !== null;
    	      })) {
    	        return false;
    	      }
    	      return binding.key === (evt.which || evt.keyCode);
    	    }
    	  }]);

    	  function Keyboard(quill, options) {
    	    _classCallCheck(this, Keyboard);

    	    var _this = _possibleConstructorReturn(this, (Keyboard.__proto__ || Object.getPrototypeOf(Keyboard)).call(this, quill, options));

    	    _this.bindings = {};
    	    Object.keys(_this.options.bindings).forEach(function (name) {
    	      if (name === 'list autofill' && quill.scroll.whitelist != null && !quill.scroll.whitelist['list']) {
    	        return;
    	      }
    	      if (_this.options.bindings[name]) {
    	        _this.addBinding(_this.options.bindings[name]);
    	      }
    	    });
    	    _this.addBinding({ key: Keyboard.keys.ENTER, shiftKey: null }, handleEnter);
    	    _this.addBinding({ key: Keyboard.keys.ENTER, metaKey: null, ctrlKey: null, altKey: null }, function () {});
    	    if (/Firefox/i.test(navigator.userAgent)) {
    	      // Need to handle delete and backspace for Firefox in the general case #1171
    	      _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true }, handleBackspace);
    	      _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true }, handleDelete);
    	    } else {
    	      _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true, prefix: /^.?$/ }, handleBackspace);
    	      _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true, suffix: /^.?$/ }, handleDelete);
    	    }
    	    _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: false }, handleDeleteRange);
    	    _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: false }, handleDeleteRange);
    	    _this.addBinding({ key: Keyboard.keys.BACKSPACE, altKey: null, ctrlKey: null, metaKey: null, shiftKey: null }, { collapsed: true, offset: 0 }, handleBackspace);
    	    _this.listen();
    	    return _this;
    	  }

    	  _createClass(Keyboard, [{
    	    key: 'addBinding',
    	    value: function addBinding(key) {
    	      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    	      var handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    	      var binding = normalize(key);
    	      if (binding == null || binding.key == null) {
    	        return debug.warn('Attempted to add invalid keyboard binding', binding);
    	      }
    	      if (typeof context === 'function') {
    	        context = { handler: context };
    	      }
    	      if (typeof handler === 'function') {
    	        handler = { handler: handler };
    	      }
    	      binding = (0, _extend2.default)(binding, context, handler);
    	      this.bindings[binding.key] = this.bindings[binding.key] || [];
    	      this.bindings[binding.key].push(binding);
    	    }
    	  }, {
    	    key: 'listen',
    	    value: function listen() {
    	      var _this2 = this;

    	      this.quill.root.addEventListener('keydown', function (evt) {
    	        if (evt.defaultPrevented) return;
    	        var which = evt.which || evt.keyCode;
    	        var bindings = (_this2.bindings[which] || []).filter(function (binding) {
    	          return Keyboard.match(evt, binding);
    	        });
    	        if (bindings.length === 0) return;
    	        var range = _this2.quill.getSelection();
    	        if (range == null || !_this2.quill.hasFocus()) return;

    	        var _quill$getLine = _this2.quill.getLine(range.index),
    	            _quill$getLine2 = _slicedToArray(_quill$getLine, 2),
    	            line = _quill$getLine2[0],
    	            offset = _quill$getLine2[1];

    	        var _quill$getLeaf = _this2.quill.getLeaf(range.index),
    	            _quill$getLeaf2 = _slicedToArray(_quill$getLeaf, 2),
    	            leafStart = _quill$getLeaf2[0],
    	            offsetStart = _quill$getLeaf2[1];

    	        var _ref = range.length === 0 ? [leafStart, offsetStart] : _this2.quill.getLeaf(range.index + range.length),
    	            _ref2 = _slicedToArray(_ref, 2),
    	            leafEnd = _ref2[0],
    	            offsetEnd = _ref2[1];

    	        var prefixText = leafStart instanceof _parchment2.default.Text ? leafStart.value().slice(0, offsetStart) : '';
    	        var suffixText = leafEnd instanceof _parchment2.default.Text ? leafEnd.value().slice(offsetEnd) : '';
    	        var curContext = {
    	          collapsed: range.length === 0,
    	          empty: range.length === 0 && line.length() <= 1,
    	          format: _this2.quill.getFormat(range),
    	          offset: offset,
    	          prefix: prefixText,
    	          suffix: suffixText
    	        };
    	        var prevented = bindings.some(function (binding) {
    	          if (binding.collapsed != null && binding.collapsed !== curContext.collapsed) return false;
    	          if (binding.empty != null && binding.empty !== curContext.empty) return false;
    	          if (binding.offset != null && binding.offset !== curContext.offset) return false;
    	          if (Array.isArray(binding.format)) {
    	            // any format is present
    	            if (binding.format.every(function (name) {
    	              return curContext.format[name] == null;
    	            })) {
    	              return false;
    	            }
    	          } else if (_typeof(binding.format) === 'object') {
    	            // all formats must match
    	            if (!Object.keys(binding.format).every(function (name) {
    	              if (binding.format[name] === true) return curContext.format[name] != null;
    	              if (binding.format[name] === false) return curContext.format[name] == null;
    	              return (0, _deepEqual2.default)(binding.format[name], curContext.format[name]);
    	            })) {
    	              return false;
    	            }
    	          }
    	          if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) return false;
    	          if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) return false;
    	          return binding.handler.call(_this2, range, curContext) !== true;
    	        });
    	        if (prevented) {
    	          evt.preventDefault();
    	        }
    	      });
    	    }
    	  }]);

    	  return Keyboard;
    	}(_module2.default);

    	Keyboard.keys = {
    	  BACKSPACE: 8,
    	  TAB: 9,
    	  ENTER: 13,
    	  ESCAPE: 27,
    	  LEFT: 37,
    	  UP: 38,
    	  RIGHT: 39,
    	  DOWN: 40,
    	  DELETE: 46
    	};

    	Keyboard.DEFAULTS = {
    	  bindings: {
    	    'bold': makeFormatHandler('bold'),
    	    'italic': makeFormatHandler('italic'),
    	    'underline': makeFormatHandler('underline'),
    	    'indent': {
    	      // highlight tab or tab at beginning of list, indent or blockquote
    	      key: Keyboard.keys.TAB,
    	      format: ['blockquote', 'indent', 'list'],
    	      handler: function handler(range, context) {
    	        if (context.collapsed && context.offset !== 0) return true;
    	        this.quill.format('indent', '+1', _quill2.default.sources.USER);
    	      }
    	    },
    	    'outdent': {
    	      key: Keyboard.keys.TAB,
    	      shiftKey: true,
    	      format: ['blockquote', 'indent', 'list'],
    	      // highlight tab or tab at beginning of list, indent or blockquote
    	      handler: function handler(range, context) {
    	        if (context.collapsed && context.offset !== 0) return true;
    	        this.quill.format('indent', '-1', _quill2.default.sources.USER);
    	      }
    	    },
    	    'outdent backspace': {
    	      key: Keyboard.keys.BACKSPACE,
    	      collapsed: true,
    	      shiftKey: null,
    	      metaKey: null,
    	      ctrlKey: null,
    	      altKey: null,
    	      format: ['indent', 'list'],
    	      offset: 0,
    	      handler: function handler(range, context) {
    	        if (context.format.indent != null) {
    	          this.quill.format('indent', '-1', _quill2.default.sources.USER);
    	        } else if (context.format.list != null) {
    	          this.quill.format('list', false, _quill2.default.sources.USER);
    	        }
    	      }
    	    },
    	    'indent code-block': makeCodeBlockHandler(true),
    	    'outdent code-block': makeCodeBlockHandler(false),
    	    'remove tab': {
    	      key: Keyboard.keys.TAB,
    	      shiftKey: true,
    	      collapsed: true,
    	      prefix: /\t$/,
    	      handler: function handler(range) {
    	        this.quill.deleteText(range.index - 1, 1, _quill2.default.sources.USER);
    	      }
    	    },
    	    'tab': {
    	      key: Keyboard.keys.TAB,
    	      handler: function handler(range) {
    	        this.quill.history.cutoff();
    	        var delta = new _quillDelta2.default().retain(range.index).delete(range.length).insert('\t');
    	        this.quill.updateContents(delta, _quill2.default.sources.USER);
    	        this.quill.history.cutoff();
    	        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
    	      }
    	    },
    	    'list empty enter': {
    	      key: Keyboard.keys.ENTER,
    	      collapsed: true,
    	      format: ['list'],
    	      empty: true,
    	      handler: function handler(range, context) {
    	        this.quill.format('list', false, _quill2.default.sources.USER);
    	        if (context.format.indent) {
    	          this.quill.format('indent', false, _quill2.default.sources.USER);
    	        }
    	      }
    	    },
    	    'checklist enter': {
    	      key: Keyboard.keys.ENTER,
    	      collapsed: true,
    	      format: { list: 'checked' },
    	      handler: function handler(range) {
    	        var _quill$getLine3 = this.quill.getLine(range.index),
    	            _quill$getLine4 = _slicedToArray(_quill$getLine3, 2),
    	            line = _quill$getLine4[0],
    	            offset = _quill$getLine4[1];

    	        var formats = (0, _extend2.default)({}, line.formats(), { list: 'checked' });
    	        var delta = new _quillDelta2.default().retain(range.index).insert('\n', formats).retain(line.length() - offset - 1).retain(1, { list: 'unchecked' });
    	        this.quill.updateContents(delta, _quill2.default.sources.USER);
    	        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
    	        this.quill.scrollIntoView();
    	      }
    	    },
    	    'header enter': {
    	      key: Keyboard.keys.ENTER,
    	      collapsed: true,
    	      format: ['header'],
    	      suffix: /^$/,
    	      handler: function handler(range, context) {
    	        var _quill$getLine5 = this.quill.getLine(range.index),
    	            _quill$getLine6 = _slicedToArray(_quill$getLine5, 2),
    	            line = _quill$getLine6[0],
    	            offset = _quill$getLine6[1];

    	        var delta = new _quillDelta2.default().retain(range.index).insert('\n', context.format).retain(line.length() - offset - 1).retain(1, { header: null });
    	        this.quill.updateContents(delta, _quill2.default.sources.USER);
    	        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
    	        this.quill.scrollIntoView();
    	      }
    	    },
    	    'list autofill': {
    	      key: ' ',
    	      collapsed: true,
    	      format: { list: false },
    	      prefix: /^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,
    	      handler: function handler(range, context) {
    	        var length = context.prefix.length;

    	        var _quill$getLine7 = this.quill.getLine(range.index),
    	            _quill$getLine8 = _slicedToArray(_quill$getLine7, 2),
    	            line = _quill$getLine8[0],
    	            offset = _quill$getLine8[1];

    	        if (offset > length) return true;
    	        var value = void 0;
    	        switch (context.prefix.trim()) {
    	          case '[]':case '[ ]':
    	            value = 'unchecked';
    	            break;
    	          case '[x]':
    	            value = 'checked';
    	            break;
    	          case '-':case '*':
    	            value = 'bullet';
    	            break;
    	          default:
    	            value = 'ordered';
    	        }
    	        this.quill.insertText(range.index, ' ', _quill2.default.sources.USER);
    	        this.quill.history.cutoff();
    	        var delta = new _quillDelta2.default().retain(range.index - offset).delete(length + 1).retain(line.length() - 2 - offset).retain(1, { list: value });
    	        this.quill.updateContents(delta, _quill2.default.sources.USER);
    	        this.quill.history.cutoff();
    	        this.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);
    	      }
    	    },
    	    'code exit': {
    	      key: Keyboard.keys.ENTER,
    	      collapsed: true,
    	      format: ['code-block'],
    	      prefix: /\n\n$/,
    	      suffix: /^\s+$/,
    	      handler: function handler(range) {
    	        var _quill$getLine9 = this.quill.getLine(range.index),
    	            _quill$getLine10 = _slicedToArray(_quill$getLine9, 2),
    	            line = _quill$getLine10[0],
    	            offset = _quill$getLine10[1];

    	        var delta = new _quillDelta2.default().retain(range.index + line.length() - offset - 2).retain(1, { 'code-block': null }).delete(1);
    	        this.quill.updateContents(delta, _quill2.default.sources.USER);
    	      }
    	    },
    	    'embed left': makeEmbedArrowHandler(Keyboard.keys.LEFT, false),
    	    'embed left shift': makeEmbedArrowHandler(Keyboard.keys.LEFT, true),
    	    'embed right': makeEmbedArrowHandler(Keyboard.keys.RIGHT, false),
    	    'embed right shift': makeEmbedArrowHandler(Keyboard.keys.RIGHT, true)
    	  }
    	};

    	function makeEmbedArrowHandler(key, shiftKey) {
    	  var _ref3;

    	  var where = key === Keyboard.keys.LEFT ? 'prefix' : 'suffix';
    	  return _ref3 = {
    	    key: key,
    	    shiftKey: shiftKey,
    	    altKey: null
    	  }, _defineProperty(_ref3, where, /^$/), _defineProperty(_ref3, 'handler', function handler(range) {
    	    var index = range.index;
    	    if (key === Keyboard.keys.RIGHT) {
    	      index += range.length + 1;
    	    }

    	    var _quill$getLeaf3 = this.quill.getLeaf(index),
    	        _quill$getLeaf4 = _slicedToArray(_quill$getLeaf3, 1),
    	        leaf = _quill$getLeaf4[0];

    	    if (!(leaf instanceof _parchment2.default.Embed)) return true;
    	    if (key === Keyboard.keys.LEFT) {
    	      if (shiftKey) {
    	        this.quill.setSelection(range.index - 1, range.length + 1, _quill2.default.sources.USER);
    	      } else {
    	        this.quill.setSelection(range.index - 1, _quill2.default.sources.USER);
    	      }
    	    } else {
    	      if (shiftKey) {
    	        this.quill.setSelection(range.index, range.length + 1, _quill2.default.sources.USER);
    	      } else {
    	        this.quill.setSelection(range.index + range.length + 1, _quill2.default.sources.USER);
    	      }
    	    }
    	    return false;
    	  }), _ref3;
    	}

    	function handleBackspace(range, context) {
    	  if (range.index === 0 || this.quill.getLength() <= 1) return;

    	  var _quill$getLine11 = this.quill.getLine(range.index),
    	      _quill$getLine12 = _slicedToArray(_quill$getLine11, 1),
    	      line = _quill$getLine12[0];

    	  var formats = {};
    	  if (context.offset === 0) {
    	    var _quill$getLine13 = this.quill.getLine(range.index - 1),
    	        _quill$getLine14 = _slicedToArray(_quill$getLine13, 1),
    	        prev = _quill$getLine14[0];

    	    if (prev != null && prev.length() > 1) {
    	      var curFormats = line.formats();
    	      var prevFormats = this.quill.getFormat(range.index - 1, 1);
    	      formats = _op2.default.attributes.diff(curFormats, prevFormats) || {};
    	    }
    	  }
    	  // Check for astral symbols
    	  var length = /[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(context.prefix) ? 2 : 1;
    	  this.quill.deleteText(range.index - length, length, _quill2.default.sources.USER);
    	  if (Object.keys(formats).length > 0) {
    	    this.quill.formatLine(range.index - length, length, formats, _quill2.default.sources.USER);
    	  }
    	  this.quill.focus();
    	}

    	function handleDelete(range, context) {
    	  // Check for astral symbols
    	  var length = /^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(context.suffix) ? 2 : 1;
    	  if (range.index >= this.quill.getLength() - length) return;
    	  var formats = {},
    	      nextLength = 0;

    	  var _quill$getLine15 = this.quill.getLine(range.index),
    	      _quill$getLine16 = _slicedToArray(_quill$getLine15, 1),
    	      line = _quill$getLine16[0];

    	  if (context.offset >= line.length() - 1) {
    	    var _quill$getLine17 = this.quill.getLine(range.index + 1),
    	        _quill$getLine18 = _slicedToArray(_quill$getLine17, 1),
    	        next = _quill$getLine18[0];

    	    if (next) {
    	      var curFormats = line.formats();
    	      var nextFormats = this.quill.getFormat(range.index, 1);
    	      formats = _op2.default.attributes.diff(curFormats, nextFormats) || {};
    	      nextLength = next.length();
    	    }
    	  }
    	  this.quill.deleteText(range.index, length, _quill2.default.sources.USER);
    	  if (Object.keys(formats).length > 0) {
    	    this.quill.formatLine(range.index + nextLength - 1, length, formats, _quill2.default.sources.USER);
    	  }
    	}

    	function handleDeleteRange(range) {
    	  var lines = this.quill.getLines(range);
    	  var formats = {};
    	  if (lines.length > 1) {
    	    var firstFormats = lines[0].formats();
    	    var lastFormats = lines[lines.length - 1].formats();
    	    formats = _op2.default.attributes.diff(lastFormats, firstFormats) || {};
    	  }
    	  this.quill.deleteText(range, _quill2.default.sources.USER);
    	  if (Object.keys(formats).length > 0) {
    	    this.quill.formatLine(range.index, 1, formats, _quill2.default.sources.USER);
    	  }
    	  this.quill.setSelection(range.index, _quill2.default.sources.SILENT);
    	  this.quill.focus();
    	}

    	function handleEnter(range, context) {
    	  var _this3 = this;

    	  if (range.length > 0) {
    	    this.quill.scroll.deleteAt(range.index, range.length); // So we do not trigger text-change
    	  }
    	  var lineFormats = Object.keys(context.format).reduce(function (lineFormats, format) {
    	    if (_parchment2.default.query(format, _parchment2.default.Scope.BLOCK) && !Array.isArray(context.format[format])) {
    	      lineFormats[format] = context.format[format];
    	    }
    	    return lineFormats;
    	  }, {});
    	  this.quill.insertText(range.index, '\n', lineFormats, _quill2.default.sources.USER);
    	  // Earlier scroll.deleteAt might have messed up our selection,
    	  // so insertText's built in selection preservation is not reliable
    	  this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
    	  this.quill.focus();
    	  Object.keys(context.format).forEach(function (name) {
    	    if (lineFormats[name] != null) return;
    	    if (Array.isArray(context.format[name])) return;
    	    if (name === 'link') return;
    	    _this3.quill.format(name, context.format[name], _quill2.default.sources.USER);
    	  });
    	}

    	function makeCodeBlockHandler(indent) {
    	  return {
    	    key: Keyboard.keys.TAB,
    	    shiftKey: !indent,
    	    format: { 'code-block': true },
    	    handler: function handler(range) {
    	      var CodeBlock = _parchment2.default.query('code-block');
    	      var index = range.index,
    	          length = range.length;

    	      var _quill$scroll$descend = this.quill.scroll.descendant(CodeBlock, index),
    	          _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),
    	          block = _quill$scroll$descend2[0],
    	          offset = _quill$scroll$descend2[1];

    	      if (block == null) return;
    	      var scrollIndex = this.quill.getIndex(block);
    	      var start = block.newlineIndex(offset, true) + 1;
    	      var end = block.newlineIndex(scrollIndex + offset + length);
    	      var lines = block.domNode.textContent.slice(start, end).split('\n');
    	      offset = 0;
    	      lines.forEach(function (line, i) {
    	        if (indent) {
    	          block.insertAt(start + offset, CodeBlock.TAB);
    	          offset += CodeBlock.TAB.length;
    	          if (i === 0) {
    	            index += CodeBlock.TAB.length;
    	          } else {
    	            length += CodeBlock.TAB.length;
    	          }
    	        } else if (line.startsWith(CodeBlock.TAB)) {
    	          block.deleteAt(start + offset, CodeBlock.TAB.length);
    	          offset -= CodeBlock.TAB.length;
    	          if (i === 0) {
    	            index -= CodeBlock.TAB.length;
    	          } else {
    	            length -= CodeBlock.TAB.length;
    	          }
    	        }
    	        offset += line.length + 1;
    	      });
    	      this.quill.update(_quill2.default.sources.USER);
    	      this.quill.setSelection(index, length, _quill2.default.sources.SILENT);
    	    }
    	  };
    	}

    	function makeFormatHandler(format) {
    	  return {
    	    key: format[0].toUpperCase(),
    	    shortKey: true,
    	    handler: function handler(range, context) {
    	      this.quill.format(format, !context.format[format], _quill2.default.sources.USER);
    	    }
    	  };
    	}

    	function normalize(binding) {
    	  if (typeof binding === 'string' || typeof binding === 'number') {
    	    return normalize({ key: binding });
    	  }
    	  if ((typeof binding === 'undefined' ? 'undefined' : _typeof(binding)) === 'object') {
    	    binding = (0, _clone2.default)(binding, false);
    	  }
    	  if (typeof binding.key === 'string') {
    	    if (Keyboard.keys[binding.key.toUpperCase()] != null) {
    	      binding.key = Keyboard.keys[binding.key.toUpperCase()];
    	    } else if (binding.key.length === 1) {
    	      binding.key = binding.key.toUpperCase().charCodeAt(0);
    	    } else {
    	      return null;
    	    }
    	  }
    	  if (binding.shortKey) {
    	    binding[SHORTKEY] = binding.shortKey;
    	    delete binding.shortKey;
    	  }
    	  return binding;
    	}

    	exports.default = Keyboard;
    	exports.SHORTKEY = SHORTKEY;

    	/***/ }),
    	/* 24 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _text = __webpack_require__(7);

    	var _text2 = _interopRequireDefault(_text);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Cursor = function (_Parchment$Embed) {
    	  _inherits(Cursor, _Parchment$Embed);

    	  _createClass(Cursor, null, [{
    	    key: 'value',
    	    value: function value() {
    	      return undefined;
    	    }
    	  }]);

    	  function Cursor(domNode, selection) {
    	    _classCallCheck(this, Cursor);

    	    var _this = _possibleConstructorReturn(this, (Cursor.__proto__ || Object.getPrototypeOf(Cursor)).call(this, domNode));

    	    _this.selection = selection;
    	    _this.textNode = document.createTextNode(Cursor.CONTENTS);
    	    _this.domNode.appendChild(_this.textNode);
    	    _this._length = 0;
    	    return _this;
    	  }

    	  _createClass(Cursor, [{
    	    key: 'detach',
    	    value: function detach() {
    	      // super.detach() will also clear domNode.__blot
    	      if (this.parent != null) this.parent.removeChild(this);
    	    }
    	  }, {
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (this._length !== 0) {
    	        return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'format', this).call(this, name, value);
    	      }
    	      var target = this,
    	          index = 0;
    	      while (target != null && target.statics.scope !== _parchment2.default.Scope.BLOCK_BLOT) {
    	        index += target.offset(target.parent);
    	        target = target.parent;
    	      }
    	      if (target != null) {
    	        this._length = Cursor.CONTENTS.length;
    	        target.optimize();
    	        target.formatAt(index, Cursor.CONTENTS.length, name, value);
    	        this._length = 0;
    	      }
    	    }
    	  }, {
    	    key: 'index',
    	    value: function index(node, offset) {
    	      if (node === this.textNode) return 0;
    	      return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'index', this).call(this, node, offset);
    	    }
    	  }, {
    	    key: 'length',
    	    value: function length() {
    	      return this._length;
    	    }
    	  }, {
    	    key: 'position',
    	    value: function position() {
    	      return [this.textNode, this.textNode.data.length];
    	    }
    	  }, {
    	    key: 'remove',
    	    value: function remove() {
    	      _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'remove', this).call(this);
    	      this.parent = null;
    	    }
    	  }, {
    	    key: 'restore',
    	    value: function restore() {
    	      if (this.selection.composing || this.parent == null) return;
    	      var textNode = this.textNode;
    	      var range = this.selection.getNativeRange();
    	      var restoreText = void 0,
    	          start = void 0,
    	          end = void 0;
    	      if (range != null && range.start.node === textNode && range.end.node === textNode) {
    	        var _ref = [textNode, range.start.offset, range.end.offset];
    	        restoreText = _ref[0];
    	        start = _ref[1];
    	        end = _ref[2];
    	      }
    	      // Link format will insert text outside of anchor tag
    	      while (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {
    	        this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);
    	      }
    	      if (this.textNode.data !== Cursor.CONTENTS) {
    	        var text = this.textNode.data.split(Cursor.CONTENTS).join('');
    	        if (this.next instanceof _text2.default) {
    	          restoreText = this.next.domNode;
    	          this.next.insertAt(0, text);
    	          this.textNode.data = Cursor.CONTENTS;
    	        } else {
    	          this.textNode.data = text;
    	          this.parent.insertBefore(_parchment2.default.create(this.textNode), this);
    	          this.textNode = document.createTextNode(Cursor.CONTENTS);
    	          this.domNode.appendChild(this.textNode);
    	        }
    	      }
    	      this.remove();
    	      if (start != null) {
    	        var _map = [start, end].map(function (offset) {
    	          return Math.max(0, Math.min(restoreText.data.length, offset - 1));
    	        });

    	        var _map2 = _slicedToArray(_map, 2);

    	        start = _map2[0];
    	        end = _map2[1];

    	        return {
    	          startNode: restoreText,
    	          startOffset: start,
    	          endNode: restoreText,
    	          endOffset: end
    	        };
    	      }
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update(mutations, context) {
    	      var _this2 = this;

    	      if (mutations.some(function (mutation) {
    	        return mutation.type === 'characterData' && mutation.target === _this2.textNode;
    	      })) {
    	        var range = this.restore();
    	        if (range) context.range = range;
    	      }
    	    }
    	  }, {
    	    key: 'value',
    	    value: function value() {
    	      return '';
    	    }
    	  }]);

    	  return Cursor;
    	}(_parchment2.default.Embed);

    	Cursor.blotName = 'cursor';
    	Cursor.className = 'ql-cursor';
    	Cursor.tagName = 'span';
    	Cursor.CONTENTS = '\uFEFF'; // Zero width no break space


    	exports.default = Cursor;

    	/***/ }),
    	/* 25 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Container = function (_Parchment$Container) {
    	  _inherits(Container, _Parchment$Container);

    	  function Container() {
    	    _classCallCheck(this, Container);

    	    return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
    	  }

    	  return Container;
    	}(_parchment2.default.Container);

    	Container.allowedChildren = [_block2.default, _block.BlockEmbed, Container];

    	exports.default = Container;

    	/***/ }),
    	/* 26 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.ColorStyle = exports.ColorClass = exports.ColorAttributor = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var ColorAttributor = function (_Parchment$Attributor) {
    	  _inherits(ColorAttributor, _Parchment$Attributor);

    	  function ColorAttributor() {
    	    _classCallCheck(this, ColorAttributor);

    	    return _possibleConstructorReturn(this, (ColorAttributor.__proto__ || Object.getPrototypeOf(ColorAttributor)).apply(this, arguments));
    	  }

    	  _createClass(ColorAttributor, [{
    	    key: 'value',
    	    value: function value(domNode) {
    	      var value = _get(ColorAttributor.prototype.__proto__ || Object.getPrototypeOf(ColorAttributor.prototype), 'value', this).call(this, domNode);
    	      if (!value.startsWith('rgb(')) return value;
    	      value = value.replace(/^[^\d]+/, '').replace(/[^\d]+$/, '');
    	      return '#' + value.split(',').map(function (component) {
    	        return ('00' + parseInt(component).toString(16)).slice(-2);
    	      }).join('');
    	    }
    	  }]);

    	  return ColorAttributor;
    	}(_parchment2.default.Attributor.Style);

    	var ColorClass = new _parchment2.default.Attributor.Class('color', 'ql-color', {
    	  scope: _parchment2.default.Scope.INLINE
    	});
    	var ColorStyle = new ColorAttributor('color', 'color', {
    	  scope: _parchment2.default.Scope.INLINE
    	});

    	exports.ColorAttributor = ColorAttributor;
    	exports.ColorClass = ColorClass;
    	exports.ColorStyle = ColorStyle;

    	/***/ }),
    	/* 27 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.sanitize = exports.default = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Link = function (_Inline) {
    	  _inherits(Link, _Inline);

    	  function Link() {
    	    _classCallCheck(this, Link);

    	    return _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).apply(this, arguments));
    	  }

    	  _createClass(Link, [{
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (name !== this.statics.blotName || !value) return _get(Link.prototype.__proto__ || Object.getPrototypeOf(Link.prototype), 'format', this).call(this, name, value);
    	      value = this.constructor.sanitize(value);
    	      this.domNode.setAttribute('href', value);
    	    }
    	  }], [{
    	    key: 'create',
    	    value: function create(value) {
    	      var node = _get(Link.__proto__ || Object.getPrototypeOf(Link), 'create', this).call(this, value);
    	      value = this.sanitize(value);
    	      node.setAttribute('href', value);
    	      node.setAttribute('rel', 'noopener noreferrer');
    	      node.setAttribute('target', '_blank');
    	      return node;
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      return domNode.getAttribute('href');
    	    }
    	  }, {
    	    key: 'sanitize',
    	    value: function sanitize(url) {
    	      return _sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;
    	    }
    	  }]);

    	  return Link;
    	}(_inline2.default);

    	Link.blotName = 'link';
    	Link.tagName = 'A';
    	Link.SANITIZED_URL = 'about:blank';
    	Link.PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel'];

    	function _sanitize(url, protocols) {
    	  var anchor = document.createElement('a');
    	  anchor.href = url;
    	  var protocol = anchor.href.slice(0, anchor.href.indexOf(':'));
    	  return protocols.indexOf(protocol) > -1;
    	}

    	exports.default = Link;
    	exports.sanitize = _sanitize;

    	/***/ }),
    	/* 28 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _keyboard = __webpack_require__(23);

    	var _keyboard2 = _interopRequireDefault(_keyboard);

    	var _dropdown = __webpack_require__(107);

    	var _dropdown2 = _interopRequireDefault(_dropdown);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var optionsCounter = 0;

    	function toggleAriaAttribute(element, attribute) {
    	  element.setAttribute(attribute, !(element.getAttribute(attribute) === 'true'));
    	}

    	var Picker = function () {
    	  function Picker(select) {
    	    var _this = this;

    	    _classCallCheck(this, Picker);

    	    this.select = select;
    	    this.container = document.createElement('span');
    	    this.buildPicker();
    	    this.select.style.display = 'none';
    	    this.select.parentNode.insertBefore(this.container, this.select);

    	    this.label.addEventListener('mousedown', function () {
    	      _this.togglePicker();
    	    });
    	    this.label.addEventListener('keydown', function (event) {
    	      switch (event.keyCode) {
    	        // Allows the "Enter" key to open the picker
    	        case _keyboard2.default.keys.ENTER:
    	          _this.togglePicker();
    	          break;

    	        // Allows the "Escape" key to close the picker
    	        case _keyboard2.default.keys.ESCAPE:
    	          _this.escape();
    	          event.preventDefault();
    	          break;
    	      }
    	    });
    	    this.select.addEventListener('change', this.update.bind(this));
    	  }

    	  _createClass(Picker, [{
    	    key: 'togglePicker',
    	    value: function togglePicker() {
    	      this.container.classList.toggle('ql-expanded');
    	      // Toggle aria-expanded and aria-hidden to make the picker accessible
    	      toggleAriaAttribute(this.label, 'aria-expanded');
    	      toggleAriaAttribute(this.options, 'aria-hidden');
    	    }
    	  }, {
    	    key: 'buildItem',
    	    value: function buildItem(option) {
    	      var _this2 = this;

    	      var item = document.createElement('span');
    	      item.tabIndex = '0';
    	      item.setAttribute('role', 'button');

    	      item.classList.add('ql-picker-item');
    	      if (option.hasAttribute('value')) {
    	        item.setAttribute('data-value', option.getAttribute('value'));
    	      }
    	      if (option.textContent) {
    	        item.setAttribute('data-label', option.textContent);
    	      }
    	      item.addEventListener('click', function () {
    	        _this2.selectItem(item, true);
    	      });
    	      item.addEventListener('keydown', function (event) {
    	        switch (event.keyCode) {
    	          // Allows the "Enter" key to select an item
    	          case _keyboard2.default.keys.ENTER:
    	            _this2.selectItem(item, true);
    	            event.preventDefault();
    	            break;

    	          // Allows the "Escape" key to close the picker
    	          case _keyboard2.default.keys.ESCAPE:
    	            _this2.escape();
    	            event.preventDefault();
    	            break;
    	        }
    	      });

    	      return item;
    	    }
    	  }, {
    	    key: 'buildLabel',
    	    value: function buildLabel() {
    	      var label = document.createElement('span');
    	      label.classList.add('ql-picker-label');
    	      label.innerHTML = _dropdown2.default;
    	      label.tabIndex = '0';
    	      label.setAttribute('role', 'button');
    	      label.setAttribute('aria-expanded', 'false');
    	      this.container.appendChild(label);
    	      return label;
    	    }
    	  }, {
    	    key: 'buildOptions',
    	    value: function buildOptions() {
    	      var _this3 = this;

    	      var options = document.createElement('span');
    	      options.classList.add('ql-picker-options');

    	      // Don't want screen readers to read this until options are visible
    	      options.setAttribute('aria-hidden', 'true');
    	      options.tabIndex = '-1';

    	      // Need a unique id for aria-controls
    	      options.id = 'ql-picker-options-' + optionsCounter;
    	      optionsCounter += 1;
    	      this.label.setAttribute('aria-controls', options.id);

    	      this.options = options;

    	      [].slice.call(this.select.options).forEach(function (option) {
    	        var item = _this3.buildItem(option);
    	        options.appendChild(item);
    	        if (option.selected === true) {
    	          _this3.selectItem(item);
    	        }
    	      });
    	      this.container.appendChild(options);
    	    }
    	  }, {
    	    key: 'buildPicker',
    	    value: function buildPicker() {
    	      var _this4 = this;

    	      [].slice.call(this.select.attributes).forEach(function (item) {
    	        _this4.container.setAttribute(item.name, item.value);
    	      });
    	      this.container.classList.add('ql-picker');
    	      this.label = this.buildLabel();
    	      this.buildOptions();
    	    }
    	  }, {
    	    key: 'escape',
    	    value: function escape() {
    	      var _this5 = this;

    	      // Close menu and return focus to trigger label
    	      this.close();
    	      // Need setTimeout for accessibility to ensure that the browser executes
    	      // focus on the next process thread and after any DOM content changes
    	      setTimeout(function () {
    	        return _this5.label.focus();
    	      }, 1);
    	    }
    	  }, {
    	    key: 'close',
    	    value: function close() {
    	      this.container.classList.remove('ql-expanded');
    	      this.label.setAttribute('aria-expanded', 'false');
    	      this.options.setAttribute('aria-hidden', 'true');
    	    }
    	  }, {
    	    key: 'selectItem',
    	    value: function selectItem(item) {
    	      var trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    	      var selected = this.container.querySelector('.ql-selected');
    	      if (item === selected) return;
    	      if (selected != null) {
    	        selected.classList.remove('ql-selected');
    	      }
    	      if (item == null) return;
    	      item.classList.add('ql-selected');
    	      this.select.selectedIndex = [].indexOf.call(item.parentNode.children, item);
    	      if (item.hasAttribute('data-value')) {
    	        this.label.setAttribute('data-value', item.getAttribute('data-value'));
    	      } else {
    	        this.label.removeAttribute('data-value');
    	      }
    	      if (item.hasAttribute('data-label')) {
    	        this.label.setAttribute('data-label', item.getAttribute('data-label'));
    	      } else {
    	        this.label.removeAttribute('data-label');
    	      }
    	      if (trigger) {
    	        if (typeof Event === 'function') {
    	          this.select.dispatchEvent(new Event('change'));
    	        } else if ((typeof Event === 'undefined' ? 'undefined' : _typeof(Event)) === 'object') {
    	          // IE11
    	          var event = document.createEvent('Event');
    	          event.initEvent('change', true, true);
    	          this.select.dispatchEvent(event);
    	        }
    	        this.close();
    	      }
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update() {
    	      var option = void 0;
    	      if (this.select.selectedIndex > -1) {
    	        var item = this.container.querySelector('.ql-picker-options').children[this.select.selectedIndex];
    	        option = this.select.options[this.select.selectedIndex];
    	        this.selectItem(item);
    	      } else {
    	        this.selectItem(null);
    	      }
    	      var isActive = option != null && option !== this.select.querySelector('option[selected]');
    	      this.label.classList.toggle('ql-active', isActive);
    	    }
    	  }]);

    	  return Picker;
    	}();

    	exports.default = Picker;

    	/***/ }),
    	/* 29 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	var _break = __webpack_require__(16);

    	var _break2 = _interopRequireDefault(_break);

    	var _container = __webpack_require__(25);

    	var _container2 = _interopRequireDefault(_container);

    	var _cursor = __webpack_require__(24);

    	var _cursor2 = _interopRequireDefault(_cursor);

    	var _embed = __webpack_require__(35);

    	var _embed2 = _interopRequireDefault(_embed);

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	var _scroll = __webpack_require__(22);

    	var _scroll2 = _interopRequireDefault(_scroll);

    	var _text = __webpack_require__(7);

    	var _text2 = _interopRequireDefault(_text);

    	var _clipboard = __webpack_require__(55);

    	var _clipboard2 = _interopRequireDefault(_clipboard);

    	var _history = __webpack_require__(42);

    	var _history2 = _interopRequireDefault(_history);

    	var _keyboard = __webpack_require__(23);

    	var _keyboard2 = _interopRequireDefault(_keyboard);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	_quill2.default.register({
    	  'blots/block': _block2.default,
    	  'blots/block/embed': _block.BlockEmbed,
    	  'blots/break': _break2.default,
    	  'blots/container': _container2.default,
    	  'blots/cursor': _cursor2.default,
    	  'blots/embed': _embed2.default,
    	  'blots/inline': _inline2.default,
    	  'blots/scroll': _scroll2.default,
    	  'blots/text': _text2.default,

    	  'modules/clipboard': _clipboard2.default,
    	  'modules/history': _history2.default,
    	  'modules/keyboard': _keyboard2.default
    	});

    	_parchment2.default.register(_block2.default, _break2.default, _cursor2.default, _inline2.default, _scroll2.default, _text2.default);

    	exports.default = _quill2.default;

    	/***/ }),
    	/* 30 */
    	/***/ (function(module, exports, __webpack_require__) {

    	Object.defineProperty(exports, "__esModule", { value: true });
    	var Registry = __webpack_require__(1);
    	var ShadowBlot = /** @class */ (function () {
    	    function ShadowBlot(domNode) {
    	        this.domNode = domNode;
    	        // @ts-ignore
    	        this.domNode[Registry.DATA_KEY] = { blot: this };
    	    }
    	    Object.defineProperty(ShadowBlot.prototype, "statics", {
    	        // Hack for accessing inherited static methods
    	        get: function () {
    	            return this.constructor;
    	        },
    	        enumerable: true,
    	        configurable: true
    	    });
    	    ShadowBlot.create = function (value) {
    	        if (this.tagName == null) {
    	            throw new Registry.ParchmentError('Blot definition missing tagName');
    	        }
    	        var node;
    	        if (Array.isArray(this.tagName)) {
    	            if (typeof value === 'string') {
    	                value = value.toUpperCase();
    	                if (parseInt(value).toString() === value) {
    	                    value = parseInt(value);
    	                }
    	            }
    	            if (typeof value === 'number') {
    	                node = document.createElement(this.tagName[value - 1]);
    	            }
    	            else if (this.tagName.indexOf(value) > -1) {
    	                node = document.createElement(value);
    	            }
    	            else {
    	                node = document.createElement(this.tagName[0]);
    	            }
    	        }
    	        else {
    	            node = document.createElement(this.tagName);
    	        }
    	        if (this.className) {
    	            node.classList.add(this.className);
    	        }
    	        return node;
    	    };
    	    ShadowBlot.prototype.attach = function () {
    	        if (this.parent != null) {
    	            this.scroll = this.parent.scroll;
    	        }
    	    };
    	    ShadowBlot.prototype.clone = function () {
    	        var domNode = this.domNode.cloneNode(false);
    	        return Registry.create(domNode);
    	    };
    	    ShadowBlot.prototype.detach = function () {
    	        if (this.parent != null)
    	            this.parent.removeChild(this);
    	        // @ts-ignore
    	        delete this.domNode[Registry.DATA_KEY];
    	    };
    	    ShadowBlot.prototype.deleteAt = function (index, length) {
    	        var blot = this.isolate(index, length);
    	        blot.remove();
    	    };
    	    ShadowBlot.prototype.formatAt = function (index, length, name, value) {
    	        var blot = this.isolate(index, length);
    	        if (Registry.query(name, Registry.Scope.BLOT) != null && value) {
    	            blot.wrap(name, value);
    	        }
    	        else if (Registry.query(name, Registry.Scope.ATTRIBUTE) != null) {
    	            var parent = Registry.create(this.statics.scope);
    	            blot.wrap(parent);
    	            parent.format(name, value);
    	        }
    	    };
    	    ShadowBlot.prototype.insertAt = function (index, value, def) {
    	        var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
    	        var ref = this.split(index);
    	        this.parent.insertBefore(blot, ref);
    	    };
    	    ShadowBlot.prototype.insertInto = function (parentBlot, refBlot) {
    	        if (refBlot === void 0) { refBlot = null; }
    	        if (this.parent != null) {
    	            this.parent.children.remove(this);
    	        }
    	        var refDomNode = null;
    	        parentBlot.children.insertBefore(this, refBlot);
    	        if (refBlot != null) {
    	            refDomNode = refBlot.domNode;
    	        }
    	        if (this.domNode.parentNode != parentBlot.domNode ||
    	            this.domNode.nextSibling != refDomNode) {
    	            parentBlot.domNode.insertBefore(this.domNode, refDomNode);
    	        }
    	        this.parent = parentBlot;
    	        this.attach();
    	    };
    	    ShadowBlot.prototype.isolate = function (index, length) {
    	        var target = this.split(index);
    	        target.split(length);
    	        return target;
    	    };
    	    ShadowBlot.prototype.length = function () {
    	        return 1;
    	    };
    	    ShadowBlot.prototype.offset = function (root) {
    	        if (root === void 0) { root = this.parent; }
    	        if (this.parent == null || this == root)
    	            return 0;
    	        return this.parent.children.offset(this) + this.parent.offset(root);
    	    };
    	    ShadowBlot.prototype.optimize = function (context) {
    	        // TODO clean up once we use WeakMap
    	        // @ts-ignore
    	        if (this.domNode[Registry.DATA_KEY] != null) {
    	            // @ts-ignore
    	            delete this.domNode[Registry.DATA_KEY].mutations;
    	        }
    	    };
    	    ShadowBlot.prototype.remove = function () {
    	        if (this.domNode.parentNode != null) {
    	            this.domNode.parentNode.removeChild(this.domNode);
    	        }
    	        this.detach();
    	    };
    	    ShadowBlot.prototype.replace = function (target) {
    	        if (target.parent == null)
    	            return;
    	        target.parent.insertBefore(this, target.next);
    	        target.remove();
    	    };
    	    ShadowBlot.prototype.replaceWith = function (name, value) {
    	        var replacement = typeof name === 'string' ? Registry.create(name, value) : name;
    	        replacement.replace(this);
    	        return replacement;
    	    };
    	    ShadowBlot.prototype.split = function (index, force) {
    	        return index === 0 ? this : this.next;
    	    };
    	    ShadowBlot.prototype.update = function (mutations, context) {
    	        // Nothing to do by default
    	    };
    	    ShadowBlot.prototype.wrap = function (name, value) {
    	        var wrapper = typeof name === 'string' ? Registry.create(name, value) : name;
    	        if (this.parent != null) {
    	            this.parent.insertBefore(wrapper, this.next);
    	        }
    	        wrapper.appendChild(this);
    	        return wrapper;
    	    };
    	    ShadowBlot.blotName = 'abstract';
    	    return ShadowBlot;
    	}());
    	exports.default = ShadowBlot;


    	/***/ }),
    	/* 31 */
    	/***/ (function(module, exports, __webpack_require__) {

    	Object.defineProperty(exports, "__esModule", { value: true });
    	var attributor_1 = __webpack_require__(12);
    	var class_1 = __webpack_require__(32);
    	var style_1 = __webpack_require__(33);
    	var Registry = __webpack_require__(1);
    	var AttributorStore = /** @class */ (function () {
    	    function AttributorStore(domNode) {
    	        this.attributes = {};
    	        this.domNode = domNode;
    	        this.build();
    	    }
    	    AttributorStore.prototype.attribute = function (attribute, value) {
    	        // verb
    	        if (value) {
    	            if (attribute.add(this.domNode, value)) {
    	                if (attribute.value(this.domNode) != null) {
    	                    this.attributes[attribute.attrName] = attribute;
    	                }
    	                else {
    	                    delete this.attributes[attribute.attrName];
    	                }
    	            }
    	        }
    	        else {
    	            attribute.remove(this.domNode);
    	            delete this.attributes[attribute.attrName];
    	        }
    	    };
    	    AttributorStore.prototype.build = function () {
    	        var _this = this;
    	        this.attributes = {};
    	        var attributes = attributor_1.default.keys(this.domNode);
    	        var classes = class_1.default.keys(this.domNode);
    	        var styles = style_1.default.keys(this.domNode);
    	        attributes
    	            .concat(classes)
    	            .concat(styles)
    	            .forEach(function (name) {
    	            var attr = Registry.query(name, Registry.Scope.ATTRIBUTE);
    	            if (attr instanceof attributor_1.default) {
    	                _this.attributes[attr.attrName] = attr;
    	            }
    	        });
    	    };
    	    AttributorStore.prototype.copy = function (target) {
    	        var _this = this;
    	        Object.keys(this.attributes).forEach(function (key) {
    	            var value = _this.attributes[key].value(_this.domNode);
    	            target.format(key, value);
    	        });
    	    };
    	    AttributorStore.prototype.move = function (target) {
    	        var _this = this;
    	        this.copy(target);
    	        Object.keys(this.attributes).forEach(function (key) {
    	            _this.attributes[key].remove(_this.domNode);
    	        });
    	        this.attributes = {};
    	    };
    	    AttributorStore.prototype.values = function () {
    	        var _this = this;
    	        return Object.keys(this.attributes).reduce(function (attributes, name) {
    	            attributes[name] = _this.attributes[name].value(_this.domNode);
    	            return attributes;
    	        }, {});
    	    };
    	    return AttributorStore;
    	}());
    	exports.default = AttributorStore;


    	/***/ }),
    	/* 32 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var attributor_1 = __webpack_require__(12);
    	function match(node, prefix) {
    	    var className = node.getAttribute('class') || '';
    	    return className.split(/\s+/).filter(function (name) {
    	        return name.indexOf(prefix + "-") === 0;
    	    });
    	}
    	var ClassAttributor = /** @class */ (function (_super) {
    	    __extends(ClassAttributor, _super);
    	    function ClassAttributor() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    ClassAttributor.keys = function (node) {
    	        return (node.getAttribute('class') || '').split(/\s+/).map(function (name) {
    	            return name
    	                .split('-')
    	                .slice(0, -1)
    	                .join('-');
    	        });
    	    };
    	    ClassAttributor.prototype.add = function (node, value) {
    	        if (!this.canAdd(node, value))
    	            return false;
    	        this.remove(node);
    	        node.classList.add(this.keyName + "-" + value);
    	        return true;
    	    };
    	    ClassAttributor.prototype.remove = function (node) {
    	        var matches = match(node, this.keyName);
    	        matches.forEach(function (name) {
    	            node.classList.remove(name);
    	        });
    	        if (node.classList.length === 0) {
    	            node.removeAttribute('class');
    	        }
    	    };
    	    ClassAttributor.prototype.value = function (node) {
    	        var result = match(node, this.keyName)[0] || '';
    	        var value = result.slice(this.keyName.length + 1); // +1 for hyphen
    	        return this.canAdd(node, value) ? value : '';
    	    };
    	    return ClassAttributor;
    	}(attributor_1.default));
    	exports.default = ClassAttributor;


    	/***/ }),
    	/* 33 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var attributor_1 = __webpack_require__(12);
    	function camelize(name) {
    	    var parts = name.split('-');
    	    var rest = parts
    	        .slice(1)
    	        .map(function (part) {
    	        return part[0].toUpperCase() + part.slice(1);
    	    })
    	        .join('');
    	    return parts[0] + rest;
    	}
    	var StyleAttributor = /** @class */ (function (_super) {
    	    __extends(StyleAttributor, _super);
    	    function StyleAttributor() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    StyleAttributor.keys = function (node) {
    	        return (node.getAttribute('style') || '').split(';').map(function (value) {
    	            var arr = value.split(':');
    	            return arr[0].trim();
    	        });
    	    };
    	    StyleAttributor.prototype.add = function (node, value) {
    	        if (!this.canAdd(node, value))
    	            return false;
    	        // @ts-ignore
    	        node.style[camelize(this.keyName)] = value;
    	        return true;
    	    };
    	    StyleAttributor.prototype.remove = function (node) {
    	        // @ts-ignore
    	        node.style[camelize(this.keyName)] = '';
    	        if (!node.getAttribute('style')) {
    	            node.removeAttribute('style');
    	        }
    	    };
    	    StyleAttributor.prototype.value = function (node) {
    	        // @ts-ignore
    	        var value = node.style[camelize(this.keyName)];
    	        return this.canAdd(node, value) ? value : '';
    	    };
    	    return StyleAttributor;
    	}(attributor_1.default));
    	exports.default = StyleAttributor;


    	/***/ }),
    	/* 34 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var Theme = function () {
    	  function Theme(quill, options) {
    	    _classCallCheck(this, Theme);

    	    this.quill = quill;
    	    this.options = options;
    	    this.modules = {};
    	  }

    	  _createClass(Theme, [{
    	    key: 'init',
    	    value: function init() {
    	      var _this = this;

    	      Object.keys(this.options.modules).forEach(function (name) {
    	        if (_this.modules[name] == null) {
    	          _this.addModule(name);
    	        }
    	      });
    	    }
    	  }, {
    	    key: 'addModule',
    	    value: function addModule(name) {
    	      var moduleClass = this.quill.constructor.import('modules/' + name);
    	      this.modules[name] = new moduleClass(this.quill, this.options.modules[name] || {});
    	      return this.modules[name];
    	    }
    	  }]);

    	  return Theme;
    	}();

    	Theme.DEFAULTS = {
    	  modules: {}
    	};
    	Theme.themes = {
    	  'default': Theme
    	};

    	exports.default = Theme;

    	/***/ }),
    	/* 35 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _text = __webpack_require__(7);

    	var _text2 = _interopRequireDefault(_text);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var GUARD_TEXT = '\uFEFF';

    	var Embed = function (_Parchment$Embed) {
    	  _inherits(Embed, _Parchment$Embed);

    	  function Embed(node) {
    	    _classCallCheck(this, Embed);

    	    var _this = _possibleConstructorReturn(this, (Embed.__proto__ || Object.getPrototypeOf(Embed)).call(this, node));

    	    _this.contentNode = document.createElement('span');
    	    _this.contentNode.setAttribute('contenteditable', false);
    	    [].slice.call(_this.domNode.childNodes).forEach(function (childNode) {
    	      _this.contentNode.appendChild(childNode);
    	    });
    	    _this.leftGuard = document.createTextNode(GUARD_TEXT);
    	    _this.rightGuard = document.createTextNode(GUARD_TEXT);
    	    _this.domNode.appendChild(_this.leftGuard);
    	    _this.domNode.appendChild(_this.contentNode);
    	    _this.domNode.appendChild(_this.rightGuard);
    	    return _this;
    	  }

    	  _createClass(Embed, [{
    	    key: 'index',
    	    value: function index(node, offset) {
    	      if (node === this.leftGuard) return 0;
    	      if (node === this.rightGuard) return 1;
    	      return _get(Embed.prototype.__proto__ || Object.getPrototypeOf(Embed.prototype), 'index', this).call(this, node, offset);
    	    }
    	  }, {
    	    key: 'restore',
    	    value: function restore(node) {
    	      var range = void 0,
    	          textNode = void 0;
    	      var text = node.data.split(GUARD_TEXT).join('');
    	      if (node === this.leftGuard) {
    	        if (this.prev instanceof _text2.default) {
    	          var prevLength = this.prev.length();
    	          this.prev.insertAt(prevLength, text);
    	          range = {
    	            startNode: this.prev.domNode,
    	            startOffset: prevLength + text.length
    	          };
    	        } else {
    	          textNode = document.createTextNode(text);
    	          this.parent.insertBefore(_parchment2.default.create(textNode), this);
    	          range = {
    	            startNode: textNode,
    	            startOffset: text.length
    	          };
    	        }
    	      } else if (node === this.rightGuard) {
    	        if (this.next instanceof _text2.default) {
    	          this.next.insertAt(0, text);
    	          range = {
    	            startNode: this.next.domNode,
    	            startOffset: text.length
    	          };
    	        } else {
    	          textNode = document.createTextNode(text);
    	          this.parent.insertBefore(_parchment2.default.create(textNode), this.next);
    	          range = {
    	            startNode: textNode,
    	            startOffset: text.length
    	          };
    	        }
    	      }
    	      node.data = GUARD_TEXT;
    	      return range;
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update(mutations, context) {
    	      var _this2 = this;

    	      mutations.forEach(function (mutation) {
    	        if (mutation.type === 'characterData' && (mutation.target === _this2.leftGuard || mutation.target === _this2.rightGuard)) {
    	          var range = _this2.restore(mutation.target);
    	          if (range) context.range = range;
    	        }
    	      });
    	    }
    	  }]);

    	  return Embed;
    	}(_parchment2.default.Embed);

    	exports.default = Embed;

    	/***/ }),
    	/* 36 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.AlignStyle = exports.AlignClass = exports.AlignAttribute = undefined;

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	var config = {
    	  scope: _parchment2.default.Scope.BLOCK,
    	  whitelist: ['right', 'center', 'justify']
    	};

    	var AlignAttribute = new _parchment2.default.Attributor.Attribute('align', 'align', config);
    	var AlignClass = new _parchment2.default.Attributor.Class('align', 'ql-align', config);
    	var AlignStyle = new _parchment2.default.Attributor.Style('align', 'text-align', config);

    	exports.AlignAttribute = AlignAttribute;
    	exports.AlignClass = AlignClass;
    	exports.AlignStyle = AlignStyle;

    	/***/ }),
    	/* 37 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.BackgroundStyle = exports.BackgroundClass = undefined;

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _color = __webpack_require__(26);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	var BackgroundClass = new _parchment2.default.Attributor.Class('background', 'ql-bg', {
    	  scope: _parchment2.default.Scope.INLINE
    	});
    	var BackgroundStyle = new _color.ColorAttributor('background', 'background-color', {
    	  scope: _parchment2.default.Scope.INLINE
    	});

    	exports.BackgroundClass = BackgroundClass;
    	exports.BackgroundStyle = BackgroundStyle;

    	/***/ }),
    	/* 38 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.DirectionStyle = exports.DirectionClass = exports.DirectionAttribute = undefined;

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	var config = {
    	  scope: _parchment2.default.Scope.BLOCK,
    	  whitelist: ['rtl']
    	};

    	var DirectionAttribute = new _parchment2.default.Attributor.Attribute('direction', 'dir', config);
    	var DirectionClass = new _parchment2.default.Attributor.Class('direction', 'ql-direction', config);
    	var DirectionStyle = new _parchment2.default.Attributor.Style('direction', 'direction', config);

    	exports.DirectionAttribute = DirectionAttribute;
    	exports.DirectionClass = DirectionClass;
    	exports.DirectionStyle = DirectionStyle;

    	/***/ }),
    	/* 39 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.FontClass = exports.FontStyle = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var config = {
    	  scope: _parchment2.default.Scope.INLINE,
    	  whitelist: ['serif', 'monospace']
    	};

    	var FontClass = new _parchment2.default.Attributor.Class('font', 'ql-font', config);

    	var FontStyleAttributor = function (_Parchment$Attributor) {
    	  _inherits(FontStyleAttributor, _Parchment$Attributor);

    	  function FontStyleAttributor() {
    	    _classCallCheck(this, FontStyleAttributor);

    	    return _possibleConstructorReturn(this, (FontStyleAttributor.__proto__ || Object.getPrototypeOf(FontStyleAttributor)).apply(this, arguments));
    	  }

    	  _createClass(FontStyleAttributor, [{
    	    key: 'value',
    	    value: function value(node) {
    	      return _get(FontStyleAttributor.prototype.__proto__ || Object.getPrototypeOf(FontStyleAttributor.prototype), 'value', this).call(this, node).replace(/["']/g, '');
    	    }
    	  }]);

    	  return FontStyleAttributor;
    	}(_parchment2.default.Attributor.Style);

    	var FontStyle = new FontStyleAttributor('font', 'font-family', config);

    	exports.FontStyle = FontStyle;
    	exports.FontClass = FontClass;

    	/***/ }),
    	/* 40 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.SizeStyle = exports.SizeClass = undefined;

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	var SizeClass = new _parchment2.default.Attributor.Class('size', 'ql-size', {
    	  scope: _parchment2.default.Scope.INLINE,
    	  whitelist: ['small', 'large', 'huge']
    	});
    	var SizeStyle = new _parchment2.default.Attributor.Style('size', 'font-size', {
    	  scope: _parchment2.default.Scope.INLINE,
    	  whitelist: ['10px', '18px', '32px']
    	});

    	exports.SizeClass = SizeClass;
    	exports.SizeStyle = SizeStyle;

    	/***/ }),
    	/* 41 */
    	/***/ (function(module, exports, __webpack_require__) {


    	module.exports = {
    	  'align': {
    	    '': __webpack_require__(76),
    	    'center': __webpack_require__(77),
    	    'right': __webpack_require__(78),
    	    'justify': __webpack_require__(79)
    	  },
    	  'background': __webpack_require__(80),
    	  'blockquote': __webpack_require__(81),
    	  'bold': __webpack_require__(82),
    	  'clean': __webpack_require__(83),
    	  'code': __webpack_require__(58),
    	  'code-block': __webpack_require__(58),
    	  'color': __webpack_require__(84),
    	  'direction': {
    	    '': __webpack_require__(85),
    	    'rtl': __webpack_require__(86)
    	  },
    	  'float': {
    	    'center': __webpack_require__(87),
    	    'full': __webpack_require__(88),
    	    'left': __webpack_require__(89),
    	    'right': __webpack_require__(90)
    	  },
    	  'formula': __webpack_require__(91),
    	  'header': {
    	    '1': __webpack_require__(92),
    	    '2': __webpack_require__(93)
    	  },
    	  'italic': __webpack_require__(94),
    	  'image': __webpack_require__(95),
    	  'indent': {
    	    '+1': __webpack_require__(96),
    	    '-1': __webpack_require__(97)
    	  },
    	  'link': __webpack_require__(98),
    	  'list': {
    	    'ordered': __webpack_require__(99),
    	    'bullet': __webpack_require__(100),
    	    'check': __webpack_require__(101)
    	  },
    	  'script': {
    	    'sub': __webpack_require__(102),
    	    'super': __webpack_require__(103)
    	  },
    	  'strike': __webpack_require__(104),
    	  'underline': __webpack_require__(105),
    	  'video': __webpack_require__(106)
    	};

    	/***/ }),
    	/* 42 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.getLastChangeIndex = exports.default = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var History = function (_Module) {
    	  _inherits(History, _Module);

    	  function History(quill, options) {
    	    _classCallCheck(this, History);

    	    var _this = _possibleConstructorReturn(this, (History.__proto__ || Object.getPrototypeOf(History)).call(this, quill, options));

    	    _this.lastRecorded = 0;
    	    _this.ignoreChange = false;
    	    _this.clear();
    	    _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (eventName, delta, oldDelta, source) {
    	      if (eventName !== _quill2.default.events.TEXT_CHANGE || _this.ignoreChange) return;
    	      if (!_this.options.userOnly || source === _quill2.default.sources.USER) {
    	        _this.record(delta, oldDelta);
    	      } else {
    	        _this.transform(delta);
    	      }
    	    });
    	    _this.quill.keyboard.addBinding({ key: 'Z', shortKey: true }, _this.undo.bind(_this));
    	    _this.quill.keyboard.addBinding({ key: 'Z', shortKey: true, shiftKey: true }, _this.redo.bind(_this));
    	    if (/Win/i.test(navigator.platform)) {
    	      _this.quill.keyboard.addBinding({ key: 'Y', shortKey: true }, _this.redo.bind(_this));
    	    }
    	    return _this;
    	  }

    	  _createClass(History, [{
    	    key: 'change',
    	    value: function change(source, dest) {
    	      if (this.stack[source].length === 0) return;
    	      var delta = this.stack[source].pop();
    	      this.stack[dest].push(delta);
    	      this.lastRecorded = 0;
    	      this.ignoreChange = true;
    	      this.quill.updateContents(delta[source], _quill2.default.sources.USER);
    	      this.ignoreChange = false;
    	      var index = getLastChangeIndex(delta[source]);
    	      this.quill.setSelection(index);
    	    }
    	  }, {
    	    key: 'clear',
    	    value: function clear() {
    	      this.stack = { undo: [], redo: [] };
    	    }
    	  }, {
    	    key: 'cutoff',
    	    value: function cutoff() {
    	      this.lastRecorded = 0;
    	    }
    	  }, {
    	    key: 'record',
    	    value: function record(changeDelta, oldDelta) {
    	      if (changeDelta.ops.length === 0) return;
    	      this.stack.redo = [];
    	      var undoDelta = this.quill.getContents().diff(oldDelta);
    	      var timestamp = Date.now();
    	      if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {
    	        var delta = this.stack.undo.pop();
    	        undoDelta = undoDelta.compose(delta.undo);
    	        changeDelta = delta.redo.compose(changeDelta);
    	      } else {
    	        this.lastRecorded = timestamp;
    	      }
    	      this.stack.undo.push({
    	        redo: changeDelta,
    	        undo: undoDelta
    	      });
    	      if (this.stack.undo.length > this.options.maxStack) {
    	        this.stack.undo.shift();
    	      }
    	    }
    	  }, {
    	    key: 'redo',
    	    value: function redo() {
    	      this.change('redo', 'undo');
    	    }
    	  }, {
    	    key: 'transform',
    	    value: function transform(delta) {
    	      this.stack.undo.forEach(function (change) {
    	        change.undo = delta.transform(change.undo, true);
    	        change.redo = delta.transform(change.redo, true);
    	      });
    	      this.stack.redo.forEach(function (change) {
    	        change.undo = delta.transform(change.undo, true);
    	        change.redo = delta.transform(change.redo, true);
    	      });
    	    }
    	  }, {
    	    key: 'undo',
    	    value: function undo() {
    	      this.change('undo', 'redo');
    	    }
    	  }]);

    	  return History;
    	}(_module2.default);

    	History.DEFAULTS = {
    	  delay: 1000,
    	  maxStack: 100,
    	  userOnly: false
    	};

    	function endsWithNewlineChange(delta) {
    	  var lastOp = delta.ops[delta.ops.length - 1];
    	  if (lastOp == null) return false;
    	  if (lastOp.insert != null) {
    	    return typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\n');
    	  }
    	  if (lastOp.attributes != null) {
    	    return Object.keys(lastOp.attributes).some(function (attr) {
    	      return _parchment2.default.query(attr, _parchment2.default.Scope.BLOCK) != null;
    	    });
    	  }
    	  return false;
    	}

    	function getLastChangeIndex(delta) {
    	  var deleteLength = delta.reduce(function (length, op) {
    	    length += op.delete || 0;
    	    return length;
    	  }, 0);
    	  var changeIndex = delta.length() - deleteLength;
    	  if (endsWithNewlineChange(delta)) {
    	    changeIndex -= 1;
    	  }
    	  return changeIndex;
    	}

    	exports.default = History;
    	exports.getLastChangeIndex = getLastChangeIndex;

    	/***/ }),
    	/* 43 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.BaseTooltip = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _emitter = __webpack_require__(8);

    	var _emitter2 = _interopRequireDefault(_emitter);

    	var _keyboard = __webpack_require__(23);

    	var _keyboard2 = _interopRequireDefault(_keyboard);

    	var _theme = __webpack_require__(34);

    	var _theme2 = _interopRequireDefault(_theme);

    	var _colorPicker = __webpack_require__(59);

    	var _colorPicker2 = _interopRequireDefault(_colorPicker);

    	var _iconPicker = __webpack_require__(60);

    	var _iconPicker2 = _interopRequireDefault(_iconPicker);

    	var _picker = __webpack_require__(28);

    	var _picker2 = _interopRequireDefault(_picker);

    	var _tooltip = __webpack_require__(61);

    	var _tooltip2 = _interopRequireDefault(_tooltip);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var ALIGNS = [false, 'center', 'right', 'justify'];

    	var COLORS = ["#000000", "#e60000", "#ff9900", "#ffff00", "#008a00", "#0066cc", "#9933ff", "#ffffff", "#facccc", "#ffebcc", "#ffffcc", "#cce8cc", "#cce0f5", "#ebd6ff", "#bbbbbb", "#f06666", "#ffc266", "#ffff66", "#66b966", "#66a3e0", "#c285ff", "#888888", "#a10000", "#b26b00", "#b2b200", "#006100", "#0047b2", "#6b24b2", "#444444", "#5c0000", "#663d00", "#666600", "#003700", "#002966", "#3d1466"];

    	var FONTS = [false, 'serif', 'monospace'];

    	var HEADERS = ['1', '2', '3', false];

    	var SIZES = ['small', false, 'large', 'huge'];

    	var BaseTheme = function (_Theme) {
    	  _inherits(BaseTheme, _Theme);

    	  function BaseTheme(quill, options) {
    	    _classCallCheck(this, BaseTheme);

    	    var _this = _possibleConstructorReturn(this, (BaseTheme.__proto__ || Object.getPrototypeOf(BaseTheme)).call(this, quill, options));

    	    var listener = function listener(e) {
    	      if (!document.body.contains(quill.root)) {
    	        return document.body.removeEventListener('click', listener);
    	      }
    	      if (_this.tooltip != null && !_this.tooltip.root.contains(e.target) && document.activeElement !== _this.tooltip.textbox && !_this.quill.hasFocus()) {
    	        _this.tooltip.hide();
    	      }
    	      if (_this.pickers != null) {
    	        _this.pickers.forEach(function (picker) {
    	          if (!picker.container.contains(e.target)) {
    	            picker.close();
    	          }
    	        });
    	      }
    	    };
    	    quill.emitter.listenDOM('click', document.body, listener);
    	    return _this;
    	  }

    	  _createClass(BaseTheme, [{
    	    key: 'addModule',
    	    value: function addModule(name) {
    	      var module = _get(BaseTheme.prototype.__proto__ || Object.getPrototypeOf(BaseTheme.prototype), 'addModule', this).call(this, name);
    	      if (name === 'toolbar') {
    	        this.extendToolbar(module);
    	      }
    	      return module;
    	    }
    	  }, {
    	    key: 'buildButtons',
    	    value: function buildButtons(buttons, icons) {
    	      buttons.forEach(function (button) {
    	        var className = button.getAttribute('class') || '';
    	        className.split(/\s+/).forEach(function (name) {
    	          if (!name.startsWith('ql-')) return;
    	          name = name.slice('ql-'.length);
    	          if (icons[name] == null) return;
    	          if (name === 'direction') {
    	            button.innerHTML = icons[name][''] + icons[name]['rtl'];
    	          } else if (typeof icons[name] === 'string') {
    	            button.innerHTML = icons[name];
    	          } else {
    	            var value = button.value || '';
    	            if (value != null && icons[name][value]) {
    	              button.innerHTML = icons[name][value];
    	            }
    	          }
    	        });
    	      });
    	    }
    	  }, {
    	    key: 'buildPickers',
    	    value: function buildPickers(selects, icons) {
    	      var _this2 = this;

    	      this.pickers = selects.map(function (select) {
    	        if (select.classList.contains('ql-align')) {
    	          if (select.querySelector('option') == null) {
    	            fillSelect(select, ALIGNS);
    	          }
    	          return new _iconPicker2.default(select, icons.align);
    	        } else if (select.classList.contains('ql-background') || select.classList.contains('ql-color')) {
    	          var format = select.classList.contains('ql-background') ? 'background' : 'color';
    	          if (select.querySelector('option') == null) {
    	            fillSelect(select, COLORS, format === 'background' ? '#ffffff' : '#000000');
    	          }
    	          return new _colorPicker2.default(select, icons[format]);
    	        } else {
    	          if (select.querySelector('option') == null) {
    	            if (select.classList.contains('ql-font')) {
    	              fillSelect(select, FONTS);
    	            } else if (select.classList.contains('ql-header')) {
    	              fillSelect(select, HEADERS);
    	            } else if (select.classList.contains('ql-size')) {
    	              fillSelect(select, SIZES);
    	            }
    	          }
    	          return new _picker2.default(select);
    	        }
    	      });
    	      var update = function update() {
    	        _this2.pickers.forEach(function (picker) {
    	          picker.update();
    	        });
    	      };
    	      this.quill.on(_emitter2.default.events.EDITOR_CHANGE, update);
    	    }
    	  }]);

    	  return BaseTheme;
    	}(_theme2.default);

    	BaseTheme.DEFAULTS = (0, _extend2.default)(true, {}, _theme2.default.DEFAULTS, {
    	  modules: {
    	    toolbar: {
    	      handlers: {
    	        formula: function formula() {
    	          this.quill.theme.tooltip.edit('formula');
    	        },
    	        image: function image() {
    	          var _this3 = this;

    	          var fileInput = this.container.querySelector('input.ql-image[type=file]');
    	          if (fileInput == null) {
    	            fileInput = document.createElement('input');
    	            fileInput.setAttribute('type', 'file');
    	            fileInput.setAttribute('accept', 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon');
    	            fileInput.classList.add('ql-image');
    	            fileInput.addEventListener('change', function () {
    	              if (fileInput.files != null && fileInput.files[0] != null) {
    	                var reader = new FileReader();
    	                reader.onload = function (e) {
    	                  var range = _this3.quill.getSelection(true);
    	                  _this3.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert({ image: e.target.result }), _emitter2.default.sources.USER);
    	                  _this3.quill.setSelection(range.index + 1, _emitter2.default.sources.SILENT);
    	                  fileInput.value = "";
    	                };
    	                reader.readAsDataURL(fileInput.files[0]);
    	              }
    	            });
    	            this.container.appendChild(fileInput);
    	          }
    	          fileInput.click();
    	        },
    	        video: function video() {
    	          this.quill.theme.tooltip.edit('video');
    	        }
    	      }
    	    }
    	  }
    	});

    	var BaseTooltip = function (_Tooltip) {
    	  _inherits(BaseTooltip, _Tooltip);

    	  function BaseTooltip(quill, boundsContainer) {
    	    _classCallCheck(this, BaseTooltip);

    	    var _this4 = _possibleConstructorReturn(this, (BaseTooltip.__proto__ || Object.getPrototypeOf(BaseTooltip)).call(this, quill, boundsContainer));

    	    _this4.textbox = _this4.root.querySelector('input[type="text"]');
    	    _this4.listen();
    	    return _this4;
    	  }

    	  _createClass(BaseTooltip, [{
    	    key: 'listen',
    	    value: function listen() {
    	      var _this5 = this;

    	      this.textbox.addEventListener('keydown', function (event) {
    	        if (_keyboard2.default.match(event, 'enter')) {
    	          _this5.save();
    	          event.preventDefault();
    	        } else if (_keyboard2.default.match(event, 'escape')) {
    	          _this5.cancel();
    	          event.preventDefault();
    	        }
    	      });
    	    }
    	  }, {
    	    key: 'cancel',
    	    value: function cancel() {
    	      this.hide();
    	    }
    	  }, {
    	    key: 'edit',
    	    value: function edit() {
    	      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'link';
    	      var preview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    	      this.root.classList.remove('ql-hidden');
    	      this.root.classList.add('ql-editing');
    	      if (preview != null) {
    	        this.textbox.value = preview;
    	      } else if (mode !== this.root.getAttribute('data-mode')) {
    	        this.textbox.value = '';
    	      }
    	      this.position(this.quill.getBounds(this.quill.selection.savedRange));
    	      this.textbox.select();
    	      this.textbox.setAttribute('placeholder', this.textbox.getAttribute('data-' + mode) || '');
    	      this.root.setAttribute('data-mode', mode);
    	    }
    	  }, {
    	    key: 'restoreFocus',
    	    value: function restoreFocus() {
    	      var scrollTop = this.quill.scrollingContainer.scrollTop;
    	      this.quill.focus();
    	      this.quill.scrollingContainer.scrollTop = scrollTop;
    	    }
    	  }, {
    	    key: 'save',
    	    value: function save() {
    	      var value = this.textbox.value;
    	      switch (this.root.getAttribute('data-mode')) {
    	        case 'link':
    	          {
    	            var scrollTop = this.quill.root.scrollTop;
    	            if (this.linkRange) {
    	              this.quill.formatText(this.linkRange, 'link', value, _emitter2.default.sources.USER);
    	              delete this.linkRange;
    	            } else {
    	              this.restoreFocus();
    	              this.quill.format('link', value, _emitter2.default.sources.USER);
    	            }
    	            this.quill.root.scrollTop = scrollTop;
    	            break;
    	          }
    	        case 'video':
    	          {
    	            value = extractVideoUrl(value);
    	          } // eslint-disable-next-line no-fallthrough
    	        case 'formula':
    	          {
    	            if (!value) break;
    	            var range = this.quill.getSelection(true);
    	            if (range != null) {
    	              var index = range.index + range.length;
    	              this.quill.insertEmbed(index, this.root.getAttribute('data-mode'), value, _emitter2.default.sources.USER);
    	              if (this.root.getAttribute('data-mode') === 'formula') {
    	                this.quill.insertText(index + 1, ' ', _emitter2.default.sources.USER);
    	              }
    	              this.quill.setSelection(index + 2, _emitter2.default.sources.USER);
    	            }
    	            break;
    	          }
    	      }
    	      this.textbox.value = '';
    	      this.hide();
    	    }
    	  }]);

    	  return BaseTooltip;
    	}(_tooltip2.default);

    	function extractVideoUrl(url) {
    	  var match = url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);
    	  if (match) {
    	    return (match[1] || 'https') + '://www.youtube.com/embed/' + match[2] + '?showinfo=0';
    	  }
    	  if (match = url.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/)) {
    	    // eslint-disable-line no-cond-assign
    	    return (match[1] || 'https') + '://player.vimeo.com/video/' + match[2] + '/';
    	  }
    	  return url;
    	}

    	function fillSelect(select, values) {
    	  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    	  values.forEach(function (value) {
    	    var option = document.createElement('option');
    	    if (value === defaultValue) {
    	      option.setAttribute('selected', 'selected');
    	    } else {
    	      option.setAttribute('value', value);
    	    }
    	    select.appendChild(option);
    	  });
    	}

    	exports.BaseTooltip = BaseTooltip;
    	exports.default = BaseTheme;

    	/***/ }),
    	/* 44 */
    	/***/ (function(module, exports, __webpack_require__) {

    	Object.defineProperty(exports, "__esModule", { value: true });
    	var LinkedList = /** @class */ (function () {
    	    function LinkedList() {
    	        this.head = this.tail = null;
    	        this.length = 0;
    	    }
    	    LinkedList.prototype.append = function () {
    	        var nodes = [];
    	        for (var _i = 0; _i < arguments.length; _i++) {
    	            nodes[_i] = arguments[_i];
    	        }
    	        this.insertBefore(nodes[0], null);
    	        if (nodes.length > 1) {
    	            this.append.apply(this, nodes.slice(1));
    	        }
    	    };
    	    LinkedList.prototype.contains = function (node) {
    	        var cur, next = this.iterator();
    	        while ((cur = next())) {
    	            if (cur === node)
    	                return true;
    	        }
    	        return false;
    	    };
    	    LinkedList.prototype.insertBefore = function (node, refNode) {
    	        if (!node)
    	            return;
    	        node.next = refNode;
    	        if (refNode != null) {
    	            node.prev = refNode.prev;
    	            if (refNode.prev != null) {
    	                refNode.prev.next = node;
    	            }
    	            refNode.prev = node;
    	            if (refNode === this.head) {
    	                this.head = node;
    	            }
    	        }
    	        else if (this.tail != null) {
    	            this.tail.next = node;
    	            node.prev = this.tail;
    	            this.tail = node;
    	        }
    	        else {
    	            node.prev = null;
    	            this.head = this.tail = node;
    	        }
    	        this.length += 1;
    	    };
    	    LinkedList.prototype.offset = function (target) {
    	        var index = 0, cur = this.head;
    	        while (cur != null) {
    	            if (cur === target)
    	                return index;
    	            index += cur.length();
    	            cur = cur.next;
    	        }
    	        return -1;
    	    };
    	    LinkedList.prototype.remove = function (node) {
    	        if (!this.contains(node))
    	            return;
    	        if (node.prev != null)
    	            node.prev.next = node.next;
    	        if (node.next != null)
    	            node.next.prev = node.prev;
    	        if (node === this.head)
    	            this.head = node.next;
    	        if (node === this.tail)
    	            this.tail = node.prev;
    	        this.length -= 1;
    	    };
    	    LinkedList.prototype.iterator = function (curNode) {
    	        if (curNode === void 0) { curNode = this.head; }
    	        // TODO use yield when we can
    	        return function () {
    	            var ret = curNode;
    	            if (curNode != null)
    	                curNode = curNode.next;
    	            return ret;
    	        };
    	    };
    	    LinkedList.prototype.find = function (index, inclusive) {
    	        if (inclusive === void 0) { inclusive = false; }
    	        var cur, next = this.iterator();
    	        while ((cur = next())) {
    	            var length = cur.length();
    	            if (index < length ||
    	                (inclusive && index === length && (cur.next == null || cur.next.length() !== 0))) {
    	                return [cur, index];
    	            }
    	            index -= length;
    	        }
    	        return [null, 0];
    	    };
    	    LinkedList.prototype.forEach = function (callback) {
    	        var cur, next = this.iterator();
    	        while ((cur = next())) {
    	            callback(cur);
    	        }
    	    };
    	    LinkedList.prototype.forEachAt = function (index, length, callback) {
    	        if (length <= 0)
    	            return;
    	        var _a = this.find(index), startNode = _a[0], offset = _a[1];
    	        var cur, curIndex = index - offset, next = this.iterator(startNode);
    	        while ((cur = next()) && curIndex < index + length) {
    	            var curLength = cur.length();
    	            if (index > curIndex) {
    	                callback(cur, index - curIndex, Math.min(length, curIndex + curLength - index));
    	            }
    	            else {
    	                callback(cur, 0, Math.min(curLength, index + length - curIndex));
    	            }
    	            curIndex += curLength;
    	        }
    	    };
    	    LinkedList.prototype.map = function (callback) {
    	        return this.reduce(function (memo, cur) {
    	            memo.push(callback(cur));
    	            return memo;
    	        }, []);
    	    };
    	    LinkedList.prototype.reduce = function (callback, memo) {
    	        var cur, next = this.iterator();
    	        while ((cur = next())) {
    	            memo = callback(memo, cur);
    	        }
    	        return memo;
    	    };
    	    return LinkedList;
    	}());
    	exports.default = LinkedList;


    	/***/ }),
    	/* 45 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var container_1 = __webpack_require__(17);
    	var Registry = __webpack_require__(1);
    	var OBSERVER_CONFIG = {
    	    attributes: true,
    	    characterData: true,
    	    characterDataOldValue: true,
    	    childList: true,
    	    subtree: true,
    	};
    	var MAX_OPTIMIZE_ITERATIONS = 100;
    	var ScrollBlot = /** @class */ (function (_super) {
    	    __extends(ScrollBlot, _super);
    	    function ScrollBlot(node) {
    	        var _this = _super.call(this, node) || this;
    	        _this.scroll = _this;
    	        _this.observer = new MutationObserver(function (mutations) {
    	            _this.update(mutations);
    	        });
    	        _this.observer.observe(_this.domNode, OBSERVER_CONFIG);
    	        _this.attach();
    	        return _this;
    	    }
    	    ScrollBlot.prototype.detach = function () {
    	        _super.prototype.detach.call(this);
    	        this.observer.disconnect();
    	    };
    	    ScrollBlot.prototype.deleteAt = function (index, length) {
    	        this.update();
    	        if (index === 0 && length === this.length()) {
    	            this.children.forEach(function (child) {
    	                child.remove();
    	            });
    	        }
    	        else {
    	            _super.prototype.deleteAt.call(this, index, length);
    	        }
    	    };
    	    ScrollBlot.prototype.formatAt = function (index, length, name, value) {
    	        this.update();
    	        _super.prototype.formatAt.call(this, index, length, name, value);
    	    };
    	    ScrollBlot.prototype.insertAt = function (index, value, def) {
    	        this.update();
    	        _super.prototype.insertAt.call(this, index, value, def);
    	    };
    	    ScrollBlot.prototype.optimize = function (mutations, context) {
    	        var _this = this;
    	        if (mutations === void 0) { mutations = []; }
    	        if (context === void 0) { context = {}; }
    	        _super.prototype.optimize.call(this, context);
    	        // We must modify mutations directly, cannot make copy and then modify
    	        var records = [].slice.call(this.observer.takeRecords());
    	        // Array.push currently seems to be implemented by a non-tail recursive function
    	        // so we cannot just mutations.push.apply(mutations, this.observer.takeRecords());
    	        while (records.length > 0)
    	            mutations.push(records.pop());
    	        // TODO use WeakMap
    	        var mark = function (blot, markParent) {
    	            if (markParent === void 0) { markParent = true; }
    	            if (blot == null || blot === _this)
    	                return;
    	            if (blot.domNode.parentNode == null)
    	                return;
    	            // @ts-ignore
    	            if (blot.domNode[Registry.DATA_KEY].mutations == null) {
    	                // @ts-ignore
    	                blot.domNode[Registry.DATA_KEY].mutations = [];
    	            }
    	            if (markParent)
    	                mark(blot.parent);
    	        };
    	        var optimize = function (blot) {
    	            // Post-order traversal
    	            if (
    	            // @ts-ignore
    	            blot.domNode[Registry.DATA_KEY] == null ||
    	                // @ts-ignore
    	                blot.domNode[Registry.DATA_KEY].mutations == null) {
    	                return;
    	            }
    	            if (blot instanceof container_1.default) {
    	                blot.children.forEach(optimize);
    	            }
    	            blot.optimize(context);
    	        };
    	        var remaining = mutations;
    	        for (var i = 0; remaining.length > 0; i += 1) {
    	            if (i >= MAX_OPTIMIZE_ITERATIONS) {
    	                throw new Error('[Parchment] Maximum optimize iterations reached');
    	            }
    	            remaining.forEach(function (mutation) {
    	                var blot = Registry.find(mutation.target, true);
    	                if (blot == null)
    	                    return;
    	                if (blot.domNode === mutation.target) {
    	                    if (mutation.type === 'childList') {
    	                        mark(Registry.find(mutation.previousSibling, false));
    	                        [].forEach.call(mutation.addedNodes, function (node) {
    	                            var child = Registry.find(node, false);
    	                            mark(child, false);
    	                            if (child instanceof container_1.default) {
    	                                child.children.forEach(function (grandChild) {
    	                                    mark(grandChild, false);
    	                                });
    	                            }
    	                        });
    	                    }
    	                    else if (mutation.type === 'attributes') {
    	                        mark(blot.prev);
    	                    }
    	                }
    	                mark(blot);
    	            });
    	            this.children.forEach(optimize);
    	            remaining = [].slice.call(this.observer.takeRecords());
    	            records = remaining.slice();
    	            while (records.length > 0)
    	                mutations.push(records.pop());
    	        }
    	    };
    	    ScrollBlot.prototype.update = function (mutations, context) {
    	        var _this = this;
    	        if (context === void 0) { context = {}; }
    	        mutations = mutations || this.observer.takeRecords();
    	        // TODO use WeakMap
    	        mutations
    	            .map(function (mutation) {
    	            var blot = Registry.find(mutation.target, true);
    	            if (blot == null)
    	                return null;
    	            // @ts-ignore
    	            if (blot.domNode[Registry.DATA_KEY].mutations == null) {
    	                // @ts-ignore
    	                blot.domNode[Registry.DATA_KEY].mutations = [mutation];
    	                return blot;
    	            }
    	            else {
    	                // @ts-ignore
    	                blot.domNode[Registry.DATA_KEY].mutations.push(mutation);
    	                return null;
    	            }
    	        })
    	            .forEach(function (blot) {
    	            if (blot == null ||
    	                blot === _this ||
    	                //@ts-ignore
    	                blot.domNode[Registry.DATA_KEY] == null)
    	                return;
    	            // @ts-ignore
    	            blot.update(blot.domNode[Registry.DATA_KEY].mutations || [], context);
    	        });
    	        // @ts-ignore
    	        if (this.domNode[Registry.DATA_KEY].mutations != null) {
    	            // @ts-ignore
    	            _super.prototype.update.call(this, this.domNode[Registry.DATA_KEY].mutations, context);
    	        }
    	        this.optimize(mutations, context);
    	    };
    	    ScrollBlot.blotName = 'scroll';
    	    ScrollBlot.defaultChild = 'block';
    	    ScrollBlot.scope = Registry.Scope.BLOCK_BLOT;
    	    ScrollBlot.tagName = 'DIV';
    	    return ScrollBlot;
    	}(container_1.default));
    	exports.default = ScrollBlot;


    	/***/ }),
    	/* 46 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var format_1 = __webpack_require__(18);
    	var Registry = __webpack_require__(1);
    	// Shallow object comparison
    	function isEqual(obj1, obj2) {
    	    if (Object.keys(obj1).length !== Object.keys(obj2).length)
    	        return false;
    	    // @ts-ignore
    	    for (var prop in obj1) {
    	        // @ts-ignore
    	        if (obj1[prop] !== obj2[prop])
    	            return false;
    	    }
    	    return true;
    	}
    	var InlineBlot = /** @class */ (function (_super) {
    	    __extends(InlineBlot, _super);
    	    function InlineBlot() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    InlineBlot.formats = function (domNode) {
    	        if (domNode.tagName === InlineBlot.tagName)
    	            return undefined;
    	        return _super.formats.call(this, domNode);
    	    };
    	    InlineBlot.prototype.format = function (name, value) {
    	        var _this = this;
    	        if (name === this.statics.blotName && !value) {
    	            this.children.forEach(function (child) {
    	                if (!(child instanceof format_1.default)) {
    	                    child = child.wrap(InlineBlot.blotName, true);
    	                }
    	                _this.attributes.copy(child);
    	            });
    	            this.unwrap();
    	        }
    	        else {
    	            _super.prototype.format.call(this, name, value);
    	        }
    	    };
    	    InlineBlot.prototype.formatAt = function (index, length, name, value) {
    	        if (this.formats()[name] != null || Registry.query(name, Registry.Scope.ATTRIBUTE)) {
    	            var blot = this.isolate(index, length);
    	            blot.format(name, value);
    	        }
    	        else {
    	            _super.prototype.formatAt.call(this, index, length, name, value);
    	        }
    	    };
    	    InlineBlot.prototype.optimize = function (context) {
    	        _super.prototype.optimize.call(this, context);
    	        var formats = this.formats();
    	        if (Object.keys(formats).length === 0) {
    	            return this.unwrap(); // unformatted span
    	        }
    	        var next = this.next;
    	        if (next instanceof InlineBlot && next.prev === this && isEqual(formats, next.formats())) {
    	            next.moveChildren(this);
    	            next.remove();
    	        }
    	    };
    	    InlineBlot.blotName = 'inline';
    	    InlineBlot.scope = Registry.Scope.INLINE_BLOT;
    	    InlineBlot.tagName = 'SPAN';
    	    return InlineBlot;
    	}(format_1.default));
    	exports.default = InlineBlot;


    	/***/ }),
    	/* 47 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var format_1 = __webpack_require__(18);
    	var Registry = __webpack_require__(1);
    	var BlockBlot = /** @class */ (function (_super) {
    	    __extends(BlockBlot, _super);
    	    function BlockBlot() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    BlockBlot.formats = function (domNode) {
    	        var tagName = Registry.query(BlockBlot.blotName).tagName;
    	        if (domNode.tagName === tagName)
    	            return undefined;
    	        return _super.formats.call(this, domNode);
    	    };
    	    BlockBlot.prototype.format = function (name, value) {
    	        if (Registry.query(name, Registry.Scope.BLOCK) == null) {
    	            return;
    	        }
    	        else if (name === this.statics.blotName && !value) {
    	            this.replaceWith(BlockBlot.blotName);
    	        }
    	        else {
    	            _super.prototype.format.call(this, name, value);
    	        }
    	    };
    	    BlockBlot.prototype.formatAt = function (index, length, name, value) {
    	        if (Registry.query(name, Registry.Scope.BLOCK) != null) {
    	            this.format(name, value);
    	        }
    	        else {
    	            _super.prototype.formatAt.call(this, index, length, name, value);
    	        }
    	    };
    	    BlockBlot.prototype.insertAt = function (index, value, def) {
    	        if (def == null || Registry.query(value, Registry.Scope.INLINE) != null) {
    	            // Insert text or inline
    	            _super.prototype.insertAt.call(this, index, value, def);
    	        }
    	        else {
    	            var after = this.split(index);
    	            var blot = Registry.create(value, def);
    	            after.parent.insertBefore(blot, after);
    	        }
    	    };
    	    BlockBlot.prototype.update = function (mutations, context) {
    	        if (navigator.userAgent.match(/Trident/)) {
    	            this.build();
    	        }
    	        else {
    	            _super.prototype.update.call(this, mutations, context);
    	        }
    	    };
    	    BlockBlot.blotName = 'block';
    	    BlockBlot.scope = Registry.Scope.BLOCK_BLOT;
    	    BlockBlot.tagName = 'P';
    	    return BlockBlot;
    	}(format_1.default));
    	exports.default = BlockBlot;


    	/***/ }),
    	/* 48 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var leaf_1 = __webpack_require__(19);
    	var EmbedBlot = /** @class */ (function (_super) {
    	    __extends(EmbedBlot, _super);
    	    function EmbedBlot() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    EmbedBlot.formats = function (domNode) {
    	        return undefined;
    	    };
    	    EmbedBlot.prototype.format = function (name, value) {
    	        // super.formatAt wraps, which is what we want in general,
    	        // but this allows subclasses to overwrite for formats
    	        // that just apply to particular embeds
    	        _super.prototype.formatAt.call(this, 0, this.length(), name, value);
    	    };
    	    EmbedBlot.prototype.formatAt = function (index, length, name, value) {
    	        if (index === 0 && length === this.length()) {
    	            this.format(name, value);
    	        }
    	        else {
    	            _super.prototype.formatAt.call(this, index, length, name, value);
    	        }
    	    };
    	    EmbedBlot.prototype.formats = function () {
    	        return this.statics.formats(this.domNode);
    	    };
    	    return EmbedBlot;
    	}(leaf_1.default));
    	exports.default = EmbedBlot;


    	/***/ }),
    	/* 49 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var leaf_1 = __webpack_require__(19);
    	var Registry = __webpack_require__(1);
    	var TextBlot = /** @class */ (function (_super) {
    	    __extends(TextBlot, _super);
    	    function TextBlot(node) {
    	        var _this = _super.call(this, node) || this;
    	        _this.text = _this.statics.value(_this.domNode);
    	        return _this;
    	    }
    	    TextBlot.create = function (value) {
    	        return document.createTextNode(value);
    	    };
    	    TextBlot.value = function (domNode) {
    	        var text = domNode.data;
    	        // @ts-ignore
    	        if (text['normalize'])
    	            text = text['normalize']();
    	        return text;
    	    };
    	    TextBlot.prototype.deleteAt = function (index, length) {
    	        this.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);
    	    };
    	    TextBlot.prototype.index = function (node, offset) {
    	        if (this.domNode === node) {
    	            return offset;
    	        }
    	        return -1;
    	    };
    	    TextBlot.prototype.insertAt = function (index, value, def) {
    	        if (def == null) {
    	            this.text = this.text.slice(0, index) + value + this.text.slice(index);
    	            this.domNode.data = this.text;
    	        }
    	        else {
    	            _super.prototype.insertAt.call(this, index, value, def);
    	        }
    	    };
    	    TextBlot.prototype.length = function () {
    	        return this.text.length;
    	    };
    	    TextBlot.prototype.optimize = function (context) {
    	        _super.prototype.optimize.call(this, context);
    	        this.text = this.statics.value(this.domNode);
    	        if (this.text.length === 0) {
    	            this.remove();
    	        }
    	        else if (this.next instanceof TextBlot && this.next.prev === this) {
    	            this.insertAt(this.length(), this.next.value());
    	            this.next.remove();
    	        }
    	    };
    	    TextBlot.prototype.position = function (index, inclusive) {
    	        return [this.domNode, index];
    	    };
    	    TextBlot.prototype.split = function (index, force) {
    	        if (force === void 0) { force = false; }
    	        if (!force) {
    	            if (index === 0)
    	                return this;
    	            if (index === this.length())
    	                return this.next;
    	        }
    	        var after = Registry.create(this.domNode.splitText(index));
    	        this.parent.insertBefore(after, this.next);
    	        this.text = this.statics.value(this.domNode);
    	        return after;
    	    };
    	    TextBlot.prototype.update = function (mutations, context) {
    	        var _this = this;
    	        if (mutations.some(function (mutation) {
    	            return mutation.type === 'characterData' && mutation.target === _this.domNode;
    	        })) {
    	            this.text = this.statics.value(this.domNode);
    	        }
    	    };
    	    TextBlot.prototype.value = function () {
    	        return this.text;
    	    };
    	    TextBlot.blotName = 'text';
    	    TextBlot.scope = Registry.Scope.INLINE_BLOT;
    	    return TextBlot;
    	}(leaf_1.default));
    	exports.default = TextBlot;


    	/***/ }),
    	/* 50 */
    	/***/ (function(module, exports, __webpack_require__) {


    	var elem = document.createElement('div');
    	elem.classList.toggle('test-class', false);
    	if (elem.classList.contains('test-class')) {
    	  var _toggle = DOMTokenList.prototype.toggle;
    	  DOMTokenList.prototype.toggle = function (token, force) {
    	    if (arguments.length > 1 && !this.contains(token) === !force) {
    	      return force;
    	    } else {
    	      return _toggle.call(this, token);
    	    }
    	  };
    	}

    	if (!String.prototype.startsWith) {
    	  String.prototype.startsWith = function (searchString, position) {
    	    position = position || 0;
    	    return this.substr(position, searchString.length) === searchString;
    	  };
    	}

    	if (!String.prototype.endsWith) {
    	  String.prototype.endsWith = function (searchString, position) {
    	    var subjectString = this.toString();
    	    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
    	      position = subjectString.length;
    	    }
    	    position -= searchString.length;
    	    var lastIndex = subjectString.indexOf(searchString, position);
    	    return lastIndex !== -1 && lastIndex === position;
    	  };
    	}

    	if (!Array.prototype.find) {
    	  Object.defineProperty(Array.prototype, "find", {
    	    value: function value(predicate) {
    	      if (this === null) {
    	        throw new TypeError('Array.prototype.find called on null or undefined');
    	      }
    	      if (typeof predicate !== 'function') {
    	        throw new TypeError('predicate must be a function');
    	      }
    	      var list = Object(this);
    	      var length = list.length >>> 0;
    	      var thisArg = arguments[1];
    	      var value;

    	      for (var i = 0; i < length; i++) {
    	        value = list[i];
    	        if (predicate.call(thisArg, value, i, list)) {
    	          return value;
    	        }
    	      }
    	      return undefined;
    	    }
    	  });
    	}

    	document.addEventListener("DOMContentLoaded", function () {
    	  // Disable resizing in Firefox
    	  document.execCommand("enableObjectResizing", false, false);
    	  // Disable automatic linkifying in IE11
    	  document.execCommand("autoUrlDetect", false, false);
    	});

    	/***/ }),
    	/* 51 */
    	/***/ (function(module, exports) {

    	/**
    	 * This library modifies the diff-patch-match library by Neil Fraser
    	 * by removing the patch and match functionality and certain advanced
    	 * options in the diff function. The original license is as follows:
    	 *
    	 * ===
    	 *
    	 * Diff Match and Patch
    	 *
    	 * Copyright 2006 Google Inc.
    	 * http://code.google.com/p/google-diff-match-patch/
    	 *
    	 * Licensed under the Apache License, Version 2.0 (the "License");
    	 * you may not use this file except in compliance with the License.
    	 * You may obtain a copy of the License at
    	 *
    	 *   http://www.apache.org/licenses/LICENSE-2.0
    	 *
    	 * Unless required by applicable law or agreed to in writing, software
    	 * distributed under the License is distributed on an "AS IS" BASIS,
    	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    	 * See the License for the specific language governing permissions and
    	 * limitations under the License.
    	 */


    	/**
    	 * The data structure representing a diff is an array of tuples:
    	 * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
    	 * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
    	 */
    	var DIFF_DELETE = -1;
    	var DIFF_INSERT = 1;
    	var DIFF_EQUAL = 0;


    	/**
    	 * Find the differences between two texts.  Simplifies the problem by stripping
    	 * any common prefix or suffix off the texts before diffing.
    	 * @param {string} text1 Old string to be diffed.
    	 * @param {string} text2 New string to be diffed.
    	 * @param {Int} cursor_pos Expected edit position in text1 (optional)
    	 * @return {Array} Array of diff tuples.
    	 */
    	function diff_main(text1, text2, cursor_pos) {
    	  // Check for equality (speedup).
    	  if (text1 == text2) {
    	    if (text1) {
    	      return [[DIFF_EQUAL, text1]];
    	    }
    	    return [];
    	  }

    	  // Check cursor_pos within bounds
    	  if (cursor_pos < 0 || text1.length < cursor_pos) {
    	    cursor_pos = null;
    	  }

    	  // Trim off common prefix (speedup).
    	  var commonlength = diff_commonPrefix(text1, text2);
    	  var commonprefix = text1.substring(0, commonlength);
    	  text1 = text1.substring(commonlength);
    	  text2 = text2.substring(commonlength);

    	  // Trim off common suffix (speedup).
    	  commonlength = diff_commonSuffix(text1, text2);
    	  var commonsuffix = text1.substring(text1.length - commonlength);
    	  text1 = text1.substring(0, text1.length - commonlength);
    	  text2 = text2.substring(0, text2.length - commonlength);

    	  // Compute the diff on the middle block.
    	  var diffs = diff_compute_(text1, text2);

    	  // Restore the prefix and suffix.
    	  if (commonprefix) {
    	    diffs.unshift([DIFF_EQUAL, commonprefix]);
    	  }
    	  if (commonsuffix) {
    	    diffs.push([DIFF_EQUAL, commonsuffix]);
    	  }
    	  diff_cleanupMerge(diffs);
    	  if (cursor_pos != null) {
    	    diffs = fix_cursor(diffs, cursor_pos);
    	  }
    	  diffs = fix_emoji(diffs);
    	  return diffs;
    	}

    	/**
    	 * Find the differences between two texts.  Assumes that the texts do not
    	 * have any common prefix or suffix.
    	 * @param {string} text1 Old string to be diffed.
    	 * @param {string} text2 New string to be diffed.
    	 * @return {Array} Array of diff tuples.
    	 */
    	function diff_compute_(text1, text2) {
    	  var diffs;

    	  if (!text1) {
    	    // Just add some text (speedup).
    	    return [[DIFF_INSERT, text2]];
    	  }

    	  if (!text2) {
    	    // Just delete some text (speedup).
    	    return [[DIFF_DELETE, text1]];
    	  }

    	  var longtext = text1.length > text2.length ? text1 : text2;
    	  var shorttext = text1.length > text2.length ? text2 : text1;
    	  var i = longtext.indexOf(shorttext);
    	  if (i != -1) {
    	    // Shorter text is inside the longer text (speedup).
    	    diffs = [[DIFF_INSERT, longtext.substring(0, i)],
    	             [DIFF_EQUAL, shorttext],
    	             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];
    	    // Swap insertions for deletions if diff is reversed.
    	    if (text1.length > text2.length) {
    	      diffs[0][0] = diffs[2][0] = DIFF_DELETE;
    	    }
    	    return diffs;
    	  }

    	  if (shorttext.length == 1) {
    	    // Single character string.
    	    // After the previous speedup, the character can't be an equality.
    	    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
    	  }

    	  // Check to see if the problem can be split in two.
    	  var hm = diff_halfMatch_(text1, text2);
    	  if (hm) {
    	    // A half-match was found, sort out the return data.
    	    var text1_a = hm[0];
    	    var text1_b = hm[1];
    	    var text2_a = hm[2];
    	    var text2_b = hm[3];
    	    var mid_common = hm[4];
    	    // Send both pairs off for separate processing.
    	    var diffs_a = diff_main(text1_a, text2_a);
    	    var diffs_b = diff_main(text1_b, text2_b);
    	    // Merge the results.
    	    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
    	  }

    	  return diff_bisect_(text1, text2);
    	}

    	/**
    	 * Find the 'middle snake' of a diff, split the problem in two
    	 * and return the recursively constructed diff.
    	 * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
    	 * @param {string} text1 Old string to be diffed.
    	 * @param {string} text2 New string to be diffed.
    	 * @return {Array} Array of diff tuples.
    	 * @private
    	 */
    	function diff_bisect_(text1, text2) {
    	  // Cache the text lengths to prevent multiple calls.
    	  var text1_length = text1.length;
    	  var text2_length = text2.length;
    	  var max_d = Math.ceil((text1_length + text2_length) / 2);
    	  var v_offset = max_d;
    	  var v_length = 2 * max_d;
    	  var v1 = new Array(v_length);
    	  var v2 = new Array(v_length);
    	  // Setting all elements to -1 is faster in Chrome & Firefox than mixing
    	  // integers and undefined.
    	  for (var x = 0; x < v_length; x++) {
    	    v1[x] = -1;
    	    v2[x] = -1;
    	  }
    	  v1[v_offset + 1] = 0;
    	  v2[v_offset + 1] = 0;
    	  var delta = text1_length - text2_length;
    	  // If the total number of characters is odd, then the front path will collide
    	  // with the reverse path.
    	  var front = (delta % 2 != 0);
    	  // Offsets for start and end of k loop.
    	  // Prevents mapping of space beyond the grid.
    	  var k1start = 0;
    	  var k1end = 0;
    	  var k2start = 0;
    	  var k2end = 0;
    	  for (var d = 0; d < max_d; d++) {
    	    // Walk the front path one step.
    	    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
    	      var k1_offset = v_offset + k1;
    	      var x1;
    	      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {
    	        x1 = v1[k1_offset + 1];
    	      } else {
    	        x1 = v1[k1_offset - 1] + 1;
    	      }
    	      var y1 = x1 - k1;
    	      while (x1 < text1_length && y1 < text2_length &&
    	             text1.charAt(x1) == text2.charAt(y1)) {
    	        x1++;
    	        y1++;
    	      }
    	      v1[k1_offset] = x1;
    	      if (x1 > text1_length) {
    	        // Ran off the right of the graph.
    	        k1end += 2;
    	      } else if (y1 > text2_length) {
    	        // Ran off the bottom of the graph.
    	        k1start += 2;
    	      } else if (front) {
    	        var k2_offset = v_offset + delta - k1;
    	        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
    	          // Mirror x2 onto top-left coordinate system.
    	          var x2 = text1_length - v2[k2_offset];
    	          if (x1 >= x2) {
    	            // Overlap detected.
    	            return diff_bisectSplit_(text1, text2, x1, y1);
    	          }
    	        }
    	      }
    	    }

    	    // Walk the reverse path one step.
    	    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
    	      var k2_offset = v_offset + k2;
    	      var x2;
    	      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {
    	        x2 = v2[k2_offset + 1];
    	      } else {
    	        x2 = v2[k2_offset - 1] + 1;
    	      }
    	      var y2 = x2 - k2;
    	      while (x2 < text1_length && y2 < text2_length &&
    	             text1.charAt(text1_length - x2 - 1) ==
    	             text2.charAt(text2_length - y2 - 1)) {
    	        x2++;
    	        y2++;
    	      }
    	      v2[k2_offset] = x2;
    	      if (x2 > text1_length) {
    	        // Ran off the left of the graph.
    	        k2end += 2;
    	      } else if (y2 > text2_length) {
    	        // Ran off the top of the graph.
    	        k2start += 2;
    	      } else if (!front) {
    	        var k1_offset = v_offset + delta - k2;
    	        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
    	          var x1 = v1[k1_offset];
    	          var y1 = v_offset + x1 - k1_offset;
    	          // Mirror x2 onto top-left coordinate system.
    	          x2 = text1_length - x2;
    	          if (x1 >= x2) {
    	            // Overlap detected.
    	            return diff_bisectSplit_(text1, text2, x1, y1);
    	          }
    	        }
    	      }
    	    }
    	  }
    	  // Diff took too long and hit the deadline or
    	  // number of diffs equals number of characters, no commonality at all.
    	  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
    	}

    	/**
    	 * Given the location of the 'middle snake', split the diff in two parts
    	 * and recurse.
    	 * @param {string} text1 Old string to be diffed.
    	 * @param {string} text2 New string to be diffed.
    	 * @param {number} x Index of split point in text1.
    	 * @param {number} y Index of split point in text2.
    	 * @return {Array} Array of diff tuples.
    	 */
    	function diff_bisectSplit_(text1, text2, x, y) {
    	  var text1a = text1.substring(0, x);
    	  var text2a = text2.substring(0, y);
    	  var text1b = text1.substring(x);
    	  var text2b = text2.substring(y);

    	  // Compute both diffs serially.
    	  var diffs = diff_main(text1a, text2a);
    	  var diffsb = diff_main(text1b, text2b);

    	  return diffs.concat(diffsb);
    	}

    	/**
    	 * Determine the common prefix of two strings.
    	 * @param {string} text1 First string.
    	 * @param {string} text2 Second string.
    	 * @return {number} The number of characters common to the start of each
    	 *     string.
    	 */
    	function diff_commonPrefix(text1, text2) {
    	  // Quick check for common null cases.
    	  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
    	    return 0;
    	  }
    	  // Binary search.
    	  // Performance analysis: http://neil.fraser.name/news/2007/10/09/
    	  var pointermin = 0;
    	  var pointermax = Math.min(text1.length, text2.length);
    	  var pointermid = pointermax;
    	  var pointerstart = 0;
    	  while (pointermin < pointermid) {
    	    if (text1.substring(pointerstart, pointermid) ==
    	        text2.substring(pointerstart, pointermid)) {
    	      pointermin = pointermid;
    	      pointerstart = pointermin;
    	    } else {
    	      pointermax = pointermid;
    	    }
    	    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
    	  }
    	  return pointermid;
    	}

    	/**
    	 * Determine the common suffix of two strings.
    	 * @param {string} text1 First string.
    	 * @param {string} text2 Second string.
    	 * @return {number} The number of characters common to the end of each string.
    	 */
    	function diff_commonSuffix(text1, text2) {
    	  // Quick check for common null cases.
    	  if (!text1 || !text2 ||
    	      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
    	    return 0;
    	  }
    	  // Binary search.
    	  // Performance analysis: http://neil.fraser.name/news/2007/10/09/
    	  var pointermin = 0;
    	  var pointermax = Math.min(text1.length, text2.length);
    	  var pointermid = pointermax;
    	  var pointerend = 0;
    	  while (pointermin < pointermid) {
    	    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==
    	        text2.substring(text2.length - pointermid, text2.length - pointerend)) {
    	      pointermin = pointermid;
    	      pointerend = pointermin;
    	    } else {
    	      pointermax = pointermid;
    	    }
    	    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
    	  }
    	  return pointermid;
    	}

    	/**
    	 * Do the two texts share a substring which is at least half the length of the
    	 * longer text?
    	 * This speedup can produce non-minimal diffs.
    	 * @param {string} text1 First string.
    	 * @param {string} text2 Second string.
    	 * @return {Array.<string>} Five element Array, containing the prefix of
    	 *     text1, the suffix of text1, the prefix of text2, the suffix of
    	 *     text2 and the common middle.  Or null if there was no match.
    	 */
    	function diff_halfMatch_(text1, text2) {
    	  var longtext = text1.length > text2.length ? text1 : text2;
    	  var shorttext = text1.length > text2.length ? text2 : text1;
    	  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
    	    return null;  // Pointless.
    	  }

    	  /**
    	   * Does a substring of shorttext exist within longtext such that the substring
    	   * is at least half the length of longtext?
    	   * Closure, but does not reference any external variables.
    	   * @param {string} longtext Longer string.
    	   * @param {string} shorttext Shorter string.
    	   * @param {number} i Start index of quarter length substring within longtext.
    	   * @return {Array.<string>} Five element Array, containing the prefix of
    	   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
    	   *     of shorttext and the common middle.  Or null if there was no match.
    	   * @private
    	   */
    	  function diff_halfMatchI_(longtext, shorttext, i) {
    	    // Start with a 1/4 length substring at position i as a seed.
    	    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
    	    var j = -1;
    	    var best_common = '';
    	    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
    	    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
    	      var prefixLength = diff_commonPrefix(longtext.substring(i),
    	                                           shorttext.substring(j));
    	      var suffixLength = diff_commonSuffix(longtext.substring(0, i),
    	                                           shorttext.substring(0, j));
    	      if (best_common.length < suffixLength + prefixLength) {
    	        best_common = shorttext.substring(j - suffixLength, j) +
    	            shorttext.substring(j, j + prefixLength);
    	        best_longtext_a = longtext.substring(0, i - suffixLength);
    	        best_longtext_b = longtext.substring(i + prefixLength);
    	        best_shorttext_a = shorttext.substring(0, j - suffixLength);
    	        best_shorttext_b = shorttext.substring(j + prefixLength);
    	      }
    	    }
    	    if (best_common.length * 2 >= longtext.length) {
    	      return [best_longtext_a, best_longtext_b,
    	              best_shorttext_a, best_shorttext_b, best_common];
    	    } else {
    	      return null;
    	    }
    	  }

    	  // First check if the second quarter is the seed for a half-match.
    	  var hm1 = diff_halfMatchI_(longtext, shorttext,
    	                             Math.ceil(longtext.length / 4));
    	  // Check again based on the third quarter.
    	  var hm2 = diff_halfMatchI_(longtext, shorttext,
    	                             Math.ceil(longtext.length / 2));
    	  var hm;
    	  if (!hm1 && !hm2) {
    	    return null;
    	  } else if (!hm2) {
    	    hm = hm1;
    	  } else if (!hm1) {
    	    hm = hm2;
    	  } else {
    	    // Both matched.  Select the longest.
    	    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
    	  }

    	  // A half-match was found, sort out the return data.
    	  var text1_a, text1_b, text2_a, text2_b;
    	  if (text1.length > text2.length) {
    	    text1_a = hm[0];
    	    text1_b = hm[1];
    	    text2_a = hm[2];
    	    text2_b = hm[3];
    	  } else {
    	    text2_a = hm[0];
    	    text2_b = hm[1];
    	    text1_a = hm[2];
    	    text1_b = hm[3];
    	  }
    	  var mid_common = hm[4];
    	  return [text1_a, text1_b, text2_a, text2_b, mid_common];
    	}

    	/**
    	 * Reorder and merge like edit sections.  Merge equalities.
    	 * Any edit section can move as long as it doesn't cross an equality.
    	 * @param {Array} diffs Array of diff tuples.
    	 */
    	function diff_cleanupMerge(diffs) {
    	  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.
    	  var pointer = 0;
    	  var count_delete = 0;
    	  var count_insert = 0;
    	  var text_delete = '';
    	  var text_insert = '';
    	  var commonlength;
    	  while (pointer < diffs.length) {
    	    switch (diffs[pointer][0]) {
    	      case DIFF_INSERT:
    	        count_insert++;
    	        text_insert += diffs[pointer][1];
    	        pointer++;
    	        break;
    	      case DIFF_DELETE:
    	        count_delete++;
    	        text_delete += diffs[pointer][1];
    	        pointer++;
    	        break;
    	      case DIFF_EQUAL:
    	        // Upon reaching an equality, check for prior redundancies.
    	        if (count_delete + count_insert > 1) {
    	          if (count_delete !== 0 && count_insert !== 0) {
    	            // Factor out any common prefixies.
    	            commonlength = diff_commonPrefix(text_insert, text_delete);
    	            if (commonlength !== 0) {
    	              if ((pointer - count_delete - count_insert) > 0 &&
    	                  diffs[pointer - count_delete - count_insert - 1][0] ==
    	                  DIFF_EQUAL) {
    	                diffs[pointer - count_delete - count_insert - 1][1] +=
    	                    text_insert.substring(0, commonlength);
    	              } else {
    	                diffs.splice(0, 0, [DIFF_EQUAL,
    	                                    text_insert.substring(0, commonlength)]);
    	                pointer++;
    	              }
    	              text_insert = text_insert.substring(commonlength);
    	              text_delete = text_delete.substring(commonlength);
    	            }
    	            // Factor out any common suffixies.
    	            commonlength = diff_commonSuffix(text_insert, text_delete);
    	            if (commonlength !== 0) {
    	              diffs[pointer][1] = text_insert.substring(text_insert.length -
    	                  commonlength) + diffs[pointer][1];
    	              text_insert = text_insert.substring(0, text_insert.length -
    	                  commonlength);
    	              text_delete = text_delete.substring(0, text_delete.length -
    	                  commonlength);
    	            }
    	          }
    	          // Delete the offending records and add the merged ones.
    	          if (count_delete === 0) {
    	            diffs.splice(pointer - count_insert,
    	                count_delete + count_insert, [DIFF_INSERT, text_insert]);
    	          } else if (count_insert === 0) {
    	            diffs.splice(pointer - count_delete,
    	                count_delete + count_insert, [DIFF_DELETE, text_delete]);
    	          } else {
    	            diffs.splice(pointer - count_delete - count_insert,
    	                count_delete + count_insert, [DIFF_DELETE, text_delete],
    	                [DIFF_INSERT, text_insert]);
    	          }
    	          pointer = pointer - count_delete - count_insert +
    	                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;
    	        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
    	          // Merge this equality with the previous one.
    	          diffs[pointer - 1][1] += diffs[pointer][1];
    	          diffs.splice(pointer, 1);
    	        } else {
    	          pointer++;
    	        }
    	        count_insert = 0;
    	        count_delete = 0;
    	        text_delete = '';
    	        text_insert = '';
    	        break;
    	    }
    	  }
    	  if (diffs[diffs.length - 1][1] === '') {
    	    diffs.pop();  // Remove the dummy entry at the end.
    	  }

    	  // Second pass: look for single edits surrounded on both sides by equalities
    	  // which can be shifted sideways to eliminate an equality.
    	  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
    	  var changes = false;
    	  pointer = 1;
    	  // Intentionally ignore the first and last element (don't need checking).
    	  while (pointer < diffs.length - 1) {
    	    if (diffs[pointer - 1][0] == DIFF_EQUAL &&
    	        diffs[pointer + 1][0] == DIFF_EQUAL) {
    	      // This is a single edit surrounded by equalities.
    	      if (diffs[pointer][1].substring(diffs[pointer][1].length -
    	          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
    	        // Shift the edit over the previous equality.
    	        diffs[pointer][1] = diffs[pointer - 1][1] +
    	            diffs[pointer][1].substring(0, diffs[pointer][1].length -
    	                                        diffs[pointer - 1][1].length);
    	        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
    	        diffs.splice(pointer - 1, 1);
    	        changes = true;
    	      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==
    	          diffs[pointer + 1][1]) {
    	        // Shift the edit over the next equality.
    	        diffs[pointer - 1][1] += diffs[pointer + 1][1];
    	        diffs[pointer][1] =
    	            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
    	            diffs[pointer + 1][1];
    	        diffs.splice(pointer + 1, 1);
    	        changes = true;
    	      }
    	    }
    	    pointer++;
    	  }
    	  // If shifts were made, the diff needs reordering and another shift sweep.
    	  if (changes) {
    	    diff_cleanupMerge(diffs);
    	  }
    	}

    	var diff = diff_main;
    	diff.INSERT = DIFF_INSERT;
    	diff.DELETE = DIFF_DELETE;
    	diff.EQUAL = DIFF_EQUAL;

    	module.exports = diff;

    	/*
    	 * Modify a diff such that the cursor position points to the start of a change:
    	 * E.g.
    	 *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)
    	 *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]
    	 *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)
    	 *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]
    	 *
    	 * @param {Array} diffs Array of diff tuples
    	 * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
    	 * @return {Array} A tuple [cursor location in the modified diff, modified diff]
    	 */
    	function cursor_normalize_diff (diffs, cursor_pos) {
    	  if (cursor_pos === 0) {
    	    return [DIFF_EQUAL, diffs];
    	  }
    	  for (var current_pos = 0, i = 0; i < diffs.length; i++) {
    	    var d = diffs[i];
    	    if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {
    	      var next_pos = current_pos + d[1].length;
    	      if (cursor_pos === next_pos) {
    	        return [i + 1, diffs];
    	      } else if (cursor_pos < next_pos) {
    	        // copy to prevent side effects
    	        diffs = diffs.slice();
    	        // split d into two diff changes
    	        var split_pos = cursor_pos - current_pos;
    	        var d_left = [d[0], d[1].slice(0, split_pos)];
    	        var d_right = [d[0], d[1].slice(split_pos)];
    	        diffs.splice(i, 1, d_left, d_right);
    	        return [i + 1, diffs];
    	      } else {
    	        current_pos = next_pos;
    	      }
    	    }
    	  }
    	  throw new Error('cursor_pos is out of bounds!')
    	}

    	/*
    	 * Modify a diff such that the edit position is "shifted" to the proposed edit location (cursor_position).
    	 *
    	 * Case 1)
    	 *   Check if a naive shift is possible:
    	 *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)
    	 *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result
    	 * Case 2)
    	 *   Check if the following shifts are possible:
    	 *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']
    	 *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']
    	 *         ^            ^
    	 *         d          d_next
    	 *
    	 * @param {Array} diffs Array of diff tuples
    	 * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
    	 * @return {Array} Array of diff tuples
    	 */
    	function fix_cursor (diffs, cursor_pos) {
    	  var norm = cursor_normalize_diff(diffs, cursor_pos);
    	  var ndiffs = norm[1];
    	  var cursor_pointer = norm[0];
    	  var d = ndiffs[cursor_pointer];
    	  var d_next = ndiffs[cursor_pointer + 1];

    	  if (d == null) {
    	    // Text was deleted from end of original string,
    	    // cursor is now out of bounds in new string
    	    return diffs;
    	  } else if (d[0] !== DIFF_EQUAL) {
    	    // A modification happened at the cursor location.
    	    // This is the expected outcome, so we can return the original diff.
    	    return diffs;
    	  } else {
    	    if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {
    	      // Case 1)
    	      // It is possible to perform a naive shift
    	      ndiffs.splice(cursor_pointer, 2, d_next, d);
    	      return merge_tuples(ndiffs, cursor_pointer, 2)
    	    } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {
    	      // Case 2)
    	      // d[1] is a prefix of d_next[1]
    	      // We can assume that d_next[0] !== 0, since d[0] === 0
    	      // Shift edit locations..
    	      ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);
    	      var suffix = d_next[1].slice(d[1].length);
    	      if (suffix.length > 0) {
    	        ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);
    	      }
    	      return merge_tuples(ndiffs, cursor_pointer, 3)
    	    } else {
    	      // Not possible to perform any modification
    	      return diffs;
    	    }
    	  }
    	}

    	/*
    	 * Check diff did not split surrogate pairs.
    	 * Ex. [0, '\uD83D'], [-1, '\uDC36'], [1, '\uDC2F'] -> [-1, '\uD83D\uDC36'], [1, '\uD83D\uDC2F']
    	 *     '\uD83D\uDC36' === '🐶', '\uD83D\uDC2F' === '🐯'
    	 *
    	 * @param {Array} diffs Array of diff tuples
    	 * @return {Array} Array of diff tuples
    	 */
    	function fix_emoji (diffs) {
    	  var compact = false;
    	  var starts_with_pair_end = function(str) {
    	    return str.charCodeAt(0) >= 0xDC00 && str.charCodeAt(0) <= 0xDFFF;
    	  };
    	  var ends_with_pair_start = function(str) {
    	    return str.charCodeAt(str.length-1) >= 0xD800 && str.charCodeAt(str.length-1) <= 0xDBFF;
    	  };
    	  for (var i = 2; i < diffs.length; i += 1) {
    	    if (diffs[i-2][0] === DIFF_EQUAL && ends_with_pair_start(diffs[i-2][1]) &&
    	        diffs[i-1][0] === DIFF_DELETE && starts_with_pair_end(diffs[i-1][1]) &&
    	        diffs[i][0] === DIFF_INSERT && starts_with_pair_end(diffs[i][1])) {
    	      compact = true;

    	      diffs[i-1][1] = diffs[i-2][1].slice(-1) + diffs[i-1][1];
    	      diffs[i][1] = diffs[i-2][1].slice(-1) + diffs[i][1];

    	      diffs[i-2][1] = diffs[i-2][1].slice(0, -1);
    	    }
    	  }
    	  if (!compact) {
    	    return diffs;
    	  }
    	  var fixed_diffs = [];
    	  for (var i = 0; i < diffs.length; i += 1) {
    	    if (diffs[i][1].length > 0) {
    	      fixed_diffs.push(diffs[i]);
    	    }
    	  }
    	  return fixed_diffs;
    	}

    	/*
    	 * Try to merge tuples with their neigbors in a given range.
    	 * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']
    	 *
    	 * @param {Array} diffs Array of diff tuples.
    	 * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).
    	 * @param {Int} length Number of consecutive elements to check.
    	 * @return {Array} Array of merged diff tuples.
    	 */
    	function merge_tuples (diffs, start, length) {
    	  // Check from (start-1) to (start+length).
    	  for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {
    	    if (i + 1 < diffs.length) {
    	      var left_d = diffs[i];
    	      var right_d = diffs[i+1];
    	      if (left_d[0] === right_d[1]) {
    	        diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);
    	      }
    	    }
    	  }
    	  return diffs;
    	}


    	/***/ }),
    	/* 52 */
    	/***/ (function(module, exports) {

    	exports = module.exports = typeof Object.keys === 'function'
    	  ? Object.keys : shim;

    	exports.shim = shim;
    	function shim (obj) {
    	  var keys = [];
    	  for (var key in obj) keys.push(key);
    	  return keys;
    	}


    	/***/ }),
    	/* 53 */
    	/***/ (function(module, exports) {

    	var supportsArgumentsClass = (function(){
    	  return Object.prototype.toString.call(arguments)
    	})() == '[object Arguments]';

    	exports = module.exports = supportsArgumentsClass ? supported : unsupported;

    	exports.supported = supported;
    	function supported(object) {
    	  return Object.prototype.toString.call(object) == '[object Arguments]';
    	}
    	exports.unsupported = unsupported;
    	function unsupported(object){
    	  return object &&
    	    typeof object == 'object' &&
    	    typeof object.length == 'number' &&
    	    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    	    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    	    false;
    	}

    	/***/ }),
    	/* 54 */
    	/***/ (function(module, exports) {

    	var has = Object.prototype.hasOwnProperty
    	  , prefix = '~';

    	/**
    	 * Constructor to create a storage for our `EE` objects.
    	 * An `Events` instance is a plain object whose properties are event names.
    	 *
    	 * @constructor
    	 * @api private
    	 */
    	function Events() {}

    	//
    	// We try to not inherit from `Object.prototype`. In some engines creating an
    	// instance in this way is faster than calling `Object.create(null)` directly.
    	// If `Object.create(null)` is not supported we prefix the event names with a
    	// character to make sure that the built-in object properties are not
    	// overridden or used as an attack vector.
    	//
    	if (Object.create) {
    	  Events.prototype = Object.create(null);

    	  //
    	  // This hack is needed because the `__proto__` property is still inherited in
    	  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
    	  //
    	  if (!new Events().__proto__) prefix = false;
    	}

    	/**
    	 * Representation of a single event listener.
    	 *
    	 * @param {Function} fn The listener function.
    	 * @param {Mixed} context The context to invoke the listener with.
    	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
    	 * @constructor
    	 * @api private
    	 */
    	function EE(fn, context, once) {
    	  this.fn = fn;
    	  this.context = context;
    	  this.once = once || false;
    	}

    	/**
    	 * Minimal `EventEmitter` interface that is molded against the Node.js
    	 * `EventEmitter` interface.
    	 *
    	 * @constructor
    	 * @api public
    	 */
    	function EventEmitter() {
    	  this._events = new Events();
    	  this._eventsCount = 0;
    	}

    	/**
    	 * Return an array listing the events for which the emitter has registered
    	 * listeners.
    	 *
    	 * @returns {Array}
    	 * @api public
    	 */
    	EventEmitter.prototype.eventNames = function eventNames() {
    	  var names = []
    	    , events
    	    , name;

    	  if (this._eventsCount === 0) return names;

    	  for (name in (events = this._events)) {
    	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    	  }

    	  if (Object.getOwnPropertySymbols) {
    	    return names.concat(Object.getOwnPropertySymbols(events));
    	  }

    	  return names;
    	};

    	/**
    	 * Return the listeners registered for a given event.
    	 *
    	 * @param {String|Symbol} event The event name.
    	 * @param {Boolean} exists Only check if there are listeners.
    	 * @returns {Array|Boolean}
    	 * @api public
    	 */
    	EventEmitter.prototype.listeners = function listeners(event, exists) {
    	  var evt = prefix ? prefix + event : event
    	    , available = this._events[evt];

    	  if (exists) return !!available;
    	  if (!available) return [];
    	  if (available.fn) return [available.fn];

    	  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
    	    ee[i] = available[i].fn;
    	  }

    	  return ee;
    	};

    	/**
    	 * Calls each of the listeners registered for a given event.
    	 *
    	 * @param {String|Symbol} event The event name.
    	 * @returns {Boolean} `true` if the event had listeners, else `false`.
    	 * @api public
    	 */
    	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    	  var evt = prefix ? prefix + event : event;

    	  if (!this._events[evt]) return false;

    	  var listeners = this._events[evt]
    	    , len = arguments.length
    	    , args
    	    , i;

    	  if (listeners.fn) {
    	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    	    switch (len) {
    	      case 1: return listeners.fn.call(listeners.context), true;
    	      case 2: return listeners.fn.call(listeners.context, a1), true;
    	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
    	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
    	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
    	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    	    }

    	    for (i = 1, args = new Array(len -1); i < len; i++) {
    	      args[i - 1] = arguments[i];
    	    }

    	    listeners.fn.apply(listeners.context, args);
    	  } else {
    	    var length = listeners.length
    	      , j;

    	    for (i = 0; i < length; i++) {
    	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

    	      switch (len) {
    	        case 1: listeners[i].fn.call(listeners[i].context); break;
    	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
    	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
    	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
    	        default:
    	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
    	            args[j - 1] = arguments[j];
    	          }

    	          listeners[i].fn.apply(listeners[i].context, args);
    	      }
    	    }
    	  }

    	  return true;
    	};

    	/**
    	 * Add a listener for a given event.
    	 *
    	 * @param {String|Symbol} event The event name.
    	 * @param {Function} fn The listener function.
    	 * @param {Mixed} [context=this] The context to invoke the listener with.
    	 * @returns {EventEmitter} `this`.
    	 * @api public
    	 */
    	EventEmitter.prototype.on = function on(event, fn, context) {
    	  var listener = new EE(fn, context || this)
    	    , evt = prefix ? prefix + event : event;

    	  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
    	  else if (!this._events[evt].fn) this._events[evt].push(listener);
    	  else this._events[evt] = [this._events[evt], listener];

    	  return this;
    	};

    	/**
    	 * Add a one-time listener for a given event.
    	 *
    	 * @param {String|Symbol} event The event name.
    	 * @param {Function} fn The listener function.
    	 * @param {Mixed} [context=this] The context to invoke the listener with.
    	 * @returns {EventEmitter} `this`.
    	 * @api public
    	 */
    	EventEmitter.prototype.once = function once(event, fn, context) {
    	  var listener = new EE(fn, context || this, true)
    	    , evt = prefix ? prefix + event : event;

    	  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
    	  else if (!this._events[evt].fn) this._events[evt].push(listener);
    	  else this._events[evt] = [this._events[evt], listener];

    	  return this;
    	};

    	/**
    	 * Remove the listeners of a given event.
    	 *
    	 * @param {String|Symbol} event The event name.
    	 * @param {Function} fn Only remove the listeners that match this function.
    	 * @param {Mixed} context Only remove the listeners that have this context.
    	 * @param {Boolean} once Only remove one-time listeners.
    	 * @returns {EventEmitter} `this`.
    	 * @api public
    	 */
    	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    	  var evt = prefix ? prefix + event : event;

    	  if (!this._events[evt]) return this;
    	  if (!fn) {
    	    if (--this._eventsCount === 0) this._events = new Events();
    	    else delete this._events[evt];
    	    return this;
    	  }

    	  var listeners = this._events[evt];

    	  if (listeners.fn) {
    	    if (
    	         listeners.fn === fn
    	      && (!once || listeners.once)
    	      && (!context || listeners.context === context)
    	    ) {
    	      if (--this._eventsCount === 0) this._events = new Events();
    	      else delete this._events[evt];
    	    }
    	  } else {
    	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
    	      if (
    	           listeners[i].fn !== fn
    	        || (once && !listeners[i].once)
    	        || (context && listeners[i].context !== context)
    	      ) {
    	        events.push(listeners[i]);
    	      }
    	    }

    	    //
    	    // Reset the array, or remove it completely if we have no more listeners.
    	    //
    	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    	    else if (--this._eventsCount === 0) this._events = new Events();
    	    else delete this._events[evt];
    	  }

    	  return this;
    	};

    	/**
    	 * Remove all listeners, or those of the specified event.
    	 *
    	 * @param {String|Symbol} [event] The event name.
    	 * @returns {EventEmitter} `this`.
    	 * @api public
    	 */
    	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    	  var evt;

    	  if (event) {
    	    evt = prefix ? prefix + event : event;
    	    if (this._events[evt]) {
    	      if (--this._eventsCount === 0) this._events = new Events();
    	      else delete this._events[evt];
    	    }
    	  } else {
    	    this._events = new Events();
    	    this._eventsCount = 0;
    	  }

    	  return this;
    	};

    	//
    	// Alias methods names because people roll like that.
    	//
    	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    	EventEmitter.prototype.addListener = EventEmitter.prototype.on;

    	//
    	// This function doesn't apply anymore.
    	//
    	EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
    	  return this;
    	};

    	//
    	// Expose the prefix.
    	//
    	EventEmitter.prefixed = prefix;

    	//
    	// Allow `EventEmitter` to be imported as module namespace.
    	//
    	EventEmitter.EventEmitter = EventEmitter;

    	//
    	// Expose the module.
    	//
    	if ('undefined' !== typeof module) {
    	  module.exports = EventEmitter;
    	}


    	/***/ }),
    	/* 55 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.matchText = exports.matchSpacing = exports.matchNewline = exports.matchBlot = exports.matchAttributor = exports.default = undefined;

    	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _extend2 = __webpack_require__(3);

    	var _extend3 = _interopRequireDefault(_extend2);

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _logger = __webpack_require__(10);

    	var _logger2 = _interopRequireDefault(_logger);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	var _align = __webpack_require__(36);

    	var _background = __webpack_require__(37);

    	var _code = __webpack_require__(13);

    	var _code2 = _interopRequireDefault(_code);

    	var _color = __webpack_require__(26);

    	var _direction = __webpack_require__(38);

    	var _font = __webpack_require__(39);

    	var _size = __webpack_require__(40);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var debug = (0, _logger2.default)('quill:clipboard');

    	var DOM_KEY = '__ql-matcher';

    	var CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], [Node.TEXT_NODE, matchNewline], ['br', matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchSpacing], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ['li', matchIndent], ['b', matchAlias.bind(matchAlias, 'bold')], ['i', matchAlias.bind(matchAlias, 'italic')], ['style', matchIgnore]];

    	var ATTRIBUTE_ATTRIBUTORS = [_align.AlignAttribute, _direction.DirectionAttribute].reduce(function (memo, attr) {
    	  memo[attr.keyName] = attr;
    	  return memo;
    	}, {});

    	var STYLE_ATTRIBUTORS = [_align.AlignStyle, _background.BackgroundStyle, _color.ColorStyle, _direction.DirectionStyle, _font.FontStyle, _size.SizeStyle].reduce(function (memo, attr) {
    	  memo[attr.keyName] = attr;
    	  return memo;
    	}, {});

    	var Clipboard = function (_Module) {
    	  _inherits(Clipboard, _Module);

    	  function Clipboard(quill, options) {
    	    _classCallCheck(this, Clipboard);

    	    var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this, quill, options));

    	    _this.quill.root.addEventListener('paste', _this.onPaste.bind(_this));
    	    _this.container = _this.quill.addContainer('ql-clipboard');
    	    _this.container.setAttribute('contenteditable', true);
    	    _this.container.setAttribute('tabindex', -1);
    	    _this.matchers = [];
    	    CLIPBOARD_CONFIG.concat(_this.options.matchers).forEach(function (_ref) {
    	      var _ref2 = _slicedToArray(_ref, 2),
    	          selector = _ref2[0],
    	          matcher = _ref2[1];

    	      if (!options.matchVisual && matcher === matchSpacing) return;
    	      _this.addMatcher(selector, matcher);
    	    });
    	    return _this;
    	  }

    	  _createClass(Clipboard, [{
    	    key: 'addMatcher',
    	    value: function addMatcher(selector, matcher) {
    	      this.matchers.push([selector, matcher]);
    	    }
    	  }, {
    	    key: 'convert',
    	    value: function convert(html) {
    	      if (typeof html === 'string') {
    	        this.container.innerHTML = html.replace(/\>\r?\n +\</g, '><'); // Remove spaces between tags
    	        return this.convert();
    	      }
    	      var formats = this.quill.getFormat(this.quill.selection.savedRange.index);
    	      if (formats[_code2.default.blotName]) {
    	        var text = this.container.innerText;
    	        this.container.innerHTML = '';
    	        return new _quillDelta2.default().insert(text, _defineProperty({}, _code2.default.blotName, formats[_code2.default.blotName]));
    	      }

    	      var _prepareMatching = this.prepareMatching(),
    	          _prepareMatching2 = _slicedToArray(_prepareMatching, 2),
    	          elementMatchers = _prepareMatching2[0],
    	          textMatchers = _prepareMatching2[1];

    	      var delta = traverse(this.container, elementMatchers, textMatchers);
    	      // Remove trailing newline
    	      if (deltaEndsWith(delta, '\n') && delta.ops[delta.ops.length - 1].attributes == null) {
    	        delta = delta.compose(new _quillDelta2.default().retain(delta.length() - 1).delete(1));
    	      }
    	      debug.log('convert', this.container.innerHTML, delta);
    	      this.container.innerHTML = '';
    	      return delta;
    	    }
    	  }, {
    	    key: 'dangerouslyPasteHTML',
    	    value: function dangerouslyPasteHTML(index, html) {
    	      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _quill2.default.sources.API;

    	      if (typeof index === 'string') {
    	        this.quill.setContents(this.convert(index), html);
    	        this.quill.setSelection(0, _quill2.default.sources.SILENT);
    	      } else {
    	        var paste = this.convert(html);
    	        this.quill.updateContents(new _quillDelta2.default().retain(index).concat(paste), source);
    	        this.quill.setSelection(index + paste.length(), _quill2.default.sources.SILENT);
    	      }
    	    }
    	  }, {
    	    key: 'onPaste',
    	    value: function onPaste(e) {
    	      var _this2 = this;

    	      if (e.defaultPrevented || !this.quill.isEnabled()) return;
    	      var range = this.quill.getSelection();
    	      var delta = new _quillDelta2.default().retain(range.index);
    	      var scrollTop = this.quill.scrollingContainer.scrollTop;
    	      this.container.focus();
    	      this.quill.selection.update(_quill2.default.sources.SILENT);
    	      setTimeout(function () {
    	        delta = delta.concat(_this2.convert()).delete(range.length);
    	        _this2.quill.updateContents(delta, _quill2.default.sources.USER);
    	        // range.length contributes to delta.length()
    	        _this2.quill.setSelection(delta.length() - range.length, _quill2.default.sources.SILENT);
    	        _this2.quill.scrollingContainer.scrollTop = scrollTop;
    	        _this2.quill.focus();
    	      }, 1);
    	    }
    	  }, {
    	    key: 'prepareMatching',
    	    value: function prepareMatching() {
    	      var _this3 = this;

    	      var elementMatchers = [],
    	          textMatchers = [];
    	      this.matchers.forEach(function (pair) {
    	        var _pair = _slicedToArray(pair, 2),
    	            selector = _pair[0],
    	            matcher = _pair[1];

    	        switch (selector) {
    	          case Node.TEXT_NODE:
    	            textMatchers.push(matcher);
    	            break;
    	          case Node.ELEMENT_NODE:
    	            elementMatchers.push(matcher);
    	            break;
    	          default:
    	            [].forEach.call(_this3.container.querySelectorAll(selector), function (node) {
    	              // TODO use weakmap
    	              node[DOM_KEY] = node[DOM_KEY] || [];
    	              node[DOM_KEY].push(matcher);
    	            });
    	            break;
    	        }
    	      });
    	      return [elementMatchers, textMatchers];
    	    }
    	  }]);

    	  return Clipboard;
    	}(_module2.default);

    	Clipboard.DEFAULTS = {
    	  matchers: [],
    	  matchVisual: true
    	};

    	function applyFormat(delta, format, value) {
    	  if ((typeof format === 'undefined' ? 'undefined' : _typeof(format)) === 'object') {
    	    return Object.keys(format).reduce(function (delta, key) {
    	      return applyFormat(delta, key, format[key]);
    	    }, delta);
    	  } else {
    	    return delta.reduce(function (delta, op) {
    	      if (op.attributes && op.attributes[format]) {
    	        return delta.push(op);
    	      } else {
    	        return delta.insert(op.insert, (0, _extend3.default)({}, _defineProperty({}, format, value), op.attributes));
    	      }
    	    }, new _quillDelta2.default());
    	  }
    	}

    	function computeStyle(node) {
    	  if (node.nodeType !== Node.ELEMENT_NODE) return {};
    	  var DOM_KEY = '__ql-computed-style';
    	  return node[DOM_KEY] || (node[DOM_KEY] = window.getComputedStyle(node));
    	}

    	function deltaEndsWith(delta, text) {
    	  var endText = "";
    	  for (var i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i) {
    	    var op = delta.ops[i];
    	    if (typeof op.insert !== 'string') break;
    	    endText = op.insert + endText;
    	  }
    	  return endText.slice(-1 * text.length) === text;
    	}

    	function isLine(node) {
    	  if (node.childNodes.length === 0) return false; // Exclude embed blocks
    	  var style = computeStyle(node);
    	  return ['block', 'list-item'].indexOf(style.display) > -1;
    	}

    	function traverse(node, elementMatchers, textMatchers) {
    	  // Post-order
    	  if (node.nodeType === node.TEXT_NODE) {
    	    return textMatchers.reduce(function (delta, matcher) {
    	      return matcher(node, delta);
    	    }, new _quillDelta2.default());
    	  } else if (node.nodeType === node.ELEMENT_NODE) {
    	    return [].reduce.call(node.childNodes || [], function (delta, childNode) {
    	      var childrenDelta = traverse(childNode, elementMatchers, textMatchers);
    	      if (childNode.nodeType === node.ELEMENT_NODE) {
    	        childrenDelta = elementMatchers.reduce(function (childrenDelta, matcher) {
    	          return matcher(childNode, childrenDelta);
    	        }, childrenDelta);
    	        childrenDelta = (childNode[DOM_KEY] || []).reduce(function (childrenDelta, matcher) {
    	          return matcher(childNode, childrenDelta);
    	        }, childrenDelta);
    	      }
    	      return delta.concat(childrenDelta);
    	    }, new _quillDelta2.default());
    	  } else {
    	    return new _quillDelta2.default();
    	  }
    	}

    	function matchAlias(format, node, delta) {
    	  return applyFormat(delta, format, true);
    	}

    	function matchAttributor(node, delta) {
    	  var attributes = _parchment2.default.Attributor.Attribute.keys(node);
    	  var classes = _parchment2.default.Attributor.Class.keys(node);
    	  var styles = _parchment2.default.Attributor.Style.keys(node);
    	  var formats = {};
    	  attributes.concat(classes).concat(styles).forEach(function (name) {
    	    var attr = _parchment2.default.query(name, _parchment2.default.Scope.ATTRIBUTE);
    	    if (attr != null) {
    	      formats[attr.attrName] = attr.value(node);
    	      if (formats[attr.attrName]) return;
    	    }
    	    attr = ATTRIBUTE_ATTRIBUTORS[name];
    	    if (attr != null && (attr.attrName === name || attr.keyName === name)) {
    	      formats[attr.attrName] = attr.value(node) || undefined;
    	    }
    	    attr = STYLE_ATTRIBUTORS[name];
    	    if (attr != null && (attr.attrName === name || attr.keyName === name)) {
    	      attr = STYLE_ATTRIBUTORS[name];
    	      formats[attr.attrName] = attr.value(node) || undefined;
    	    }
    	  });
    	  if (Object.keys(formats).length > 0) {
    	    delta = applyFormat(delta, formats);
    	  }
    	  return delta;
    	}

    	function matchBlot(node, delta) {
    	  var match = _parchment2.default.query(node);
    	  if (match == null) return delta;
    	  if (match.prototype instanceof _parchment2.default.Embed) {
    	    var embed = {};
    	    var value = match.value(node);
    	    if (value != null) {
    	      embed[match.blotName] = value;
    	      delta = new _quillDelta2.default().insert(embed, match.formats(node));
    	    }
    	  } else if (typeof match.formats === 'function') {
    	    delta = applyFormat(delta, match.blotName, match.formats(node));
    	  }
    	  return delta;
    	}

    	function matchBreak(node, delta) {
    	  if (!deltaEndsWith(delta, '\n')) {
    	    delta.insert('\n');
    	  }
    	  return delta;
    	}

    	function matchIgnore() {
    	  return new _quillDelta2.default();
    	}

    	function matchIndent(node, delta) {
    	  var match = _parchment2.default.query(node);
    	  if (match == null || match.blotName !== 'list-item' || !deltaEndsWith(delta, '\n')) {
    	    return delta;
    	  }
    	  var indent = -1,
    	      parent = node.parentNode;
    	  while (!parent.classList.contains('ql-clipboard')) {
    	    if ((_parchment2.default.query(parent) || {}).blotName === 'list') {
    	      indent += 1;
    	    }
    	    parent = parent.parentNode;
    	  }
    	  if (indent <= 0) return delta;
    	  return delta.compose(new _quillDelta2.default().retain(delta.length() - 1).retain(1, { indent: indent }));
    	}

    	function matchNewline(node, delta) {
    	  if (!deltaEndsWith(delta, '\n')) {
    	    if (isLine(node) || delta.length() > 0 && node.nextSibling && isLine(node.nextSibling)) {
    	      delta.insert('\n');
    	    }
    	  }
    	  return delta;
    	}

    	function matchSpacing(node, delta) {
    	  if (isLine(node) && node.nextElementSibling != null && !deltaEndsWith(delta, '\n\n')) {
    	    var nodeHeight = node.offsetHeight + parseFloat(computeStyle(node).marginTop) + parseFloat(computeStyle(node).marginBottom);
    	    if (node.nextElementSibling.offsetTop > node.offsetTop + nodeHeight * 1.5) {
    	      delta.insert('\n');
    	    }
    	  }
    	  return delta;
    	}

    	function matchStyles(node, delta) {
    	  var formats = {};
    	  var style = node.style || {};
    	  if (style.fontStyle && computeStyle(node).fontStyle === 'italic') {
    	    formats.italic = true;
    	  }
    	  if (style.fontWeight && (computeStyle(node).fontWeight.startsWith('bold') || parseInt(computeStyle(node).fontWeight) >= 700)) {
    	    formats.bold = true;
    	  }
    	  if (Object.keys(formats).length > 0) {
    	    delta = applyFormat(delta, formats);
    	  }
    	  if (parseFloat(style.textIndent || 0) > 0) {
    	    // Could be 0.5in
    	    delta = new _quillDelta2.default().insert('\t').concat(delta);
    	  }
    	  return delta;
    	}

    	function matchText(node, delta) {
    	  var text = node.data;
    	  // Word represents empty line with <o:p>&nbsp;</o:p>
    	  if (node.parentNode.tagName === 'O:P') {
    	    return delta.insert(text.trim());
    	  }
    	  if (text.trim().length === 0 && node.parentNode.classList.contains('ql-clipboard')) {
    	    return delta;
    	  }
    	  if (!computeStyle(node.parentNode).whiteSpace.startsWith('pre')) {
    	    // eslint-disable-next-line func-style
    	    var replacer = function replacer(collapse, match) {
    	      match = match.replace(/[^\u00a0]/g, ''); // \u00a0 is nbsp;
    	      return match.length < 1 && collapse ? ' ' : match;
    	    };
    	    text = text.replace(/\r\n/g, ' ').replace(/\n/g, ' ');
    	    text = text.replace(/\s\s+/g, replacer.bind(replacer, true)); // collapse whitespace
    	    if (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {
    	      text = text.replace(/^\s+/, replacer.bind(replacer, false));
    	    }
    	    if (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {
    	      text = text.replace(/\s+$/, replacer.bind(replacer, false));
    	    }
    	  }
    	  return delta.insert(text);
    	}

    	exports.default = Clipboard;
    	exports.matchAttributor = matchAttributor;
    	exports.matchBlot = matchBlot;
    	exports.matchNewline = matchNewline;
    	exports.matchSpacing = matchSpacing;
    	exports.matchText = matchText;

    	/***/ }),
    	/* 56 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Bold = function (_Inline) {
    	  _inherits(Bold, _Inline);

    	  function Bold() {
    	    _classCallCheck(this, Bold);

    	    return _possibleConstructorReturn(this, (Bold.__proto__ || Object.getPrototypeOf(Bold)).apply(this, arguments));
    	  }

    	  _createClass(Bold, [{
    	    key: 'optimize',
    	    value: function optimize(context) {
    	      _get(Bold.prototype.__proto__ || Object.getPrototypeOf(Bold.prototype), 'optimize', this).call(this, context);
    	      if (this.domNode.tagName !== this.statics.tagName[0]) {
    	        this.replaceWith(this.statics.blotName);
    	      }
    	    }
    	  }], [{
    	    key: 'create',
    	    value: function create() {
    	      return _get(Bold.__proto__ || Object.getPrototypeOf(Bold), 'create', this).call(this);
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats() {
    	      return true;
    	    }
    	  }]);

    	  return Bold;
    	}(_inline2.default);

    	Bold.blotName = 'bold';
    	Bold.tagName = ['STRONG', 'B'];

    	exports.default = Bold;

    	/***/ }),
    	/* 57 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.addControls = exports.default = undefined;

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _logger = __webpack_require__(10);

    	var _logger2 = _interopRequireDefault(_logger);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var debug = (0, _logger2.default)('quill:toolbar');

    	var Toolbar = function (_Module) {
    	  _inherits(Toolbar, _Module);

    	  function Toolbar(quill, options) {
    	    _classCallCheck(this, Toolbar);

    	    var _this = _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call(this, quill, options));

    	    if (Array.isArray(_this.options.container)) {
    	      var container = document.createElement('div');
    	      addControls(container, _this.options.container);
    	      quill.container.parentNode.insertBefore(container, quill.container);
    	      _this.container = container;
    	    } else if (typeof _this.options.container === 'string') {
    	      _this.container = document.querySelector(_this.options.container);
    	    } else {
    	      _this.container = _this.options.container;
    	    }
    	    if (!(_this.container instanceof HTMLElement)) {
    	      var _ret;

    	      return _ret = debug.error('Container required for toolbar', _this.options), _possibleConstructorReturn(_this, _ret);
    	    }
    	    _this.container.classList.add('ql-toolbar');
    	    _this.controls = [];
    	    _this.handlers = {};
    	    Object.keys(_this.options.handlers).forEach(function (format) {
    	      _this.addHandler(format, _this.options.handlers[format]);
    	    });
    	    [].forEach.call(_this.container.querySelectorAll('button, select'), function (input) {
    	      _this.attach(input);
    	    });
    	    _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (type, range) {
    	      if (type === _quill2.default.events.SELECTION_CHANGE) {
    	        _this.update(range);
    	      }
    	    });
    	    _this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
    	      var _this$quill$selection = _this.quill.selection.getRange(),
    	          _this$quill$selection2 = _slicedToArray(_this$quill$selection, 1),
    	          range = _this$quill$selection2[0]; // quill.getSelection triggers update


    	      _this.update(range);
    	    });
    	    return _this;
    	  }

    	  _createClass(Toolbar, [{
    	    key: 'addHandler',
    	    value: function addHandler(format, handler) {
    	      this.handlers[format] = handler;
    	    }
    	  }, {
    	    key: 'attach',
    	    value: function attach(input) {
    	      var _this2 = this;

    	      var format = [].find.call(input.classList, function (className) {
    	        return className.indexOf('ql-') === 0;
    	      });
    	      if (!format) return;
    	      format = format.slice('ql-'.length);
    	      if (input.tagName === 'BUTTON') {
    	        input.setAttribute('type', 'button');
    	      }
    	      if (this.handlers[format] == null) {
    	        if (this.quill.scroll.whitelist != null && this.quill.scroll.whitelist[format] == null) {
    	          debug.warn('ignoring attaching to disabled format', format, input);
    	          return;
    	        }
    	        if (_parchment2.default.query(format) == null) {
    	          debug.warn('ignoring attaching to nonexistent format', format, input);
    	          return;
    	        }
    	      }
    	      var eventName = input.tagName === 'SELECT' ? 'change' : 'click';
    	      input.addEventListener(eventName, function (e) {
    	        var value = void 0;
    	        if (input.tagName === 'SELECT') {
    	          if (input.selectedIndex < 0) return;
    	          var selected = input.options[input.selectedIndex];
    	          if (selected.hasAttribute('selected')) {
    	            value = false;
    	          } else {
    	            value = selected.value || false;
    	          }
    	        } else {
    	          if (input.classList.contains('ql-active')) {
    	            value = false;
    	          } else {
    	            value = input.value || !input.hasAttribute('value');
    	          }
    	          e.preventDefault();
    	        }
    	        _this2.quill.focus();

    	        var _quill$selection$getR = _this2.quill.selection.getRange(),
    	            _quill$selection$getR2 = _slicedToArray(_quill$selection$getR, 1),
    	            range = _quill$selection$getR2[0];

    	        if (_this2.handlers[format] != null) {
    	          _this2.handlers[format].call(_this2, value);
    	        } else if (_parchment2.default.query(format).prototype instanceof _parchment2.default.Embed) {
    	          value = prompt('Enter ' + format);
    	          if (!value) return;
    	          _this2.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert(_defineProperty({}, format, value)), _quill2.default.sources.USER);
    	        } else {
    	          _this2.quill.format(format, value, _quill2.default.sources.USER);
    	        }
    	        _this2.update(range);
    	      });
    	      // TODO use weakmap
    	      this.controls.push([format, input]);
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update(range) {
    	      var formats = range == null ? {} : this.quill.getFormat(range);
    	      this.controls.forEach(function (pair) {
    	        var _pair = _slicedToArray(pair, 2),
    	            format = _pair[0],
    	            input = _pair[1];

    	        if (input.tagName === 'SELECT') {
    	          var option = void 0;
    	          if (range == null) {
    	            option = null;
    	          } else if (formats[format] == null) {
    	            option = input.querySelector('option[selected]');
    	          } else if (!Array.isArray(formats[format])) {
    	            var value = formats[format];
    	            if (typeof value === 'string') {
    	              value = value.replace(/\"/g, '\\"');
    	            }
    	            option = input.querySelector('option[value="' + value + '"]');
    	          }
    	          if (option == null) {
    	            input.value = ''; // TODO make configurable?
    	            input.selectedIndex = -1;
    	          } else {
    	            option.selected = true;
    	          }
    	        } else {
    	          if (range == null) {
    	            input.classList.remove('ql-active');
    	          } else if (input.hasAttribute('value')) {
    	            // both being null should match (default values)
    	            // '1' should match with 1 (headers)
    	            var isActive = formats[format] === input.getAttribute('value') || formats[format] != null && formats[format].toString() === input.getAttribute('value') || formats[format] == null && !input.getAttribute('value');
    	            input.classList.toggle('ql-active', isActive);
    	          } else {
    	            input.classList.toggle('ql-active', formats[format] != null);
    	          }
    	        }
    	      });
    	    }
    	  }]);

    	  return Toolbar;
    	}(_module2.default);

    	Toolbar.DEFAULTS = {};

    	function addButton(container, format, value) {
    	  var input = document.createElement('button');
    	  input.setAttribute('type', 'button');
    	  input.classList.add('ql-' + format);
    	  if (value != null) {
    	    input.value = value;
    	  }
    	  container.appendChild(input);
    	}

    	function addControls(container, groups) {
    	  if (!Array.isArray(groups[0])) {
    	    groups = [groups];
    	  }
    	  groups.forEach(function (controls) {
    	    var group = document.createElement('span');
    	    group.classList.add('ql-formats');
    	    controls.forEach(function (control) {
    	      if (typeof control === 'string') {
    	        addButton(group, control);
    	      } else {
    	        var format = Object.keys(control)[0];
    	        var value = control[format];
    	        if (Array.isArray(value)) {
    	          addSelect(group, format, value);
    	        } else {
    	          addButton(group, format, value);
    	        }
    	      }
    	    });
    	    container.appendChild(group);
    	  });
    	}

    	function addSelect(container, format, values) {
    	  var input = document.createElement('select');
    	  input.classList.add('ql-' + format);
    	  values.forEach(function (value) {
    	    var option = document.createElement('option');
    	    if (value !== false) {
    	      option.setAttribute('value', value);
    	    } else {
    	      option.setAttribute('selected', 'selected');
    	    }
    	    input.appendChild(option);
    	  });
    	  container.appendChild(input);
    	}

    	Toolbar.DEFAULTS = {
    	  container: null,
    	  handlers: {
    	    clean: function clean() {
    	      var _this3 = this;

    	      var range = this.quill.getSelection();
    	      if (range == null) return;
    	      if (range.length == 0) {
    	        var formats = this.quill.getFormat();
    	        Object.keys(formats).forEach(function (name) {
    	          // Clean functionality in existing apps only clean inline formats
    	          if (_parchment2.default.query(name, _parchment2.default.Scope.INLINE) != null) {
    	            _this3.quill.format(name, false);
    	          }
    	        });
    	      } else {
    	        this.quill.removeFormat(range, _quill2.default.sources.USER);
    	      }
    	    },
    	    direction: function direction(value) {
    	      var align = this.quill.getFormat()['align'];
    	      if (value === 'rtl' && align == null) {
    	        this.quill.format('align', 'right', _quill2.default.sources.USER);
    	      } else if (!value && align === 'right') {
    	        this.quill.format('align', false, _quill2.default.sources.USER);
    	      }
    	      this.quill.format('direction', value, _quill2.default.sources.USER);
    	    },
    	    indent: function indent(value) {
    	      var range = this.quill.getSelection();
    	      var formats = this.quill.getFormat(range);
    	      var indent = parseInt(formats.indent || 0);
    	      if (value === '+1' || value === '-1') {
    	        var modifier = value === '+1' ? 1 : -1;
    	        if (formats.direction === 'rtl') modifier *= -1;
    	        this.quill.format('indent', indent + modifier, _quill2.default.sources.USER);
    	      }
    	    },
    	    link: function link(value) {
    	      if (value === true) {
    	        value = prompt('Enter link URL:');
    	      }
    	      this.quill.format('link', value, _quill2.default.sources.USER);
    	    },
    	    list: function list(value) {
    	      var range = this.quill.getSelection();
    	      var formats = this.quill.getFormat(range);
    	      if (value === 'check') {
    	        if (formats['list'] === 'checked' || formats['list'] === 'unchecked') {
    	          this.quill.format('list', false, _quill2.default.sources.USER);
    	        } else {
    	          this.quill.format('list', 'unchecked', _quill2.default.sources.USER);
    	        }
    	      } else {
    	        this.quill.format('list', value, _quill2.default.sources.USER);
    	      }
    	    }
    	  }
    	};

    	exports.default = Toolbar;
    	exports.addControls = addControls;

    	/***/ }),
    	/* 58 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <polyline class=\"ql-even ql-stroke\" points=\"5 7 3 9 5 11\"></polyline> <polyline class=\"ql-even ql-stroke\" points=\"13 7 15 9 13 11\"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>";

    	/***/ }),
    	/* 59 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _picker = __webpack_require__(28);

    	var _picker2 = _interopRequireDefault(_picker);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var ColorPicker = function (_Picker) {
    	  _inherits(ColorPicker, _Picker);

    	  function ColorPicker(select, label) {
    	    _classCallCheck(this, ColorPicker);

    	    var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this, select));

    	    _this.label.innerHTML = label;
    	    _this.container.classList.add('ql-color-picker');
    	    [].slice.call(_this.container.querySelectorAll('.ql-picker-item'), 0, 7).forEach(function (item) {
    	      item.classList.add('ql-primary');
    	    });
    	    return _this;
    	  }

    	  _createClass(ColorPicker, [{
    	    key: 'buildItem',
    	    value: function buildItem(option) {
    	      var item = _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'buildItem', this).call(this, option);
    	      item.style.backgroundColor = option.getAttribute('value') || '';
    	      return item;
    	    }
    	  }, {
    	    key: 'selectItem',
    	    value: function selectItem(item, trigger) {
    	      _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'selectItem', this).call(this, item, trigger);
    	      var colorLabel = this.label.querySelector('.ql-color-label');
    	      var value = item ? item.getAttribute('data-value') || '' : '';
    	      if (colorLabel) {
    	        if (colorLabel.tagName === 'line') {
    	          colorLabel.style.stroke = value;
    	        } else {
    	          colorLabel.style.fill = value;
    	        }
    	      }
    	    }
    	  }]);

    	  return ColorPicker;
    	}(_picker2.default);

    	exports.default = ColorPicker;

    	/***/ }),
    	/* 60 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _picker = __webpack_require__(28);

    	var _picker2 = _interopRequireDefault(_picker);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var IconPicker = function (_Picker) {
    	  _inherits(IconPicker, _Picker);

    	  function IconPicker(select, icons) {
    	    _classCallCheck(this, IconPicker);

    	    var _this = _possibleConstructorReturn(this, (IconPicker.__proto__ || Object.getPrototypeOf(IconPicker)).call(this, select));

    	    _this.container.classList.add('ql-icon-picker');
    	    [].forEach.call(_this.container.querySelectorAll('.ql-picker-item'), function (item) {
    	      item.innerHTML = icons[item.getAttribute('data-value') || ''];
    	    });
    	    _this.defaultItem = _this.container.querySelector('.ql-selected');
    	    _this.selectItem(_this.defaultItem);
    	    return _this;
    	  }

    	  _createClass(IconPicker, [{
    	    key: 'selectItem',
    	    value: function selectItem(item, trigger) {
    	      _get(IconPicker.prototype.__proto__ || Object.getPrototypeOf(IconPicker.prototype), 'selectItem', this).call(this, item, trigger);
    	      item = item || this.defaultItem;
    	      this.label.innerHTML = item.innerHTML;
    	    }
    	  }]);

    	  return IconPicker;
    	}(_picker2.default);

    	exports.default = IconPicker;

    	/***/ }),
    	/* 61 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var Tooltip = function () {
    	  function Tooltip(quill, boundsContainer) {
    	    var _this = this;

    	    _classCallCheck(this, Tooltip);

    	    this.quill = quill;
    	    this.boundsContainer = boundsContainer || document.body;
    	    this.root = quill.addContainer('ql-tooltip');
    	    this.root.innerHTML = this.constructor.TEMPLATE;
    	    if (this.quill.root === this.quill.scrollingContainer) {
    	      this.quill.root.addEventListener('scroll', function () {
    	        _this.root.style.marginTop = -1 * _this.quill.root.scrollTop + 'px';
    	      });
    	    }
    	    this.hide();
    	  }

    	  _createClass(Tooltip, [{
    	    key: 'hide',
    	    value: function hide() {
    	      this.root.classList.add('ql-hidden');
    	    }
    	  }, {
    	    key: 'position',
    	    value: function position(reference) {
    	      var left = reference.left + reference.width / 2 - this.root.offsetWidth / 2;
    	      // root.scrollTop should be 0 if scrollContainer !== root
    	      var top = reference.bottom + this.quill.root.scrollTop;
    	      this.root.style.left = left + 'px';
    	      this.root.style.top = top + 'px';
    	      this.root.classList.remove('ql-flip');
    	      var containerBounds = this.boundsContainer.getBoundingClientRect();
    	      var rootBounds = this.root.getBoundingClientRect();
    	      var shift = 0;
    	      if (rootBounds.right > containerBounds.right) {
    	        shift = containerBounds.right - rootBounds.right;
    	        this.root.style.left = left + shift + 'px';
    	      }
    	      if (rootBounds.left < containerBounds.left) {
    	        shift = containerBounds.left - rootBounds.left;
    	        this.root.style.left = left + shift + 'px';
    	      }
    	      if (rootBounds.bottom > containerBounds.bottom) {
    	        var height = rootBounds.bottom - rootBounds.top;
    	        var verticalShift = reference.bottom - reference.top + height;
    	        this.root.style.top = top - verticalShift + 'px';
    	        this.root.classList.add('ql-flip');
    	      }
    	      return shift;
    	    }
    	  }, {
    	    key: 'show',
    	    value: function show() {
    	      this.root.classList.remove('ql-editing');
    	      this.root.classList.remove('ql-hidden');
    	    }
    	  }]);

    	  return Tooltip;
    	}();

    	exports.default = Tooltip;

    	/***/ }),
    	/* 62 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	var _emitter = __webpack_require__(8);

    	var _emitter2 = _interopRequireDefault(_emitter);

    	var _base = __webpack_require__(43);

    	var _base2 = _interopRequireDefault(_base);

    	var _link = __webpack_require__(27);

    	var _link2 = _interopRequireDefault(_link);

    	var _selection = __webpack_require__(15);

    	var _icons = __webpack_require__(41);

    	var _icons2 = _interopRequireDefault(_icons);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var TOOLBAR_CONFIG = [[{ header: ['1', '2', '3', false] }], ['bold', 'italic', 'underline', 'link'], [{ list: 'ordered' }, { list: 'bullet' }], ['clean']];

    	var SnowTheme = function (_BaseTheme) {
    	  _inherits(SnowTheme, _BaseTheme);

    	  function SnowTheme(quill, options) {
    	    _classCallCheck(this, SnowTheme);

    	    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
    	      options.modules.toolbar.container = TOOLBAR_CONFIG;
    	    }

    	    var _this = _possibleConstructorReturn(this, (SnowTheme.__proto__ || Object.getPrototypeOf(SnowTheme)).call(this, quill, options));

    	    _this.quill.container.classList.add('ql-snow');
    	    return _this;
    	  }

    	  _createClass(SnowTheme, [{
    	    key: 'extendToolbar',
    	    value: function extendToolbar(toolbar) {
    	      toolbar.container.classList.add('ql-snow');
    	      this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
    	      this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
    	      this.tooltip = new SnowTooltip(this.quill, this.options.bounds);
    	      if (toolbar.container.querySelector('.ql-link')) {
    	        this.quill.keyboard.addBinding({ key: 'K', shortKey: true }, function (range, context) {
    	          toolbar.handlers['link'].call(toolbar, !context.format.link);
    	        });
    	      }
    	    }
    	  }]);

    	  return SnowTheme;
    	}(_base2.default);

    	SnowTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
    	  modules: {
    	    toolbar: {
    	      handlers: {
    	        link: function link(value) {
    	          if (value) {
    	            var range = this.quill.getSelection();
    	            if (range == null || range.length == 0) return;
    	            var preview = this.quill.getText(range);
    	            if (/^\S+@\S+\.\S+$/.test(preview) && preview.indexOf('mailto:') !== 0) {
    	              preview = 'mailto:' + preview;
    	            }
    	            var tooltip = this.quill.theme.tooltip;
    	            tooltip.edit('link', preview);
    	          } else {
    	            this.quill.format('link', false);
    	          }
    	        }
    	      }
    	    }
    	  }
    	});

    	var SnowTooltip = function (_BaseTooltip) {
    	  _inherits(SnowTooltip, _BaseTooltip);

    	  function SnowTooltip(quill, bounds) {
    	    _classCallCheck(this, SnowTooltip);

    	    var _this2 = _possibleConstructorReturn(this, (SnowTooltip.__proto__ || Object.getPrototypeOf(SnowTooltip)).call(this, quill, bounds));

    	    _this2.preview = _this2.root.querySelector('a.ql-preview');
    	    return _this2;
    	  }

    	  _createClass(SnowTooltip, [{
    	    key: 'listen',
    	    value: function listen() {
    	      var _this3 = this;

    	      _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'listen', this).call(this);
    	      this.root.querySelector('a.ql-action').addEventListener('click', function (event) {
    	        if (_this3.root.classList.contains('ql-editing')) {
    	          _this3.save();
    	        } else {
    	          _this3.edit('link', _this3.preview.textContent);
    	        }
    	        event.preventDefault();
    	      });
    	      this.root.querySelector('a.ql-remove').addEventListener('click', function (event) {
    	        if (_this3.linkRange != null) {
    	          var range = _this3.linkRange;
    	          _this3.restoreFocus();
    	          _this3.quill.formatText(range, 'link', false, _emitter2.default.sources.USER);
    	          delete _this3.linkRange;
    	        }
    	        event.preventDefault();
    	        _this3.hide();
    	      });
    	      this.quill.on(_emitter2.default.events.SELECTION_CHANGE, function (range, oldRange, source) {
    	        if (range == null) return;
    	        if (range.length === 0 && source === _emitter2.default.sources.USER) {
    	          var _quill$scroll$descend = _this3.quill.scroll.descendant(_link2.default, range.index),
    	              _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),
    	              link = _quill$scroll$descend2[0],
    	              offset = _quill$scroll$descend2[1];

    	          if (link != null) {
    	            _this3.linkRange = new _selection.Range(range.index - offset, link.length());
    	            var preview = _link2.default.formats(link.domNode);
    	            _this3.preview.textContent = preview;
    	            _this3.preview.setAttribute('href', preview);
    	            _this3.show();
    	            _this3.position(_this3.quill.getBounds(_this3.linkRange));
    	            return;
    	          }
    	        } else {
    	          delete _this3.linkRange;
    	        }
    	        _this3.hide();
    	      });
    	    }
    	  }, {
    	    key: 'show',
    	    value: function show() {
    	      _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'show', this).call(this);
    	      this.root.removeAttribute('data-mode');
    	    }
    	  }]);

    	  return SnowTooltip;
    	}(_base.BaseTooltip);

    	SnowTooltip.TEMPLATE = ['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-action"></a>', '<a class="ql-remove"></a>'].join('');

    	exports.default = SnowTheme;

    	/***/ }),
    	/* 63 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _core = __webpack_require__(29);

    	var _core2 = _interopRequireDefault(_core);

    	var _align = __webpack_require__(36);

    	var _direction = __webpack_require__(38);

    	var _indent = __webpack_require__(64);

    	var _blockquote = __webpack_require__(65);

    	var _blockquote2 = _interopRequireDefault(_blockquote);

    	var _header = __webpack_require__(66);

    	var _header2 = _interopRequireDefault(_header);

    	var _list = __webpack_require__(67);

    	var _list2 = _interopRequireDefault(_list);

    	var _background = __webpack_require__(37);

    	var _color = __webpack_require__(26);

    	var _font = __webpack_require__(39);

    	var _size = __webpack_require__(40);

    	var _bold = __webpack_require__(56);

    	var _bold2 = _interopRequireDefault(_bold);

    	var _italic = __webpack_require__(68);

    	var _italic2 = _interopRequireDefault(_italic);

    	var _link = __webpack_require__(27);

    	var _link2 = _interopRequireDefault(_link);

    	var _script = __webpack_require__(69);

    	var _script2 = _interopRequireDefault(_script);

    	var _strike = __webpack_require__(70);

    	var _strike2 = _interopRequireDefault(_strike);

    	var _underline = __webpack_require__(71);

    	var _underline2 = _interopRequireDefault(_underline);

    	var _image = __webpack_require__(72);

    	var _image2 = _interopRequireDefault(_image);

    	var _video = __webpack_require__(73);

    	var _video2 = _interopRequireDefault(_video);

    	var _code = __webpack_require__(13);

    	var _code2 = _interopRequireDefault(_code);

    	var _formula = __webpack_require__(74);

    	var _formula2 = _interopRequireDefault(_formula);

    	var _syntax = __webpack_require__(75);

    	var _syntax2 = _interopRequireDefault(_syntax);

    	var _toolbar = __webpack_require__(57);

    	var _toolbar2 = _interopRequireDefault(_toolbar);

    	var _icons = __webpack_require__(41);

    	var _icons2 = _interopRequireDefault(_icons);

    	var _picker = __webpack_require__(28);

    	var _picker2 = _interopRequireDefault(_picker);

    	var _colorPicker = __webpack_require__(59);

    	var _colorPicker2 = _interopRequireDefault(_colorPicker);

    	var _iconPicker = __webpack_require__(60);

    	var _iconPicker2 = _interopRequireDefault(_iconPicker);

    	var _tooltip = __webpack_require__(61);

    	var _tooltip2 = _interopRequireDefault(_tooltip);

    	var _bubble = __webpack_require__(108);

    	var _bubble2 = _interopRequireDefault(_bubble);

    	var _snow = __webpack_require__(62);

    	var _snow2 = _interopRequireDefault(_snow);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	_core2.default.register({
    	  'attributors/attribute/direction': _direction.DirectionAttribute,

    	  'attributors/class/align': _align.AlignClass,
    	  'attributors/class/background': _background.BackgroundClass,
    	  'attributors/class/color': _color.ColorClass,
    	  'attributors/class/direction': _direction.DirectionClass,
    	  'attributors/class/font': _font.FontClass,
    	  'attributors/class/size': _size.SizeClass,

    	  'attributors/style/align': _align.AlignStyle,
    	  'attributors/style/background': _background.BackgroundStyle,
    	  'attributors/style/color': _color.ColorStyle,
    	  'attributors/style/direction': _direction.DirectionStyle,
    	  'attributors/style/font': _font.FontStyle,
    	  'attributors/style/size': _size.SizeStyle
    	}, true);

    	_core2.default.register({
    	  'formats/align': _align.AlignClass,
    	  'formats/direction': _direction.DirectionClass,
    	  'formats/indent': _indent.IndentClass,

    	  'formats/background': _background.BackgroundStyle,
    	  'formats/color': _color.ColorStyle,
    	  'formats/font': _font.FontClass,
    	  'formats/size': _size.SizeClass,

    	  'formats/blockquote': _blockquote2.default,
    	  'formats/code-block': _code2.default,
    	  'formats/header': _header2.default,
    	  'formats/list': _list2.default,

    	  'formats/bold': _bold2.default,
    	  'formats/code': _code.Code,
    	  'formats/italic': _italic2.default,
    	  'formats/link': _link2.default,
    	  'formats/script': _script2.default,
    	  'formats/strike': _strike2.default,
    	  'formats/underline': _underline2.default,

    	  'formats/image': _image2.default,
    	  'formats/video': _video2.default,

    	  'formats/list/item': _list.ListItem,

    	  'modules/formula': _formula2.default,
    	  'modules/syntax': _syntax2.default,
    	  'modules/toolbar': _toolbar2.default,

    	  'themes/bubble': _bubble2.default,
    	  'themes/snow': _snow2.default,

    	  'ui/icons': _icons2.default,
    	  'ui/picker': _picker2.default,
    	  'ui/icon-picker': _iconPicker2.default,
    	  'ui/color-picker': _colorPicker2.default,
    	  'ui/tooltip': _tooltip2.default
    	}, true);

    	exports.default = _core2.default;

    	/***/ }),
    	/* 64 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.IndentClass = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var IdentAttributor = function (_Parchment$Attributor) {
    	  _inherits(IdentAttributor, _Parchment$Attributor);

    	  function IdentAttributor() {
    	    _classCallCheck(this, IdentAttributor);

    	    return _possibleConstructorReturn(this, (IdentAttributor.__proto__ || Object.getPrototypeOf(IdentAttributor)).apply(this, arguments));
    	  }

    	  _createClass(IdentAttributor, [{
    	    key: 'add',
    	    value: function add(node, value) {
    	      if (value === '+1' || value === '-1') {
    	        var indent = this.value(node) || 0;
    	        value = value === '+1' ? indent + 1 : indent - 1;
    	      }
    	      if (value === 0) {
    	        this.remove(node);
    	        return true;
    	      } else {
    	        return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'add', this).call(this, node, value);
    	      }
    	    }
    	  }, {
    	    key: 'canAdd',
    	    value: function canAdd(node, value) {
    	      return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, value) || _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, parseInt(value));
    	    }
    	  }, {
    	    key: 'value',
    	    value: function value(node) {
    	      return parseInt(_get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'value', this).call(this, node)) || undefined; // Don't return NaN
    	    }
    	  }]);

    	  return IdentAttributor;
    	}(_parchment2.default.Attributor.Class);

    	var IndentClass = new IdentAttributor('indent', 'ql-indent', {
    	  scope: _parchment2.default.Scope.BLOCK,
    	  whitelist: [1, 2, 3, 4, 5, 6, 7, 8]
    	});

    	exports.IndentClass = IndentClass;

    	/***/ }),
    	/* 65 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Blockquote = function (_Block) {
    	  _inherits(Blockquote, _Block);

    	  function Blockquote() {
    	    _classCallCheck(this, Blockquote);

    	    return _possibleConstructorReturn(this, (Blockquote.__proto__ || Object.getPrototypeOf(Blockquote)).apply(this, arguments));
    	  }

    	  return Blockquote;
    	}(_block2.default);

    	Blockquote.blotName = 'blockquote';
    	Blockquote.tagName = 'blockquote';

    	exports.default = Blockquote;

    	/***/ }),
    	/* 66 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Header = function (_Block) {
    	  _inherits(Header, _Block);

    	  function Header() {
    	    _classCallCheck(this, Header);

    	    return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));
    	  }

    	  _createClass(Header, null, [{
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      return this.tagName.indexOf(domNode.tagName) + 1;
    	    }
    	  }]);

    	  return Header;
    	}(_block2.default);

    	Header.blotName = 'header';
    	Header.tagName = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];

    	exports.default = Header;

    	/***/ }),
    	/* 67 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.ListItem = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	var _container = __webpack_require__(25);

    	var _container2 = _interopRequireDefault(_container);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var ListItem = function (_Block) {
    	  _inherits(ListItem, _Block);

    	  function ListItem() {
    	    _classCallCheck(this, ListItem);

    	    return _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));
    	  }

    	  _createClass(ListItem, [{
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (name === List.blotName && !value) {
    	        this.replaceWith(_parchment2.default.create(this.statics.scope));
    	      } else {
    	        _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'format', this).call(this, name, value);
    	      }
    	    }
    	  }, {
    	    key: 'remove',
    	    value: function remove() {
    	      if (this.prev == null && this.next == null) {
    	        this.parent.remove();
    	      } else {
    	        _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'remove', this).call(this);
    	      }
    	    }
    	  }, {
    	    key: 'replaceWith',
    	    value: function replaceWith(name, value) {
    	      this.parent.isolate(this.offset(this.parent), this.length());
    	      if (name === this.parent.statics.blotName) {
    	        this.parent.replaceWith(name, value);
    	        return this;
    	      } else {
    	        this.parent.unwrap();
    	        return _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'replaceWith', this).call(this, name, value);
    	      }
    	    }
    	  }], [{
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      return domNode.tagName === this.tagName ? undefined : _get(ListItem.__proto__ || Object.getPrototypeOf(ListItem), 'formats', this).call(this, domNode);
    	    }
    	  }]);

    	  return ListItem;
    	}(_block2.default);

    	ListItem.blotName = 'list-item';
    	ListItem.tagName = 'LI';

    	var List = function (_Container) {
    	  _inherits(List, _Container);

    	  _createClass(List, null, [{
    	    key: 'create',
    	    value: function create(value) {
    	      var tagName = value === 'ordered' ? 'OL' : 'UL';
    	      var node = _get(List.__proto__ || Object.getPrototypeOf(List), 'create', this).call(this, tagName);
    	      if (value === 'checked' || value === 'unchecked') {
    	        node.setAttribute('data-checked', value === 'checked');
    	      }
    	      return node;
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      if (domNode.tagName === 'OL') return 'ordered';
    	      if (domNode.tagName === 'UL') {
    	        if (domNode.hasAttribute('data-checked')) {
    	          return domNode.getAttribute('data-checked') === 'true' ? 'checked' : 'unchecked';
    	        } else {
    	          return 'bullet';
    	        }
    	      }
    	      return undefined;
    	    }
    	  }]);

    	  function List(domNode) {
    	    _classCallCheck(this, List);

    	    var _this2 = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, domNode));

    	    var listEventHandler = function listEventHandler(e) {
    	      if (e.target.parentNode !== domNode) return;
    	      var format = _this2.statics.formats(domNode);
    	      var blot = _parchment2.default.find(e.target);
    	      if (format === 'checked') {
    	        blot.format('list', 'unchecked');
    	      } else if (format === 'unchecked') {
    	        blot.format('list', 'checked');
    	      }
    	    };

    	    domNode.addEventListener('touchstart', listEventHandler);
    	    domNode.addEventListener('mousedown', listEventHandler);
    	    return _this2;
    	  }

    	  _createClass(List, [{
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (this.children.length > 0) {
    	        this.children.tail.format(name, value);
    	      }
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats() {
    	      // We don't inherit from FormatBlot
    	      return _defineProperty({}, this.statics.blotName, this.statics.formats(this.domNode));
    	    }
    	  }, {
    	    key: 'insertBefore',
    	    value: function insertBefore(blot, ref) {
    	      if (blot instanceof ListItem) {
    	        _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'insertBefore', this).call(this, blot, ref);
    	      } else {
    	        var index = ref == null ? this.length() : ref.offset(this);
    	        var after = this.split(index);
    	        after.parent.insertBefore(blot, after);
    	      }
    	    }
    	  }, {
    	    key: 'optimize',
    	    value: function optimize(context) {
    	      _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'optimize', this).call(this, context);
    	      var next = this.next;
    	      if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName && next.domNode.getAttribute('data-checked') === this.domNode.getAttribute('data-checked')) {
    	        next.moveChildren(this);
    	        next.remove();
    	      }
    	    }
    	  }, {
    	    key: 'replace',
    	    value: function replace(target) {
    	      if (target.statics.blotName !== this.statics.blotName) {
    	        var item = _parchment2.default.create(this.statics.defaultChild);
    	        target.moveChildren(item);
    	        this.appendChild(item);
    	      }
    	      _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'replace', this).call(this, target);
    	    }
    	  }]);

    	  return List;
    	}(_container2.default);

    	List.blotName = 'list';
    	List.scope = _parchment2.default.Scope.BLOCK_BLOT;
    	List.tagName = ['OL', 'UL'];
    	List.defaultChild = 'list-item';
    	List.allowedChildren = [ListItem];

    	exports.ListItem = ListItem;
    	exports.default = List;

    	/***/ }),
    	/* 68 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _bold = __webpack_require__(56);

    	var _bold2 = _interopRequireDefault(_bold);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Italic = function (_Bold) {
    	  _inherits(Italic, _Bold);

    	  function Italic() {
    	    _classCallCheck(this, Italic);

    	    return _possibleConstructorReturn(this, (Italic.__proto__ || Object.getPrototypeOf(Italic)).apply(this, arguments));
    	  }

    	  return Italic;
    	}(_bold2.default);

    	Italic.blotName = 'italic';
    	Italic.tagName = ['EM', 'I'];

    	exports.default = Italic;

    	/***/ }),
    	/* 69 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Script = function (_Inline) {
    	  _inherits(Script, _Inline);

    	  function Script() {
    	    _classCallCheck(this, Script);

    	    return _possibleConstructorReturn(this, (Script.__proto__ || Object.getPrototypeOf(Script)).apply(this, arguments));
    	  }

    	  _createClass(Script, null, [{
    	    key: 'create',
    	    value: function create(value) {
    	      if (value === 'super') {
    	        return document.createElement('sup');
    	      } else if (value === 'sub') {
    	        return document.createElement('sub');
    	      } else {
    	        return _get(Script.__proto__ || Object.getPrototypeOf(Script), 'create', this).call(this, value);
    	      }
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      if (domNode.tagName === 'SUB') return 'sub';
    	      if (domNode.tagName === 'SUP') return 'super';
    	      return undefined;
    	    }
    	  }]);

    	  return Script;
    	}(_inline2.default);

    	Script.blotName = 'script';
    	Script.tagName = ['SUB', 'SUP'];

    	exports.default = Script;

    	/***/ }),
    	/* 70 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Strike = function (_Inline) {
    	  _inherits(Strike, _Inline);

    	  function Strike() {
    	    _classCallCheck(this, Strike);

    	    return _possibleConstructorReturn(this, (Strike.__proto__ || Object.getPrototypeOf(Strike)).apply(this, arguments));
    	  }

    	  return Strike;
    	}(_inline2.default);

    	Strike.blotName = 'strike';
    	Strike.tagName = 'S';

    	exports.default = Strike;

    	/***/ }),
    	/* 71 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Underline = function (_Inline) {
    	  _inherits(Underline, _Inline);

    	  function Underline() {
    	    _classCallCheck(this, Underline);

    	    return _possibleConstructorReturn(this, (Underline.__proto__ || Object.getPrototypeOf(Underline)).apply(this, arguments));
    	  }

    	  return Underline;
    	}(_inline2.default);

    	Underline.blotName = 'underline';
    	Underline.tagName = 'U';

    	exports.default = Underline;

    	/***/ }),
    	/* 72 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _link = __webpack_require__(27);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var ATTRIBUTES = ['alt', 'height', 'width'];

    	var Image = function (_Parchment$Embed) {
    	  _inherits(Image, _Parchment$Embed);

    	  function Image() {
    	    _classCallCheck(this, Image);

    	    return _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).apply(this, arguments));
    	  }

    	  _createClass(Image, [{
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (ATTRIBUTES.indexOf(name) > -1) {
    	        if (value) {
    	          this.domNode.setAttribute(name, value);
    	        } else {
    	          this.domNode.removeAttribute(name);
    	        }
    	      } else {
    	        _get(Image.prototype.__proto__ || Object.getPrototypeOf(Image.prototype), 'format', this).call(this, name, value);
    	      }
    	    }
    	  }], [{
    	    key: 'create',
    	    value: function create(value) {
    	      var node = _get(Image.__proto__ || Object.getPrototypeOf(Image), 'create', this).call(this, value);
    	      if (typeof value === 'string') {
    	        node.setAttribute('src', this.sanitize(value));
    	      }
    	      return node;
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      return ATTRIBUTES.reduce(function (formats, attribute) {
    	        if (domNode.hasAttribute(attribute)) {
    	          formats[attribute] = domNode.getAttribute(attribute);
    	        }
    	        return formats;
    	      }, {});
    	    }
    	  }, {
    	    key: 'match',
    	    value: function match(url) {
    	      return (/\.(jpe?g|gif|png)$/.test(url) || /^data:image\/.+;base64/.test(url)
    	      );
    	    }
    	  }, {
    	    key: 'sanitize',
    	    value: function sanitize(url) {
    	      return (0, _link.sanitize)(url, ['http', 'https', 'data']) ? url : '//:0';
    	    }
    	  }, {
    	    key: 'value',
    	    value: function value(domNode) {
    	      return domNode.getAttribute('src');
    	    }
    	  }]);

    	  return Image;
    	}(_parchment2.default.Embed);

    	Image.blotName = 'image';
    	Image.tagName = 'IMG';

    	exports.default = Image;

    	/***/ }),
    	/* 73 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _block = __webpack_require__(4);

    	var _link = __webpack_require__(27);

    	var _link2 = _interopRequireDefault(_link);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var ATTRIBUTES = ['height', 'width'];

    	var Video = function (_BlockEmbed) {
    	  _inherits(Video, _BlockEmbed);

    	  function Video() {
    	    _classCallCheck(this, Video);

    	    return _possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).apply(this, arguments));
    	  }

    	  _createClass(Video, [{
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (ATTRIBUTES.indexOf(name) > -1) {
    	        if (value) {
    	          this.domNode.setAttribute(name, value);
    	        } else {
    	          this.domNode.removeAttribute(name);
    	        }
    	      } else {
    	        _get(Video.prototype.__proto__ || Object.getPrototypeOf(Video.prototype), 'format', this).call(this, name, value);
    	      }
    	    }
    	  }], [{
    	    key: 'create',
    	    value: function create(value) {
    	      var node = _get(Video.__proto__ || Object.getPrototypeOf(Video), 'create', this).call(this, value);
    	      node.setAttribute('frameborder', '0');
    	      node.setAttribute('allowfullscreen', true);
    	      node.setAttribute('src', this.sanitize(value));
    	      return node;
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      return ATTRIBUTES.reduce(function (formats, attribute) {
    	        if (domNode.hasAttribute(attribute)) {
    	          formats[attribute] = domNode.getAttribute(attribute);
    	        }
    	        return formats;
    	      }, {});
    	    }
    	  }, {
    	    key: 'sanitize',
    	    value: function sanitize(url) {
    	      return _link2.default.sanitize(url);
    	    }
    	  }, {
    	    key: 'value',
    	    value: function value(domNode) {
    	      return domNode.getAttribute('src');
    	    }
    	  }]);

    	  return Video;
    	}(_block.BlockEmbed);

    	Video.blotName = 'video';
    	Video.className = 'ql-video';
    	Video.tagName = 'IFRAME';

    	exports.default = Video;

    	/***/ }),
    	/* 74 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.FormulaBlot = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _embed = __webpack_require__(35);

    	var _embed2 = _interopRequireDefault(_embed);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var FormulaBlot = function (_Embed) {
    	  _inherits(FormulaBlot, _Embed);

    	  function FormulaBlot() {
    	    _classCallCheck(this, FormulaBlot);

    	    return _possibleConstructorReturn(this, (FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot)).apply(this, arguments));
    	  }

    	  _createClass(FormulaBlot, null, [{
    	    key: 'create',
    	    value: function create(value) {
    	      var node = _get(FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot), 'create', this).call(this, value);
    	      if (typeof value === 'string') {
    	        window.katex.render(value, node, {
    	          throwOnError: false,
    	          errorColor: '#f00'
    	        });
    	        node.setAttribute('data-value', value);
    	      }
    	      return node;
    	    }
    	  }, {
    	    key: 'value',
    	    value: function value(domNode) {
    	      return domNode.getAttribute('data-value');
    	    }
    	  }]);

    	  return FormulaBlot;
    	}(_embed2.default);

    	FormulaBlot.blotName = 'formula';
    	FormulaBlot.className = 'ql-formula';
    	FormulaBlot.tagName = 'SPAN';

    	var Formula = function (_Module) {
    	  _inherits(Formula, _Module);

    	  _createClass(Formula, null, [{
    	    key: 'register',
    	    value: function register() {
    	      _quill2.default.register(FormulaBlot, true);
    	    }
    	  }]);

    	  function Formula() {
    	    _classCallCheck(this, Formula);

    	    var _this2 = _possibleConstructorReturn(this, (Formula.__proto__ || Object.getPrototypeOf(Formula)).call(this));

    	    if (window.katex == null) {
    	      throw new Error('Formula module requires KaTeX.');
    	    }
    	    return _this2;
    	  }

    	  return Formula;
    	}(_module2.default);

    	exports.FormulaBlot = FormulaBlot;
    	exports.default = Formula;

    	/***/ }),
    	/* 75 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.CodeToken = exports.CodeBlock = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	var _code = __webpack_require__(13);

    	var _code2 = _interopRequireDefault(_code);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var SyntaxCodeBlock = function (_CodeBlock) {
    	  _inherits(SyntaxCodeBlock, _CodeBlock);

    	  function SyntaxCodeBlock() {
    	    _classCallCheck(this, SyntaxCodeBlock);

    	    return _possibleConstructorReturn(this, (SyntaxCodeBlock.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock)).apply(this, arguments));
    	  }

    	  _createClass(SyntaxCodeBlock, [{
    	    key: 'replaceWith',
    	    value: function replaceWith(block) {
    	      this.domNode.textContent = this.domNode.textContent;
    	      this.attach();
    	      _get(SyntaxCodeBlock.prototype.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock.prototype), 'replaceWith', this).call(this, block);
    	    }
    	  }, {
    	    key: 'highlight',
    	    value: function highlight(_highlight) {
    	      var text = this.domNode.textContent;
    	      if (this.cachedText !== text) {
    	        if (text.trim().length > 0 || this.cachedText == null) {
    	          this.domNode.innerHTML = _highlight(text);
    	          this.domNode.normalize();
    	          this.attach();
    	        }
    	        this.cachedText = text;
    	      }
    	    }
    	  }]);

    	  return SyntaxCodeBlock;
    	}(_code2.default);

    	SyntaxCodeBlock.className = 'ql-syntax';

    	var CodeToken = new _parchment2.default.Attributor.Class('token', 'hljs', {
    	  scope: _parchment2.default.Scope.INLINE
    	});

    	var Syntax = function (_Module) {
    	  _inherits(Syntax, _Module);

    	  _createClass(Syntax, null, [{
    	    key: 'register',
    	    value: function register() {
    	      _quill2.default.register(CodeToken, true);
    	      _quill2.default.register(SyntaxCodeBlock, true);
    	    }
    	  }]);

    	  function Syntax(quill, options) {
    	    _classCallCheck(this, Syntax);

    	    var _this2 = _possibleConstructorReturn(this, (Syntax.__proto__ || Object.getPrototypeOf(Syntax)).call(this, quill, options));

    	    if (typeof _this2.options.highlight !== 'function') {
    	      throw new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');
    	    }
    	    var timer = null;
    	    _this2.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
    	      clearTimeout(timer);
    	      timer = setTimeout(function () {
    	        _this2.highlight();
    	        timer = null;
    	      }, _this2.options.interval);
    	    });
    	    _this2.highlight();
    	    return _this2;
    	  }

    	  _createClass(Syntax, [{
    	    key: 'highlight',
    	    value: function highlight() {
    	      var _this3 = this;

    	      if (this.quill.selection.composing) return;
    	      this.quill.update(_quill2.default.sources.USER);
    	      var range = this.quill.getSelection();
    	      this.quill.scroll.descendants(SyntaxCodeBlock).forEach(function (code) {
    	        code.highlight(_this3.options.highlight);
    	      });
    	      this.quill.update(_quill2.default.sources.SILENT);
    	      if (range != null) {
    	        this.quill.setSelection(range, _quill2.default.sources.SILENT);
    	      }
    	    }
    	  }]);

    	  return Syntax;
    	}(_module2.default);

    	Syntax.DEFAULTS = {
    	  highlight: function () {
    	    if (window.hljs == null) return null;
    	    return function (text) {
    	      var result = window.hljs.highlightAuto(text);
    	      return result.value;
    	    };
    	  }(),
    	  interval: 1000
    	};

    	exports.CodeBlock = SyntaxCodeBlock;
    	exports.CodeToken = CodeToken;
    	exports.default = Syntax;

    	/***/ }),
    	/* 76 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>";

    	/***/ }),
    	/* 77 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>";

    	/***/ }),
    	/* 78 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>";

    	/***/ }),
    	/* 79 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>";

    	/***/ }),
    	/* 80 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <g class=\"ql-fill ql-color-label\"> <polygon points=\"6 6.868 6 6 5 6 5 7 5.942 7 6 6.868\"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points=\"6.817 5 6 5 6 6 6.38 6 6.817 5\"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points=\"4 11.439 4 11 3 11 3 12 3.755 12 4 11.439\"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points=\"4.63 10 4 10 4 11 4.192 11 4.63 10\"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points=\"13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174\"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points=\"12 6.868 12 6 11.62 6 12 6.868\"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points=\"12.933 9 13 9 13 8 12.495 8 12.933 9\"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points=\"5.5 13 9 5 12.5 13\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>";

    	/***/ }),
    	/* 81 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=4 y=5></rect> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=11 y=5></rect> <path class=\"ql-even ql-fill ql-stroke\" d=M7,8c0,4.031-3,5-3,5></path> <path class=\"ql-even ql-fill ql-stroke\" d=M14,8c0,4.031-3,5-3,5></path> </svg>";

    	/***/ }),
    	/* 82 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>";

    	/***/ }),
    	/* 83 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>";

    	/***/ }),
    	/* 84 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-color-label ql-stroke ql-transparent\" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points=\"5.5 11 9 3 12.5 11\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>";

    	/***/ }),
    	/* 85 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"3 11 5 9 3 7 3 11\"></polygon> <line class=\"ql-stroke ql-fill\" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>";

    	/***/ }),
    	/* 86 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"15 12 13 10 15 8 15 12\"></polygon> <line class=\"ql-stroke ql-fill\" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>";

    	/***/ }),
    	/* 87 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>";

    	/***/ }),
    	/* 88 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>";

    	/***/ }),
    	/* 89 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>";

    	/***/ }),
    	/* 90 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform=\"translate(24 18) rotate(-180)\"/> </svg>";

    	/***/ }),
    	/* 91 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>";

    	/***/ }),
    	/* 92 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>";

    	/***/ }),
    	/* 93 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>";

    	/***/ }),
    	/* 94 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>";

    	/***/ }),
    	/* 95 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class=\"ql-even ql-fill\" points=\"5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12\"></polyline> </svg>";

    	/***/ }),
    	/* 96 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=\"ql-fill ql-stroke\" points=\"3 7 3 11 5 9 3 7\"></polyline> </svg>";

    	/***/ }),
    	/* 97 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"5 7 5 11 3 9 5 7\"></polyline> </svg>";

    	/***/ }),
    	/* 98 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class=\"ql-even ql-stroke\" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class=\"ql-even ql-stroke\" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>";

    	/***/ }),
    	/* 99 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class=\"ql-stroke ql-thin\" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class=\"ql-stroke ql-thin\" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class=\"ql-stroke ql-thin\" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>";

    	/***/ }),
    	/* 100 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>";

    	/***/ }),
    	/* 101 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points=\"3 4 4 5 6 3\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points=\"3 14 4 15 6 13\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"3 9 4 10 6 8\"></polyline> </svg>";

    	/***/ }),
    	/* 102 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>";

    	/***/ }),
    	/* 103 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>";

    	/***/ }),
    	/* 104 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-stroke ql-thin\" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>";

    	/***/ }),
    	/* 105 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>";

    	/***/ }),
    	/* 106 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>";

    	/***/ }),
    	/* 107 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=ql-stroke points=\"7 11 9 13 11 11 7 11\"></polygon> <polygon class=ql-stroke points=\"7 7 9 5 11 7 7 7\"></polygon> </svg>";

    	/***/ }),
    	/* 108 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.BubbleTooltip = undefined;

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	var _emitter = __webpack_require__(8);

    	var _emitter2 = _interopRequireDefault(_emitter);

    	var _base = __webpack_require__(43);

    	var _base2 = _interopRequireDefault(_base);

    	var _selection = __webpack_require__(15);

    	var _icons = __webpack_require__(41);

    	var _icons2 = _interopRequireDefault(_icons);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var TOOLBAR_CONFIG = [['bold', 'italic', 'link'], [{ header: 1 }, { header: 2 }, 'blockquote']];

    	var BubbleTheme = function (_BaseTheme) {
    	  _inherits(BubbleTheme, _BaseTheme);

    	  function BubbleTheme(quill, options) {
    	    _classCallCheck(this, BubbleTheme);

    	    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
    	      options.modules.toolbar.container = TOOLBAR_CONFIG;
    	    }

    	    var _this = _possibleConstructorReturn(this, (BubbleTheme.__proto__ || Object.getPrototypeOf(BubbleTheme)).call(this, quill, options));

    	    _this.quill.container.classList.add('ql-bubble');
    	    return _this;
    	  }

    	  _createClass(BubbleTheme, [{
    	    key: 'extendToolbar',
    	    value: function extendToolbar(toolbar) {
    	      this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);
    	      this.tooltip.root.appendChild(toolbar.container);
    	      this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
    	      this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
    	    }
    	  }]);

    	  return BubbleTheme;
    	}(_base2.default);

    	BubbleTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
    	  modules: {
    	    toolbar: {
    	      handlers: {
    	        link: function link(value) {
    	          if (!value) {
    	            this.quill.format('link', false);
    	          } else {
    	            this.quill.theme.tooltip.edit();
    	          }
    	        }
    	      }
    	    }
    	  }
    	});

    	var BubbleTooltip = function (_BaseTooltip) {
    	  _inherits(BubbleTooltip, _BaseTooltip);

    	  function BubbleTooltip(quill, bounds) {
    	    _classCallCheck(this, BubbleTooltip);

    	    var _this2 = _possibleConstructorReturn(this, (BubbleTooltip.__proto__ || Object.getPrototypeOf(BubbleTooltip)).call(this, quill, bounds));

    	    _this2.quill.on(_emitter2.default.events.EDITOR_CHANGE, function (type, range, oldRange, source) {
    	      if (type !== _emitter2.default.events.SELECTION_CHANGE) return;
    	      if (range != null && range.length > 0 && source === _emitter2.default.sources.USER) {
    	        _this2.show();
    	        // Lock our width so we will expand beyond our offsetParent boundaries
    	        _this2.root.style.left = '0px';
    	        _this2.root.style.width = '';
    	        _this2.root.style.width = _this2.root.offsetWidth + 'px';
    	        var lines = _this2.quill.getLines(range.index, range.length);
    	        if (lines.length === 1) {
    	          _this2.position(_this2.quill.getBounds(range));
    	        } else {
    	          var lastLine = lines[lines.length - 1];
    	          var index = _this2.quill.getIndex(lastLine);
    	          var length = Math.min(lastLine.length() - 1, range.index + range.length - index);
    	          var _bounds = _this2.quill.getBounds(new _selection.Range(index, length));
    	          _this2.position(_bounds);
    	        }
    	      } else if (document.activeElement !== _this2.textbox && _this2.quill.hasFocus()) {
    	        _this2.hide();
    	      }
    	    });
    	    return _this2;
    	  }

    	  _createClass(BubbleTooltip, [{
    	    key: 'listen',
    	    value: function listen() {
    	      var _this3 = this;

    	      _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'listen', this).call(this);
    	      this.root.querySelector('.ql-close').addEventListener('click', function () {
    	        _this3.root.classList.remove('ql-editing');
    	      });
    	      this.quill.on(_emitter2.default.events.SCROLL_OPTIMIZE, function () {
    	        // Let selection be restored by toolbar handlers before repositioning
    	        setTimeout(function () {
    	          if (_this3.root.classList.contains('ql-hidden')) return;
    	          var range = _this3.quill.getSelection();
    	          if (range != null) {
    	            _this3.position(_this3.quill.getBounds(range));
    	          }
    	        }, 1);
    	      });
    	    }
    	  }, {
    	    key: 'cancel',
    	    value: function cancel() {
    	      this.show();
    	    }
    	  }, {
    	    key: 'position',
    	    value: function position(reference) {
    	      var shift = _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'position', this).call(this, reference);
    	      var arrow = this.root.querySelector('.ql-tooltip-arrow');
    	      arrow.style.marginLeft = '';
    	      if (shift === 0) return shift;
    	      arrow.style.marginLeft = -1 * shift - arrow.offsetWidth / 2 + 'px';
    	    }
    	  }]);

    	  return BubbleTooltip;
    	}(_base.BaseTooltip);

    	BubbleTooltip.TEMPLATE = ['<span class="ql-tooltip-arrow"></span>', '<div class="ql-tooltip-editor">', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-close"></a>', '</div>'].join('');

    	exports.BubbleTooltip = BubbleTooltip;
    	exports.default = BubbleTheme;

    	/***/ }),
    	/* 109 */
    	/***/ (function(module, exports, __webpack_require__) {

    	module.exports = __webpack_require__(63);


    	/***/ })
    	/******/ ])["default"];
    	});
    	});

    	var Quill = unwrapExports(quill);

    	function quill$1(node, options) {
    	  const quill = new Quill(node, {
    	    modules: {
    	      toolbar: [
    	        [{ header: [1, 2, 3, false] }],
    	        ["bold", "italic", "underline", "strike"],
    	        ["link", "code-block"]
    	      ]
    	    },
    	    placeholder: "Type something...",
    	    theme: "snow", // or 'bubble'
    	    ...options
    	  });
    	  const container = node.getElementsByClassName("ql-editor")[0];

    	  quill.on("text-change", function(delta, oldDelta, source) {
    	    node.dispatchEvent(
    	      new CustomEvent("text-change", {
    	        detail: {
    	          html: container.innerHTML,
    	          text: quill.getText()
    	        }
    	      })
    	    );
    	  });
    	}

    	exports.quill = quill$1;

    	Object.defineProperty(exports, '__esModule', { value: true });

    })));
    });

    /* src/containers/TextEditor.svelte generated by Svelte v3.44.1 */
    const file$c = "src/containers/TextEditor.svelte";

    // (174:0) {:else}
    function create_else_block$3(ctx) {
    	let main;
    	let section;
    	let current_block_type_index;
    	let if_block0;
    	let t;
    	let current;
    	const if_block_creators = [create_if_block_2$2, create_else_block_2$1];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (!/*editionMode*/ ctx[4]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let if_block1 = /*showEditor*/ ctx[1] && create_if_block_1$6(ctx);

    	const block = {
    		c: function create() {
    			main = element("main");
    			section = element("section");
    			if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			attr_dev(section, "class", "svelte-5lglqp");
    			add_location(section, file$c, 175, 4, 3421);
    			attr_dev(main, "class", "svelte-5lglqp");
    			add_location(main, file$c, 174, 2, 3410);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, section);
    			if_blocks[current_block_type_index].m(section, null);
    			append_dev(main, t);
    			if (if_block1) if_block1.m(main, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				} else {
    					if_block0.p(ctx, dirty);
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(section, null);
    			}

    			if (/*showEditor*/ ctx[1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$6(ctx);
    					if_block1.c();
    					if_block1.m(main, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			if_blocks[current_block_type_index].d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(174:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (167:0) {#if isEmpty}
    function create_if_block$a(ctx) {
    	let div;
    	let i;
    	let t0;
    	let p;

    	const block = {
    		c: function create() {
    			div = element("div");
    			i = element("i");
    			t0 = space();
    			p = element("p");
    			p.textContent = "Añade una parte para empezar";
    			attr_dev(i, "class", "mi mi-inbox");
    			set_style(i, "font-size", "50px");
    			set_style(i, "color", Theme.PALETTE.gray);
    			add_location(i, file$c, 169, 4, 3246);
    			attr_dev(p, "class", "empty-message svelte-5lglqp");
    			add_location(p, file$c, 171, 4, 3333);
    			set_style(div, "display", "flex");
    			set_style(div, "flex-direction", "column");
    			set_style(div, "justify-content", "center");
    			set_style(div, "align-items", "center");
    			set_style(div, "width", "100%");
    			add_location(div, file$c, 167, 2, 3136);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, i);
    			append_dev(div, t0);
    			append_dev(div, p);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(167:0) {#if isEmpty}",
    		ctx
    	});

    	return block;
    }

    // (197:6) {:else}
    function create_else_block_2$1(ctx) {
    	let form;
    	let input;
    	let t0;
    	let span0;
    	let t2;
    	let span1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			form = element("form");
    			input = element("input");
    			t0 = space();
    			span0 = element("span");
    			span0.textContent = "✅";
    			t2 = space();
    			span1 = element("span");
    			span1.textContent = "❌";
    			input.autofocus = true;
    			attr_dev(input, "class", "title-input svelte-5lglqp");
    			add_location(input, file$c, 198, 10, 4155);
    			set_style(span0, "margin-right", "14px");
    			attr_dev(span0, "class", "svelte-5lglqp");
    			add_location(span0, file$c, 202, 10, 4274);
    			attr_dev(span1, "class", "svelte-5lglqp");
    			add_location(span1, file$c, 203, 10, 4352);
    			add_location(form, file$c, 197, 8, 4096);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, form, anchor);
    			append_dev(form, input);
    			set_input_value(input, /*currentPage*/ ctx[5].title);
    			append_dev(form, t0);
    			append_dev(form, span0);
    			append_dev(form, t2);
    			append_dev(form, span1);
    			input.focus();

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[12]),
    					listen_dev(span0, "click", /*applyChanges*/ ctx[8], false, false, false),
    					listen_dev(span1, "click", /*discardChanges*/ ctx[9], false, false, false),
    					listen_dev(form, "submit", prevent_default(/*applyChanges*/ ctx[8]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*currentPage*/ 32 && input.value !== /*currentPage*/ ctx[5].title) {
    				set_input_value(input, /*currentPage*/ ctx[5].title);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(form);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$1.name,
    		type: "else",
    		source: "(197:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (177:6) {#if !editionMode}
    function create_if_block_2$2(ctx) {
    	let div1;
    	let div0;
    	let h1;
    	let t0_value = /*currentPage*/ ctx[5].title + "";
    	let t0;
    	let t1;
    	let span;
    	let t3;
    	let current_block_type_index;
    	let if_block;
    	let t4;
    	let b;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_3$2, create_else_block_1$2];
    	const if_blocks = [];

    	function select_block_type_2(ctx, dirty) {
    		if (/*contentSaved*/ ctx[3]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_2(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			h1 = element("h1");
    			t0 = text(t0_value);
    			t1 = space();
    			span = element("span");
    			span.textContent = "✏️";
    			t3 = space();
    			if_block.c();
    			t4 = space();
    			b = element("b");
    			b.textContent = "Eliminar";
    			attr_dev(h1, "class", "svelte-5lglqp");
    			add_location(h1, file$c, 179, 12, 3540);
    			attr_dev(span, "class", "icon svelte-5lglqp");
    			add_location(span, file$c, 180, 12, 3581);
    			attr_dev(div0, "class", "title-wrapper svelte-5lglqp");
    			add_location(div0, file$c, 178, 10, 3500);
    			attr_dev(div1, "class", "top-wrapper svelte-5lglqp");
    			add_location(div1, file$c, 177, 8, 3464);
    			attr_dev(b, "class", "delete-text svelte-5lglqp");
    			add_location(b, file$c, 195, 8, 4012);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, h1);
    			append_dev(h1, t0);
    			append_dev(div0, t1);
    			append_dev(div0, span);
    			append_dev(div1, t3);
    			if_blocks[current_block_type_index].m(div1, null);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, b, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(span, "click", /*toggleEditionMode*/ ctx[7], false, false, false),
    					listen_dev(b, "click", /*handleDelete*/ ctx[11], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*currentPage*/ 32) && t0_value !== (t0_value = /*currentPage*/ ctx[5].title + "")) set_data_dev(t0, t0_value);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_2(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div1, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if_blocks[current_block_type_index].d();
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(b);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(177:6) {#if !editionMode}",
    		ctx
    	});

    	return block;
    }

    // (187:10) {:else}
    function create_else_block_1$2(ctx) {
    	let doublebounce;
    	let current;

    	doublebounce = new DoubleBounce({
    			props: {
    				size: "30",
    				color: Theme.PALETTE.primary,
    				unit: "px",
    				duration: "1s"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(doublebounce.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(doublebounce, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(doublebounce.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(doublebounce.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(doublebounce, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$2.name,
    		type: "else",
    		source: "(187:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (183:10) {#if contentSaved}
    function create_if_block_3$2(ctx) {
    	let p;
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text("Guardado");
    			set_style(p, "color", Theme.PALETTE.primary);
    			attr_dev(p, "class", "saving-state svelte-5lglqp");
    			add_location(p, file$c, 183, 12, 3699);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(183:10) {#if contentSaved}",
    		ctx
    	});

    	return block;
    }

    // (209:4) {#if showEditor}
    function create_if_block_1$6(ctx) {
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "editor svelte-5lglqp");
    			attr_dev(div, "id", "editor");
    			add_location(div, file$c, 209, 6, 4466);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			div.innerHTML = /*htmlContent*/ ctx[0];

    			if (!mounted) {
    				dispose = [
    					action_destroyer(index_umd.quill.call(null, div, /*quillOptions*/ ctx[6])),
    					listen_dev(div, "text-change", /*handleTextChange*/ ctx[10], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*htmlContent*/ 1) div.innerHTML = /*htmlContent*/ ctx[0];		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(209:4) {#if showEditor}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let link0;
    	let link1;
    	let link2;
    	let t;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$a, create_else_block$3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*isEmpty*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			link0 = element("link");
    			link1 = element("link");
    			link2 = element("link");
    			t = space();
    			if_block.c();
    			if_block_anchor = empty();
    			attr_dev(link0, "href", "//cdn.quilljs.com/1.3.6/quill.snow.css");
    			attr_dev(link0, "rel", "stylesheet");
    			add_location(link0, file$c, 159, 2, 2859);
    			attr_dev(link1, "href", "//cdn.quilljs.com/1.3.6/quill.bubble.css");
    			attr_dev(link1, "rel", "stylesheet");
    			add_location(link1, file$c, 160, 2, 2933);
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "href", "https://unpkg.com/mono-icons@1.0.5/iconfont/icons.css");
    			add_location(link2, file$c, 161, 2, 3009);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, link2);
    			insert_dev(target, t, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(link2);
    			if (detaching) detach_dev(t);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TextEditor', slots, []);

    	const quillOptions = {
    		modules: {
    			toolbar: [
    				[{ header: [1, 2, 3, true] }],
    				[
    					{ align: "" },
    					{ align: "center" },
    					{ align: "right" },
    					{ align: "justify" }
    				],
    				["bold", "italic", "underline", "strike"]
    			]
    		},
    		placeholder: "Empieza a escribir tu historia...",
    		theme: "bubble"
    	};

    	let bookId = getBookIdInRoute("my-books");
    	let blockEditorReload = false;
    	let htmlContent = "";
    	let showEditor = false;
    	let isEmpty = false;
    	let timer;
    	let contentSaved = true;
    	let editionMode = false;
    	let currentPage = { id: "", title: "", content: "" };

    	isEmptyBook.subscribe(empty => {
    		$$invalidate(2, isEmpty = empty);
    	});

    	currentSelectedPage.subscribe(sP => {
    		$$invalidate(5, currentPage = sP);

    		if (!blockEditorReload) {
    			$$invalidate(0, htmlContent = sP.content);
    			$$invalidate(1, showEditor = false);

    			setTimeout(
    				() => {
    					$$invalidate(1, showEditor = true);
    				},
    				1
    			);
    		}
    	});

    	currentPageIndex.subscribe(() => {
    		$$invalidate(1, showEditor = false);

    		setTimeout(
    			() => {
    				$$invalidate(1, showEditor = true);
    				blockEditorReload = false;
    			},
    			1
    		);
    	});

    	const toggleEditionMode = () => {
    		$$invalidate(4, editionMode = !editionMode);
    	};

    	const applyChanges = () => {
    		updatePageName(bookId, currentPage.id, currentPage.title);
    		toggleEditionMode();
    	};

    	const discardChanges = () => {
    		toggleEditionMode();
    	};

    	const handleTextChange = event => {
    		const html = event.detail.html;
    		$$invalidate(3, contentSaved = false);
    		clearTimeout(timer);

    		timer = setTimeout(
    			() => {
    				saveChanges(html);
    			},
    			800
    		);
    	};

    	const saveChanges = newContent => {
    		blockEditorReload = true;
    		updatePageContent(bookId, currentPage.id, newContent);
    		$$invalidate(3, contentSaved = true);
    	};

    	const handleDelete = () => {
    		if (confirm("Seguro que quieres eliminar esta parte?")) {
    			deletePage(bookId, currentPage.id);
    		}
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TextEditor> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		currentPage.title = this.value;
    		$$invalidate(5, currentPage);
    	}

    	$$self.$capture_state = () => ({
    		quill: index_umd.quill,
    		getBookIdInRoute,
    		currentSelectedPage,
    		currentPageIndex,
    		isEmptyBook,
    		updatePageContent,
    		updatePageName,
    		deletePage,
    		Theme,
    		DoubleBounce,
    		quillOptions,
    		bookId,
    		blockEditorReload,
    		htmlContent,
    		showEditor,
    		isEmpty,
    		timer,
    		contentSaved,
    		editionMode,
    		currentPage,
    		toggleEditionMode,
    		applyChanges,
    		discardChanges,
    		handleTextChange,
    		saveChanges,
    		handleDelete
    	});

    	$$self.$inject_state = $$props => {
    		if ('bookId' in $$props) bookId = $$props.bookId;
    		if ('blockEditorReload' in $$props) blockEditorReload = $$props.blockEditorReload;
    		if ('htmlContent' in $$props) $$invalidate(0, htmlContent = $$props.htmlContent);
    		if ('showEditor' in $$props) $$invalidate(1, showEditor = $$props.showEditor);
    		if ('isEmpty' in $$props) $$invalidate(2, isEmpty = $$props.isEmpty);
    		if ('timer' in $$props) timer = $$props.timer;
    		if ('contentSaved' in $$props) $$invalidate(3, contentSaved = $$props.contentSaved);
    		if ('editionMode' in $$props) $$invalidate(4, editionMode = $$props.editionMode);
    		if ('currentPage' in $$props) $$invalidate(5, currentPage = $$props.currentPage);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		htmlContent,
    		showEditor,
    		isEmpty,
    		contentSaved,
    		editionMode,
    		currentPage,
    		quillOptions,
    		toggleEditionMode,
    		applyChanges,
    		discardChanges,
    		handleTextChange,
    		handleDelete,
    		input_input_handler
    	];
    }

    class TextEditor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TextEditor",
    			options,
    			id: create_fragment$e.name
    		});
    	}
    }

    /* src/components/StateButton.svelte generated by Svelte v3.44.1 */

    const file$b = "src/components/StateButton.svelte";

    // (41:2) {:else}
    function create_else_block$2(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*inactiveMessage*/ ctx[3]);
    			attr_dev(span, "class", "inactive-message svelte-1420x9l");
    			add_location(span, file$b, 41, 4, 803);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*inactiveMessage*/ 8) set_data_dev(t, /*inactiveMessage*/ ctx[3]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(41:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (39:2) {#if isActive}
    function create_if_block$9(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*activeMessage*/ ctx[2]);
    			attr_dev(span, "class", "active-message svelte-1420x9l");
    			add_location(span, file$b, 39, 4, 737);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*activeMessage*/ 4) set_data_dev(t, /*activeMessage*/ ctx[2]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(39:2) {#if isActive}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*isActive*/ ctx[0]) return create_if_block$9;
    		return create_else_block$2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			button = element("button");
    			if_block.c();
    			set_style(button, "background-color", /*isActive*/ ctx[0] ? 'white' : 'steelblue');
    			attr_dev(button, "class", "svelte-1420x9l");
    			add_location(button, file$b, 35, 0, 621);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			if_block.m(button, null);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*onClick*/ ctx[1])) /*onClick*/ ctx[1].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(button, null);
    				}
    			}

    			if (dirty & /*isActive*/ 1) {
    				set_style(button, "background-color", /*isActive*/ ctx[0] ? 'white' : 'steelblue');
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('StateButton', slots, []);
    	let { isActive = false } = $$props;

    	let { onClick = () => {
    		
    	} } = $$props;

    	let { activeMessage = "" } = $$props;
    	let { inactiveMessage = "" } = $$props;
    	const writable_props = ['isActive', 'onClick', 'activeMessage', 'inactiveMessage'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StateButton> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('isActive' in $$props) $$invalidate(0, isActive = $$props.isActive);
    		if ('onClick' in $$props) $$invalidate(1, onClick = $$props.onClick);
    		if ('activeMessage' in $$props) $$invalidate(2, activeMessage = $$props.activeMessage);
    		if ('inactiveMessage' in $$props) $$invalidate(3, inactiveMessage = $$props.inactiveMessage);
    	};

    	$$self.$capture_state = () => ({
    		isActive,
    		onClick,
    		activeMessage,
    		inactiveMessage
    	});

    	$$self.$inject_state = $$props => {
    		if ('isActive' in $$props) $$invalidate(0, isActive = $$props.isActive);
    		if ('onClick' in $$props) $$invalidate(1, onClick = $$props.onClick);
    		if ('activeMessage' in $$props) $$invalidate(2, activeMessage = $$props.activeMessage);
    		if ('inactiveMessage' in $$props) $$invalidate(3, inactiveMessage = $$props.inactiveMessage);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [isActive, onClick, activeMessage, inactiveMessage];
    }

    class StateButton extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {
    			isActive: 0,
    			onClick: 1,
    			activeMessage: 2,
    			inactiveMessage: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "StateButton",
    			options,
    			id: create_fragment$d.name
    		});
    	}

    	get isActive() {
    		throw new Error("<StateButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isActive(value) {
    		throw new Error("<StateButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClick() {
    		throw new Error("<StateButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClick(value) {
    		throw new Error("<StateButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeMessage() {
    		throw new Error("<StateButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeMessage(value) {
    		throw new Error("<StateButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inactiveMessage() {
    		throw new Error("<StateButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inactiveMessage(value) {
    		throw new Error("<StateButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/containers/BookInfoContainer.svelte generated by Svelte v3.44.1 */
    const file$a = "src/containers/BookInfoContainer.svelte";

    // (128:4) {:else}
    function create_else_block_1$1(ctx) {
    	let form;
    	let input;
    	let t0;
    	let span0;
    	let t2;
    	let span1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			form = element("form");
    			input = element("input");
    			t0 = space();
    			span0 = element("span");
    			span0.textContent = "✅";
    			t2 = space();
    			span1 = element("span");
    			span1.textContent = "❌";
    			input.autofocus = true;
    			attr_dev(input, "class", "title-input svelte-6b1hhx");
    			add_location(input, file$a, 129, 8, 2378);
    			set_style(span0, "margin-right", "14px");
    			attr_dev(span0, "class", "icon svelte-6b1hhx");
    			add_location(span0, file$a, 130, 8, 2459);
    			attr_dev(span1, "class", "icon svelte-6b1hhx");
    			add_location(span1, file$a, 134, 8, 2583);
    			attr_dev(form, "class", "title-form svelte-6b1hhx");
    			add_location(form, file$a, 128, 6, 2297);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, form, anchor);
    			append_dev(form, input);
    			set_input_value(input, /*currentBook*/ ctx[0].title);
    			append_dev(form, t0);
    			append_dev(form, span0);
    			append_dev(form, t2);
    			append_dev(form, span1);
    			input.focus();

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[10]),
    					listen_dev(span0, "click", /*handleUpdateTitle*/ ctx[6], false, false, false),
    					listen_dev(span1, "click", /*toggleTitleEdit*/ ctx[4], false, false, false),
    					listen_dev(form, "submit", prevent_default(/*handleUpdateTitle*/ ctx[6]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*currentBook*/ 1 && input.value !== /*currentBook*/ ctx[0].title) {
    				set_input_value(input, /*currentBook*/ ctx[0].title);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(form);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(128:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (125:4) {#if !isEditingTitle}
    function create_if_block_1$5(ctx) {
    	let h2;
    	let t0_value = /*currentBook*/ ctx[0].title + "";
    	let t0;
    	let t1;
    	let span;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			t0 = text(t0_value);
    			t1 = space();
    			span = element("span");
    			span.textContent = "✏️";
    			attr_dev(h2, "class", "svelte-6b1hhx");
    			add_location(h2, file$a, 125, 6, 2173);
    			attr_dev(span, "class", "title-pencil-icon svelte-6b1hhx");
    			add_location(span, file$a, 126, 6, 2208);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			append_dev(h2, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, span, anchor);

    			if (!mounted) {
    				dispose = listen_dev(span, "click", /*toggleTitleEdit*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*currentBook*/ 1 && t0_value !== (t0_value = /*currentBook*/ ctx[0].title + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(span);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(125:4) {#if !isEditingTitle}",
    		ctx
    	});

    	return block;
    }

    // (145:4) {:else}
    function create_else_block$1(ctx) {
    	let form;
    	let textarea;
    	let t0;
    	let span0;
    	let t2;
    	let span1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			form = element("form");
    			textarea = element("textarea");
    			t0 = space();
    			span0 = element("span");
    			span0.textContent = "✅";
    			t2 = space();
    			span1 = element("span");
    			span1.textContent = "❌";
    			attr_dev(textarea, "rows", "5");
    			attr_dev(textarea, "class", "description-textarea svelte-6b1hhx");
    			attr_dev(textarea, "id", "description");
    			attr_dev(textarea, "maxlength", /*maxDescriptionLength*/ ctx[3]);
    			attr_dev(textarea, "placeholder", "Escribe una descripción...");
    			add_location(textarea, file$a, 148, 8, 3039);
    			set_style(span0, "margin-right", "14px");
    			attr_dev(span0, "class", "icon svelte-6b1hhx");
    			add_location(span0, file$a, 155, 8, 3299);
    			attr_dev(span1, "class", "icon svelte-6b1hhx");
    			add_location(span1, file$a, 159, 8, 3429);
    			attr_dev(form, "class", "description-form svelte-6b1hhx");
    			add_location(form, file$a, 145, 6, 2930);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, form, anchor);
    			append_dev(form, textarea);
    			set_input_value(textarea, /*currentBook*/ ctx[0].description);
    			append_dev(form, t0);
    			append_dev(form, span0);
    			append_dev(form, t2);
    			append_dev(form, span1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[11]),
    					listen_dev(span0, "click", /*handleUpdateDescription*/ ctx[7], false, false, false),
    					listen_dev(span1, "click", /*toggleDescriptionEdit*/ ctx[5], false, false, false),
    					listen_dev(form, "submit", prevent_default(/*handleUpdateDescription*/ ctx[7]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*currentBook*/ 1) {
    				set_input_value(textarea, /*currentBook*/ ctx[0].description);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(form);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(145:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (141:4) {#if !isEditingDescription}
    function create_if_block$8(ctx) {
    	let p;
    	let t0_value = /*currentBook*/ ctx[0].description + "";
    	let t0;
    	let t1;
    	let span;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t0 = text(t0_value);
    			t1 = space();
    			span = element("span");
    			span.textContent = "✏️";
    			attr_dev(p, "class", "book-description svelte-6b1hhx");
    			add_location(p, file$a, 141, 6, 2756);
    			attr_dev(span, "class", "description-pencil-icon svelte-6b1hhx");
    			add_location(span, file$a, 142, 6, 2820);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, span, anchor);

    			if (!mounted) {
    				dispose = listen_dev(span, "click", /*toggleDescriptionEdit*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*currentBook*/ 1 && t0_value !== (t0_value = /*currentBook*/ ctx[0].description + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(span);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(141:4) {#if !isEditingDescription}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let div1;
    	let section0;
    	let t0;
    	let section1;
    	let t1;
    	let div0;
    	let statebutton;
    	let current;

    	function select_block_type(ctx, dirty) {
    		if (!/*isEditingTitle*/ ctx[1]) return create_if_block_1$5;
    		return create_else_block_1$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);

    	function select_block_type_1(ctx, dirty) {
    		if (!/*isEditingDescription*/ ctx[2]) return create_if_block$8;
    		return create_else_block$1;
    	}

    	let current_block_type_1 = select_block_type_1(ctx);
    	let if_block1 = current_block_type_1(ctx);

    	statebutton = new StateButton({
    			props: {
    				inactiveMessage: "Publicar",
    				activeMessage: "Publicada",
    				onClick: /*handlePublishBook*/ ctx[8],
    				isActive: /*currentBook*/ ctx[0].published
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			section0 = element("section");
    			if_block0.c();
    			t0 = space();
    			section1 = element("section");
    			if_block1.c();
    			t1 = space();
    			div0 = element("div");
    			create_component(statebutton.$$.fragment);
    			attr_dev(section0, "class", "title-section svelte-6b1hhx");
    			add_location(section0, file$a, 123, 2, 2109);
    			attr_dev(section1, "class", "description-section svelte-6b1hhx");
    			add_location(section1, file$a, 139, 2, 2680);
    			attr_dev(div0, "class", "publish-button-container svelte-6b1hhx");
    			add_location(div0, file$a, 164, 2, 3532);
    			attr_dev(div1, "class", "book-info-main-wrapper svelte-6b1hhx");
    			add_location(div1, file$a, 122, 0, 2070);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, section0);
    			if_block0.m(section0, null);
    			append_dev(div1, t0);
    			append_dev(div1, section1);
    			if_block1.m(section1, null);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			mount_component(statebutton, div0, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(section0, null);
    				}
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(section1, null);
    				}
    			}

    			const statebutton_changes = {};
    			if (dirty & /*currentBook*/ 1) statebutton_changes.isActive = /*currentBook*/ ctx[0].published;
    			statebutton.$set(statebutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(statebutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(statebutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if_block0.d();
    			if_block1.d();
    			destroy_component(statebutton);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BookInfoContainer', slots, []);
    	let { currentBook } = $$props;
    	let { bookId } = $$props;
    	let isEditingTitle = false;
    	let isEditingDescription = false;
    	let maxDescriptionLength = MAX_DESCRIPTION_LENGTH;

    	const toggleTitleEdit = () => {
    		$$invalidate(1, isEditingTitle = !isEditingTitle);
    	};

    	const toggleDescriptionEdit = () => {
    		$$invalidate(2, isEditingDescription = !isEditingDescription);
    	};

    	const handleUpdateTitle = () => {
    		updateBookTitle(bookId, currentBook.title);
    		toggleTitleEdit();
    	};

    	const handleUpdateDescription = () => {
    		updateBookDescription(bookId, currentBook.description);
    		toggleDescriptionEdit();
    	};

    	const handlePublishBook = () => {
    		if (!currentBook.published) {
    			if (confirm(`¿Quieres publicar ${currentBook.title}?`)) {
    				publishBook(bookId, true);
    			}
    		} else {
    			if (confirm(`¿Quieres ocultar ${currentBook.title}?`)) {
    				publishBook(bookId, false);
    			}
    		}
    	};

    	const writable_props = ['currentBook', 'bookId'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BookInfoContainer> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		currentBook.title = this.value;
    		$$invalidate(0, currentBook);
    	}

    	function textarea_input_handler() {
    		currentBook.description = this.value;
    		$$invalidate(0, currentBook);
    	}

    	$$self.$$set = $$props => {
    		if ('currentBook' in $$props) $$invalidate(0, currentBook = $$props.currentBook);
    		if ('bookId' in $$props) $$invalidate(9, bookId = $$props.bookId);
    	};

    	$$self.$capture_state = () => ({
    		MAX_DESCRIPTION_LENGTH,
    		updateBookTitle,
    		updateBookDescription,
    		publishBook,
    		StateButton,
    		currentBook,
    		bookId,
    		isEditingTitle,
    		isEditingDescription,
    		maxDescriptionLength,
    		toggleTitleEdit,
    		toggleDescriptionEdit,
    		handleUpdateTitle,
    		handleUpdateDescription,
    		handlePublishBook
    	});

    	$$self.$inject_state = $$props => {
    		if ('currentBook' in $$props) $$invalidate(0, currentBook = $$props.currentBook);
    		if ('bookId' in $$props) $$invalidate(9, bookId = $$props.bookId);
    		if ('isEditingTitle' in $$props) $$invalidate(1, isEditingTitle = $$props.isEditingTitle);
    		if ('isEditingDescription' in $$props) $$invalidate(2, isEditingDescription = $$props.isEditingDescription);
    		if ('maxDescriptionLength' in $$props) $$invalidate(3, maxDescriptionLength = $$props.maxDescriptionLength);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		currentBook,
    		isEditingTitle,
    		isEditingDescription,
    		maxDescriptionLength,
    		toggleTitleEdit,
    		toggleDescriptionEdit,
    		handleUpdateTitle,
    		handleUpdateDescription,
    		handlePublishBook,
    		bookId,
    		input_input_handler,
    		textarea_input_handler
    	];
    }

    class BookInfoContainer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, { currentBook: 0, bookId: 9 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BookInfoContainer",
    			options,
    			id: create_fragment$c.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*currentBook*/ ctx[0] === undefined && !('currentBook' in props)) {
    			console.warn("<BookInfoContainer> was created without expected prop 'currentBook'");
    		}

    		if (/*bookId*/ ctx[9] === undefined && !('bookId' in props)) {
    			console.warn("<BookInfoContainer> was created without expected prop 'bookId'");
    		}
    	}

    	get currentBook() {
    		throw new Error("<BookInfoContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentBook(value) {
    		throw new Error("<BookInfoContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get bookId() {
    		throw new Error("<BookInfoContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set bookId(value) {
    		throw new Error("<BookInfoContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/pages/BookEdit.svelte generated by Svelte v3.44.1 */
    const file$9 = "src/pages/BookEdit.svelte";

    // (41:2) {#if currentBook}
    function create_if_block_1$4(ctx) {
    	document.title = /*currentBook*/ ctx[1].title;
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(41:2) {#if currentBook}",
    		ctx
    	});

    	return block;
    }

    // (46:0) {#if showPage}
    function create_if_block$7(ctx) {
    	let mainlayout;
    	let current;

    	mainlayout = new Main({
    			props: {
    				logoPath: logoPath$1,
    				$$slots: { default: [create_default_slot$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mainlayout.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mainlayout, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mainlayout_changes = {};

    			if (dirty & /*$$scope, bookId, currentBook*/ 14) {
    				mainlayout_changes.$$scope = { dirty, ctx };
    			}

    			mainlayout.$set(mainlayout_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mainlayout.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mainlayout.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mainlayout, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(46:0) {#if showPage}",
    		ctx
    	});

    	return block;
    }

    // (47:2) <MainLayout logoPath="{logoPath}">
    function create_default_slot$3(ctx) {
    	let div1;
    	let bookinfocontainer;
    	let t0;
    	let div0;
    	let pagescontainer;
    	let t1;
    	let texteditor;
    	let current;

    	bookinfocontainer = new BookInfoContainer({
    			props: {
    				bookId: /*bookId*/ ctx[2],
    				currentBook: /*currentBook*/ ctx[1]
    			},
    			$$inline: true
    		});

    	pagescontainer = new PagesContainer({ $$inline: true });
    	texteditor = new TextEditor({ $$inline: true });

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(bookinfocontainer.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			create_component(pagescontainer.$$.fragment);
    			t1 = space();
    			create_component(texteditor.$$.fragment);
    			attr_dev(div0, "class", "content-container svelte-1sumrq5");
    			add_location(div0, file$9, 50, 6, 1146);
    			attr_dev(div1, "class", "book-edit-wrapper svelte-1sumrq5");
    			add_location(div1, file$9, 47, 4, 1033);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(bookinfocontainer, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			mount_component(pagescontainer, div0, null);
    			append_dev(div0, t1);
    			mount_component(texteditor, div0, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const bookinfocontainer_changes = {};
    			if (dirty & /*bookId*/ 4) bookinfocontainer_changes.bookId = /*bookId*/ ctx[2];
    			if (dirty & /*currentBook*/ 2) bookinfocontainer_changes.currentBook = /*currentBook*/ ctx[1];
    			bookinfocontainer.$set(bookinfocontainer_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(bookinfocontainer.$$.fragment, local);
    			transition_in(pagescontainer.$$.fragment, local);
    			transition_in(texteditor.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(bookinfocontainer.$$.fragment, local);
    			transition_out(pagescontainer.$$.fragment, local);
    			transition_out(texteditor.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(bookinfocontainer);
    			destroy_component(pagescontainer);
    			destroy_component(texteditor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(47:2) <MainLayout logoPath=\\\"{logoPath}\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let if_block0_anchor;
    	let t;
    	let if_block1_anchor;
    	let current;
    	let if_block0 = /*currentBook*/ ctx[1] && create_if_block_1$4(ctx);
    	let if_block1 = /*showPage*/ ctx[0] && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			if_block0_anchor = empty();
    			t = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(document.head, null);
    			append_dev(document.head, if_block0_anchor);
    			insert_dev(target, t, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*currentBook*/ ctx[1]) {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_1$4(ctx);
    					if_block0.c();
    					if_block0.m(if_block0_anchor.parentNode, if_block0_anchor);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*showPage*/ ctx[0]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*showPage*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$7(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			detach_dev(if_block0_anchor);
    			if (detaching) detach_dev(t);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const logoPath$1 = "images/dbook-logo.svg";

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BookEdit', slots, []);
    	let showPage = false;
    	let currentBook;
    	let bookId = "";

    	onMount(() => {
    		$$invalidate(2, bookId = getBookIdInRoute("my-books"));

    		gun.get(bookId).on(async _book => {
    			const book = await decryptData(_book.data);

    			if (book) {
    				$$invalidate(1, currentBook = book);
    				$$invalidate(0, showPage = true);
    			}
    		});
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BookEdit> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		MainLayout: Main,
    		gun,
    		PagesContainer,
    		TextEditor,
    		getBookIdInRoute,
    		BookInfoContainer,
    		decryptData,
    		logoPath: logoPath$1,
    		showPage,
    		currentBook,
    		bookId
    	});

    	$$self.$inject_state = $$props => {
    		if ('showPage' in $$props) $$invalidate(0, showPage = $$props.showPage);
    		if ('currentBook' in $$props) $$invalidate(1, currentBook = $$props.currentBook);
    		if ('bookId' in $$props) $$invalidate(2, bookId = $$props.bookId);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [showPage, currentBook, bookId];
    }

    class BookEdit extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BookEdit",
    			options,
    			id: create_fragment$b.name
    		});
    	}
    }

    /* src/secure-routes/SecureBookEdit.svelte generated by Svelte v3.44.1 */
    const file$8 = "src/secure-routes/SecureBookEdit.svelte";

    // (34:2) {#if canShow}
    function create_if_block$6(ctx) {
    	let bookedit;
    	let current;
    	bookedit = new BookEdit({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(bookedit.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(bookedit, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(bookedit.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(bookedit.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(bookedit, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(34:2) {#if canShow}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let main;
    	let current;
    	let if_block = /*canShow*/ ctx[0] && create_if_block$6(ctx);

    	const block = {
    		c: function create() {
    			main = element("main");
    			if (if_block) if_block.c();
    			add_location(main, file$8, 32, 0, 629);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			if (if_block) if_block.m(main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*canShow*/ ctx[0]) {
    				if (if_block) {
    					if (dirty & /*canShow*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$6(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(main, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SecureBookEdit', slots, []);
    	let canShow = false;

    	onMount(() => {
    		const bookId = getBookIdInRoute("my-books");

    		if (!user.is) {
    			navigate("/");
    			return;
    		}

    		gun.get(bookId).once(async _book => {
    			const book = await decryptData(_book.data);

    			if (book.createdBy !== user.is.epub) {
    				navigate("/home");
    			} else {
    				$$invalidate(0, canShow = true);
    			}
    		});
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SecureBookEdit> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		navigate,
    		onMount,
    		gun,
    		user,
    		getBookIdInRoute,
    		decryptData,
    		BookEdit,
    		canShow
    	});

    	$$self.$inject_state = $$props => {
    		if ('canShow' in $$props) $$invalidate(0, canShow = $$props.canShow);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [canShow];
    }

    class SecureBookEdit extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SecureBookEdit",
    			options,
    			id: create_fragment$a.name
    		});
    	}
    }

    /* src/secure-routes/SecureBooksList.svelte generated by Svelte v3.44.1 */

    function create_fragment$9(ctx) {
    	const block = {
    		c: noop,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SecureBooksList', slots, []);
    	let canShow = false;

    	onMount(() => {
    		if (!user.is) {
    			navigate("/");
    			return;
    		}

    		navigate("/home");
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SecureBooksList> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ onMount, user, navigate, canShow });

    	$$self.$inject_state = $$props => {
    		if ('canShow' in $$props) canShow = $$props.canShow;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [];
    }

    class SecureBooksList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SecureBooksList",
    			options,
    			id: create_fragment$9.name
    		});
    	}
    }

    /* src/containers/AvatarEditorContainer.svelte generated by Svelte v3.44.1 */
    const file$7 = "src/containers/AvatarEditorContainer.svelte";

    // (61:2) {#if isOwn}
    function create_if_block$5(ctx) {
    	let div;
    	let p;
    	let t1;
    	let mounted;
    	let dispose;
    	let if_block = /*hasChangedAvatar*/ ctx[2] && create_if_block_1$3(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			p = element("p");
    			p.textContent = "Cambiar avatar";
    			t1 = space();
    			if (if_block) if_block.c();
    			attr_dev(p, "class", "edit-photo-cta svelte-1e3vg0k");
    			add_location(p, file$7, 62, 6, 1173);
    			attr_dev(div, "class", "cta-wrapper svelte-1e3vg0k");
    			add_location(div, file$7, 61, 4, 1141);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p);
    			append_dev(div, t1);
    			if (if_block) if_block.m(div, null);

    			if (!mounted) {
    				dispose = listen_dev(p, "click", /*handlePhotoChange*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*hasChangedAvatar*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$3(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(61:2) {#if isOwn}",
    		ctx
    	});

    	return block;
    }

    // (66:6) {#if hasChangedAvatar}
    function create_if_block_1$3(ctx) {
    	let p;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "Guardar";
    			attr_dev(p, "class", "save-photo svelte-1e3vg0k");
    			add_location(p, file$7, 66, 8, 1302);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);

    			if (!mounted) {
    				dispose = listen_dev(p, "click", /*handleSaveNewAvatar*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(66:6) {#if hasChangedAvatar}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let div1;
    	let div0;
    	let img;
    	let img_src_value;
    	let t;
    	let if_block = /*isOwn*/ ctx[1] && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			img = element("img");
    			t = space();
    			if (if_block) if_block.c();
    			if (!src_url_equal(img.src, img_src_value = /*photo*/ ctx[0])) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "user avatar");
    			add_location(img, file$7, 58, 4, 1074);
    			attr_dev(div0, "class", "photo-container svelte-1e3vg0k");
    			add_location(div0, file$7, 57, 2, 1040);
    			attr_dev(div1, "class", "edit-avatar-container svelte-1e3vg0k");
    			add_location(div1, file$7, 56, 0, 1002);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, img);
    			append_dev(div1, t);
    			if (if_block) if_block.m(div1, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*photo*/ 1 && !src_url_equal(img.src, img_src_value = /*photo*/ ctx[0])) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (/*isOwn*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$5(ctx);
    					if_block.c();
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AvatarEditorContainer', slots, []);
    	let { photo } = $$props;
    	let { isOwn } = $$props;
    	let hasChangedAvatar;

    	const handlePhotoChange = () => {
    		$$invalidate(2, hasChangedAvatar = true);
    		const newSeed = v4();
    		$$invalidate(0, photo = `https://avatars.dicebear.com/api/avataaars/${newSeed}.svg`);
    	};

    	const handleSaveNewAvatar = () => {
    		updateUserPhoto(photo);
    		$$invalidate(2, hasChangedAvatar = false);
    	};

    	const writable_props = ['photo', 'isOwn'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AvatarEditorContainer> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('photo' in $$props) $$invalidate(0, photo = $$props.photo);
    		if ('isOwn' in $$props) $$invalidate(1, isOwn = $$props.isOwn);
    	};

    	$$self.$capture_state = () => ({
    		uuidv4: v4,
    		updateUserPhoto,
    		photo,
    		isOwn,
    		hasChangedAvatar,
    		handlePhotoChange,
    		handleSaveNewAvatar
    	});

    	$$self.$inject_state = $$props => {
    		if ('photo' in $$props) $$invalidate(0, photo = $$props.photo);
    		if ('isOwn' in $$props) $$invalidate(1, isOwn = $$props.isOwn);
    		if ('hasChangedAvatar' in $$props) $$invalidate(2, hasChangedAvatar = $$props.hasChangedAvatar);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [photo, isOwn, hasChangedAvatar, handlePhotoChange, handleSaveNewAvatar];
    }

    class AvatarEditorContainer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, { photo: 0, isOwn: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AvatarEditorContainer",
    			options,
    			id: create_fragment$8.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*photo*/ ctx[0] === undefined && !('photo' in props)) {
    			console.warn("<AvatarEditorContainer> was created without expected prop 'photo'");
    		}

    		if (/*isOwn*/ ctx[1] === undefined && !('isOwn' in props)) {
    			console.warn("<AvatarEditorContainer> was created without expected prop 'isOwn'");
    		}
    	}

    	get photo() {
    		throw new Error("<AvatarEditorContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set photo(value) {
    		throw new Error("<AvatarEditorContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isOwn() {
    		throw new Error("<AvatarEditorContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isOwn(value) {
    		throw new Error("<AvatarEditorContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/containers/BooksListContainer.svelte generated by Svelte v3.44.1 */

    const { Object: Object_1 } = globals;
    const file$6 = "src/containers/BooksListContainer.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	return child_ctx;
    }

    // (283:0) {:else}
    function create_else_block_1(ctx) {
    	let div;

    	function select_block_type_2(ctx, dirty) {
    		if (/*isOwn*/ ctx[1]) return create_if_block_6;
    		return create_else_block_2;
    	}

    	let current_block_type = select_block_type_2(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", "empty-container svelte-18zz1o3");
    			add_location(div, file$6, 283, 2, 5656);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_block.m(div, null);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, null);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(283:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (231:0) {#if reactiveBooksList.length}
    function create_if_block$4(ctx) {
    	let t0;
    	let t1;
    	let ul;
    	let current;
    	let if_block0 = /*listTitle*/ ctx[0] && create_if_block_5(ctx);
    	let if_block1 = /*isOwn*/ ctx[1] && create_if_block_4$1(ctx);
    	let each_value = /*reactiveBooksList*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(ul, "class", "svelte-18zz1o3");
    			add_location(ul, file$6, 240, 2, 4309);
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*listTitle*/ ctx[0]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_5(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*isOwn*/ ctx[1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_4$1(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty & /*reactiveBooksList, getDate, goToBook, quoteShortener, handleDeleteBook, isOwn, Theme, goToEditMyBook*/ 246) {
    				each_value = /*reactiveBooksList*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(ul, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(231:0) {#if reactiveBooksList.length}",
    		ctx
    	});

    	return block;
    }

    // (292:4) {:else}
    function create_else_block_2(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "Sin historias aún";
    			attr_dev(p, "class", "svelte-18zz1o3");
    			add_location(p, file$6, 292, 6, 5902);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(292:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (285:4) {#if isOwn}
    function create_if_block_6(ctx) {
    	let p;
    	let t1;
    	let button;
    	let t2;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "Aún no tienes historias";
    			t1 = space();
    			button = element("button");
    			t2 = text("Crear una histora");
    			attr_dev(p, "class", "svelte-18zz1o3");
    			add_location(p, file$6, 285, 6, 5708);
    			set_style(button, "background-color", Theme.PALETTE.primary);
    			attr_dev(button, "class", "svelte-18zz1o3");
    			add_location(button, file$6, 286, 6, 5745);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, button, anchor);
    			append_dev(button, t2);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*goToForm*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(285:4) {#if isOwn}",
    		ctx
    	});

    	return block;
    }

    // (232:2) {#if listTitle}
    function create_if_block_5(ctx) {
    	let h1;
    	let t;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			t = text(/*listTitle*/ ctx[0]);
    			set_style(h1, "color", Theme.PALETTE.gray);
    			attr_dev(h1, "class", "svelte-18zz1o3");
    			add_location(h1, file$6, 232, 4, 4114);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			append_dev(h1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*listTitle*/ 1) set_data_dev(t, /*listTitle*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(232:2) {#if listTitle}",
    		ctx
    	});

    	return block;
    }

    // (236:2) {#if isOwn}
    function create_if_block_4$1(ctx) {
    	let span;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Crear nueva historia";
    			attr_dev(span, "class", "create-story-cta svelte-18zz1o3");
    			add_location(span, file$6, 236, 4, 4198);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);

    			if (!mounted) {
    				dispose = listen_dev(span, "click", /*handleCreateNewStory*/ ctx[8], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(236:2) {#if isOwn}",
    		ctx
    	});

    	return block;
    }

    // (249:10) {#if isOwn}
    function create_if_block_2$1(ctx) {
    	let if_block_anchor;

    	function select_block_type_1(ctx, dirty) {
    		if (/*book*/ ctx[16].published) return create_if_block_3$1;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type_1(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(249:10) {#if isOwn}",
    		ctx
    	});

    	return block;
    }

    // (252:12) {:else}
    function create_else_block(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Sin publicar";
    			attr_dev(span, "class", "book-visibility-no-publish svelte-18zz1o3");
    			add_location(span, file$6, 252, 14, 4739);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(252:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (250:12) {#if book.published}
    function create_if_block_3$1(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Publicada";
    			attr_dev(span, "class", "book-visibility-publish svelte-18zz1o3");
    			add_location(span, file$6, 250, 14, 4650);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(250:12) {#if book.published}",
    		ctx
    	});

    	return block;
    }

    // (260:10) {#if isOwn}
    function create_if_block_1$2(ctx) {
    	let i;
    	let mounted;
    	let dispose;

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[12](/*book*/ ctx[16]);
    	}

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "mi mi-delete delete-button svelte-18zz1o3");
    			add_location(i, file$6, 260, 12, 4966);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);

    			if (!mounted) {
    				dispose = listen_dev(i, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(260:10) {#if isOwn}",
    		ctx
    	});

    	return block;
    }

    // (242:4) {#each reactiveBooksList as book}
    function create_each_block(ctx) {
    	let li;
    	let div0;
    	let t0;
    	let i0;
    	let t1;
    	let div2;
    	let t2;
    	let h3;
    	let t3_value = quoteShortener(/*book*/ ctx[16].title, 80) + "";
    	let t3;
    	let t4;
    	let p;
    	let t5_value = /*book*/ ctx[16].description + "";
    	let t5;
    	let t6;
    	let div1;
    	let span;
    	let b;
    	let t8;
    	let i1;
    	let t9_value = /*getDate*/ ctx[6](/*book*/ ctx[16].updatedAt) + "";
    	let t9;
    	let t10;
    	let stats;
    	let t11;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*isOwn*/ ctx[1] && create_if_block_2$1(ctx);

    	function click_handler() {
    		return /*click_handler*/ ctx[11](/*book*/ ctx[16]);
    	}

    	let if_block1 = /*isOwn*/ ctx[1] && create_if_block_1$2(ctx);

    	function click_handler_2() {
    		return /*click_handler_2*/ ctx[13](/*book*/ ctx[16]);
    	}

    	stats = new Stats({
    			props: {
    				views: /*book*/ ctx[16].views.length,
    				likes: /*book*/ ctx[16].likes.length
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			li = element("li");
    			div0 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			i0 = element("i");
    			t1 = space();
    			div2 = element("div");
    			if (if_block1) if_block1.c();
    			t2 = space();
    			h3 = element("h3");
    			t3 = text(t3_value);
    			t4 = space();
    			p = element("p");
    			t5 = text(t5_value);
    			t6 = space();
    			div1 = element("div");
    			span = element("span");
    			b = element("b");
    			b.textContent = "Actualizada";
    			t8 = space();
    			i1 = element("i");
    			t9 = text(t9_value);
    			t10 = space();
    			create_component(stats.$$.fragment);
    			t11 = space();
    			attr_dev(i0, "class", "mi mi-book book-icon svelte-18zz1o3");
    			add_location(i0, file$6, 256, 10, 4845);
    			set_style(div0, "background-color", Theme.PALETTE.primary);
    			attr_dev(div0, "class", "book-case svelte-18zz1o3");
    			add_location(div0, file$6, 243, 8, 4394);
    			attr_dev(h3, "class", "book-title svelte-18zz1o3");
    			add_location(h3, file$6, 264, 10, 5108);
    			attr_dev(p, "class", "book-description svelte-18zz1o3");
    			add_location(p, file$6, 268, 10, 5241);
    			add_location(b, file$6, 272, 14, 5388);
    			set_style(i1, "letter-spacing", "0.9px");
    			add_location(i1, file$6, 273, 14, 5421);
    			attr_dev(span, "class", "updated-at svelte-18zz1o3");
    			add_location(span, file$6, 271, 12, 5348);
    			attr_dev(div1, "class", "metadata-container svelte-18zz1o3");
    			add_location(div1, file$6, 270, 10, 5303);
    			attr_dev(div2, "class", "book-content svelte-18zz1o3");
    			add_location(div2, file$6, 258, 8, 4905);
    			attr_dev(li, "class", "book-container svelte-18zz1o3");
    			add_location(li, file$6, 242, 6, 4358);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, div0);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div0, t0);
    			append_dev(div0, i0);
    			append_dev(li, t1);
    			append_dev(li, div2);
    			if (if_block1) if_block1.m(div2, null);
    			append_dev(div2, t2);
    			append_dev(div2, h3);
    			append_dev(h3, t3);
    			append_dev(div2, t4);
    			append_dev(div2, p);
    			append_dev(p, t5);
    			append_dev(div2, t6);
    			append_dev(div2, div1);
    			append_dev(div1, span);
    			append_dev(span, b);
    			append_dev(span, t8);
    			append_dev(span, i1);
    			append_dev(i1, t9);
    			append_dev(div1, t10);
    			mount_component(stats, div1, null);
    			append_dev(li, t11);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", click_handler, false, false, false),
    					listen_dev(h3, "click", click_handler_2, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (/*isOwn*/ ctx[1]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$1(ctx);
    					if_block0.c();
    					if_block0.m(div0, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*isOwn*/ ctx[1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$2(ctx);
    					if_block1.c();
    					if_block1.m(div2, t2);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if ((!current || dirty & /*reactiveBooksList*/ 4) && t3_value !== (t3_value = quoteShortener(/*book*/ ctx[16].title, 80) + "")) set_data_dev(t3, t3_value);
    			if ((!current || dirty & /*reactiveBooksList*/ 4) && t5_value !== (t5_value = /*book*/ ctx[16].description + "")) set_data_dev(t5, t5_value);
    			if ((!current || dirty & /*reactiveBooksList*/ 4) && t9_value !== (t9_value = /*getDate*/ ctx[6](/*book*/ ctx[16].updatedAt) + "")) set_data_dev(t9, t9_value);
    			const stats_changes = {};
    			if (dirty & /*reactiveBooksList*/ 4) stats_changes.views = /*book*/ ctx[16].views.length;
    			if (dirty & /*reactiveBooksList*/ 4) stats_changes.likes = /*book*/ ctx[16].likes.length;
    			stats.$set(stats_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stats.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stats.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			destroy_component(stats);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(242:4) {#each reactiveBooksList as book}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let link;
    	let t;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$4, create_else_block_1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*reactiveBooksList*/ ctx[2].length) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			link = element("link");
    			t = space();
    			if_block.c();
    			if_block_anchor = empty();
    			attr_dev(link, "rel", "stylesheet");
    			attr_dev(link, "href", "https://unpkg.com/mono-icons@1.0.5/iconfont/icons.css");
    			add_location(link, file$6, 225, 2, 3950);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, link);
    			insert_dev(target, t, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			detach_dev(link);
    			if (detaching) detach_dev(t);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let reactiveBooksList;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BooksListContainer', slots, []);
    	let { listTitle } = $$props;
    	let { isOwn = false } = $$props;
    	let { userId } = $$props;
    	let store = {};
    	let hasSet = false;

    	const getBooks = () => {
    		if (hasSet) {
    			return;
    		}

    		gun.get(userId).get(BOOKS).map().on(async (_book, key) => {
    			if (_book) {
    				const book = await decryptData(_book.data);

    				// If is a public profile, just show published stories
    				if (!isOwn && !book.published) {
    					return;
    				}

    				$$invalidate(10, store[key] = book, store);
    			} else {
    				delete store[key];
    				$$invalidate(10, store);
    			}
    		});

    		hasSet = true;
    	};

    	const goToForm = () => {
    		navigate("/create-book");
    	};

    	const goToEditMyBook = bookId => {
    		navigate(`/my-books/${bookId}`);
    		location.reload();
    	};

    	const goToBook = bookId => {
    		navigate(`/book/${bookId}`);
    		location.reload();
    	};

    	const getDate = date => {
    		if (!date) {
    			return;
    		}

    		const formated = format(date, "MMM dd, yyyy - hh:mma", { locale: es });
    		const parsedDate = formated.charAt(0).toUpperCase() + formated.slice(1, formated.length);
    		return parsedDate;
    	};

    	const handleDeleteBook = bookId => {
    		if (confirm(`¿Eliminar ${book.title}?`)) {
    			deleteBook(bookId);
    		}
    	};

    	const handleCreateNewStory = () => {
    		navigate(`/create-book`);
    	};

    	const writable_props = ['listTitle', 'isOwn', 'userId'];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BooksListContainer> was created with unknown prop '${key}'`);
    	});

    	const click_handler = book => isOwn ? goToEditMyBook(book.id) : goToBook(book.id);
    	const click_handler_1 = book => handleDeleteBook(book.id);
    	const click_handler_2 = book => goToBook(book.id);

    	$$self.$$set = $$props => {
    		if ('listTitle' in $$props) $$invalidate(0, listTitle = $$props.listTitle);
    		if ('isOwn' in $$props) $$invalidate(1, isOwn = $$props.isOwn);
    		if ('userId' in $$props) $$invalidate(9, userId = $$props.userId);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		format,
    		navigate,
    		es,
    		BOOKS,
    		user,
    		gun,
    		Theme,
    		quoteShortener,
    		deleteBook,
    		decryptData,
    		Stats,
    		listTitle,
    		isOwn,
    		userId,
    		store,
    		hasSet,
    		getBooks,
    		goToForm,
    		goToEditMyBook,
    		goToBook,
    		getDate,
    		handleDeleteBook,
    		handleCreateNewStory,
    		reactiveBooksList
    	});

    	$$self.$inject_state = $$props => {
    		if ('listTitle' in $$props) $$invalidate(0, listTitle = $$props.listTitle);
    		if ('isOwn' in $$props) $$invalidate(1, isOwn = $$props.isOwn);
    		if ('userId' in $$props) $$invalidate(9, userId = $$props.userId);
    		if ('store' in $$props) $$invalidate(10, store = $$props.store);
    		if ('hasSet' in $$props) hasSet = $$props.hasSet;
    		if ('reactiveBooksList' in $$props) $$invalidate(2, reactiveBooksList = $$props.reactiveBooksList);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*userId*/ 512) {
    			{
    				if (userId) {
    					getBooks();
    				}
    			}
    		}

    		if ($$self.$$.dirty & /*store*/ 1024) {
    			$$invalidate(2, reactiveBooksList = Object.values(store).sort((a, b) => a.createdAt - b.createdAt));
    		}
    	};

    	return [
    		listTitle,
    		isOwn,
    		reactiveBooksList,
    		goToForm,
    		goToEditMyBook,
    		goToBook,
    		getDate,
    		handleDeleteBook,
    		handleCreateNewStory,
    		userId,
    		store,
    		click_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class BooksListContainer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, { listTitle: 0, isOwn: 1, userId: 9 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BooksListContainer",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*listTitle*/ ctx[0] === undefined && !('listTitle' in props)) {
    			console.warn("<BooksListContainer> was created without expected prop 'listTitle'");
    		}

    		if (/*userId*/ ctx[9] === undefined && !('userId' in props)) {
    			console.warn("<BooksListContainer> was created without expected prop 'userId'");
    		}
    	}

    	get listTitle() {
    		throw new Error("<BooksListContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listTitle(value) {
    		throw new Error("<BooksListContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isOwn() {
    		throw new Error("<BooksListContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isOwn(value) {
    		throw new Error("<BooksListContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get userId() {
    		throw new Error("<BooksListContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userId(value) {
    		throw new Error("<BooksListContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/containers/StatsContainer.svelte generated by Svelte v3.44.1 */
    const file$5 = "src/containers/StatsContainer.svelte";

    function create_fragment$6(ctx) {
    	let div;
    	let ul;
    	let li0;
    	let h20;
    	let t1;
    	let span0;
    	let t2;
    	let t3;
    	let li1;
    	let h21;
    	let t5;
    	let span1;
    	let t6_value = numberParsed(/*followersNumber*/ ctx[1]) + "";
    	let t6;
    	let t7;
    	let li2;
    	let h22;
    	let t9;
    	let span2;
    	let t10_value = numberParsed(/*followedNumber*/ ctx[2]) + "";
    	let t10;

    	const block = {
    		c: function create() {
    			div = element("div");
    			ul = element("ul");
    			li0 = element("li");
    			h20 = element("h2");
    			h20.textContent = "Historias";
    			t1 = space();
    			span0 = element("span");
    			t2 = text(/*storiesNumber*/ ctx[0]);
    			t3 = space();
    			li1 = element("li");
    			h21 = element("h2");
    			h21.textContent = "Seguidores";
    			t5 = space();
    			span1 = element("span");
    			t6 = text(t6_value);
    			t7 = space();
    			li2 = element("li");
    			h22 = element("h2");
    			h22.textContent = "Seguidos";
    			t9 = space();
    			span2 = element("span");
    			t10 = text(t10_value);
    			attr_dev(h20, "class", "svelte-1mwibys");
    			add_location(h20, file$5, 44, 6, 720);
    			attr_dev(span0, "class", "svelte-1mwibys");
    			add_location(span0, file$5, 45, 6, 745);
    			attr_dev(li0, "class", "stat-container svelte-1mwibys");
    			add_location(li0, file$5, 43, 4, 686);
    			attr_dev(h21, "class", "svelte-1mwibys");
    			add_location(h21, file$5, 49, 6, 823);
    			attr_dev(span1, "class", "svelte-1mwibys");
    			add_location(span1, file$5, 50, 6, 849);
    			attr_dev(li1, "class", "stat-container svelte-1mwibys");
    			add_location(li1, file$5, 48, 4, 789);
    			attr_dev(h22, "class", "svelte-1mwibys");
    			add_location(h22, file$5, 54, 6, 943);
    			attr_dev(span2, "class", "svelte-1mwibys");
    			add_location(span2, file$5, 55, 6, 967);
    			attr_dev(li2, "class", "stat-container svelte-1mwibys");
    			add_location(li2, file$5, 53, 4, 909);
    			attr_dev(ul, "class", "stats-container svelte-1mwibys");
    			add_location(ul, file$5, 42, 2, 653);
    			attr_dev(div, "class", "stats-wrapper svelte-1mwibys");
    			add_location(div, file$5, 41, 0, 623);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, ul);
    			append_dev(ul, li0);
    			append_dev(li0, h20);
    			append_dev(li0, t1);
    			append_dev(li0, span0);
    			append_dev(span0, t2);
    			append_dev(ul, t3);
    			append_dev(ul, li1);
    			append_dev(li1, h21);
    			append_dev(li1, t5);
    			append_dev(li1, span1);
    			append_dev(span1, t6);
    			append_dev(ul, t7);
    			append_dev(ul, li2);
    			append_dev(li2, h22);
    			append_dev(li2, t9);
    			append_dev(li2, span2);
    			append_dev(span2, t10);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*storiesNumber*/ 1) set_data_dev(t2, /*storiesNumber*/ ctx[0]);
    			if (dirty & /*followersNumber*/ 2 && t6_value !== (t6_value = numberParsed(/*followersNumber*/ ctx[1]) + "")) set_data_dev(t6, t6_value);
    			if (dirty & /*followedNumber*/ 4 && t10_value !== (t10_value = numberParsed(/*followedNumber*/ ctx[2]) + "")) set_data_dev(t10, t10_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('StatsContainer', slots, []);
    	let { storiesNumber = 0 } = $$props;
    	let { followersNumber = 0 } = $$props;
    	let { followedNumber = 0 } = $$props;
    	const writable_props = ['storiesNumber', 'followersNumber', 'followedNumber'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StatsContainer> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('storiesNumber' in $$props) $$invalidate(0, storiesNumber = $$props.storiesNumber);
    		if ('followersNumber' in $$props) $$invalidate(1, followersNumber = $$props.followersNumber);
    		if ('followedNumber' in $$props) $$invalidate(2, followedNumber = $$props.followedNumber);
    	};

    	$$self.$capture_state = () => ({
    		numberParsed,
    		storiesNumber,
    		followersNumber,
    		followedNumber
    	});

    	$$self.$inject_state = $$props => {
    		if ('storiesNumber' in $$props) $$invalidate(0, storiesNumber = $$props.storiesNumber);
    		if ('followersNumber' in $$props) $$invalidate(1, followersNumber = $$props.followersNumber);
    		if ('followedNumber' in $$props) $$invalidate(2, followedNumber = $$props.followedNumber);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [storiesNumber, followersNumber, followedNumber];
    }

    class StatsContainer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
    			storiesNumber: 0,
    			followersNumber: 1,
    			followedNumber: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "StatsContainer",
    			options,
    			id: create_fragment$6.name
    		});
    	}

    	get storiesNumber() {
    		throw new Error("<StatsContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set storiesNumber(value) {
    		throw new Error("<StatsContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get followersNumber() {
    		throw new Error("<StatsContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set followersNumber(value) {
    		throw new Error("<StatsContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get followedNumber() {
    		throw new Error("<StatsContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set followedNumber(value) {
    		throw new Error("<StatsContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/pages/Profile.svelte generated by Svelte v3.44.1 */
    const file$4 = "src/pages/Profile.svelte";

    // (109:4) {#if showProfile}
    function create_if_block$3(ctx) {
    	let header;
    	let avatareditorcontainer;
    	let t0;
    	let div;
    	let h1;
    	let t1;
    	let t2_value = /*userToShow*/ ctx[1].nickname + "";
    	let t2;
    	let t3;
    	let t4;
    	let section;
    	let statscontainer;
    	let t5;
    	let booklistcontainer;
    	let current;

    	avatareditorcontainer = new AvatarEditorContainer({
    			props: {
    				isOwn: /*isMyProfile*/ ctx[0],
    				photo: /*userToShow*/ ctx[1].photo
    			},
    			$$inline: true
    		});

    	let if_block = !/*isMyProfile*/ ctx[0] && create_if_block_1$1(ctx);

    	statscontainer = new StatsContainer({
    			props: {
    				storiesNumber: /*stories*/ ctx[3].length,
    				followersNumber: /*userToShow*/ ctx[1].followers
    				? /*userToShow*/ ctx[1].followers.length
    				: 0,
    				followedNumber: /*userToShow*/ ctx[1].followed
    				? /*userToShow*/ ctx[1].followed.length
    				: 0
    			},
    			$$inline: true
    		});

    	booklistcontainer = new BooksListContainer({
    			props: {
    				userId: /*userToShow*/ ctx[1].uuid,
    				isOwn: /*isMyProfile*/ ctx[0],
    				listTitle: "Historias de @" + /*userToShow*/ ctx[1].nickname
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			header = element("header");
    			create_component(avatareditorcontainer.$$.fragment);
    			t0 = space();
    			div = element("div");
    			h1 = element("h1");
    			t1 = text("@");
    			t2 = text(t2_value);
    			t3 = space();
    			if (if_block) if_block.c();
    			t4 = space();
    			section = element("section");
    			create_component(statscontainer.$$.fragment);
    			t5 = space();
    			create_component(booklistcontainer.$$.fragment);
    			set_style(h1, "color", Theme.PALETTE.gray);
    			set_style(h1, "margin", "0");
    			add_location(h1, file$4, 114, 10, 2644);
    			attr_dev(div, "class", "user-nickname-container svelte-hiewy9");
    			add_location(div, file$4, 113, 8, 2596);
    			attr_dev(header, "class", "profile-header svelte-hiewy9");
    			add_location(header, file$4, 109, 6, 2453);
    			attr_dev(section, "class", "stats-section svelte-hiewy9");
    			add_location(section, file$4, 130, 6, 3110);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, header, anchor);
    			mount_component(avatareditorcontainer, header, null);
    			append_dev(header, t0);
    			append_dev(header, div);
    			append_dev(div, h1);
    			append_dev(h1, t1);
    			append_dev(h1, t2);
    			append_dev(header, t3);
    			if (if_block) if_block.m(header, null);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, section, anchor);
    			mount_component(statscontainer, section, null);
    			insert_dev(target, t5, anchor);
    			mount_component(booklistcontainer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const avatareditorcontainer_changes = {};
    			if (dirty & /*isMyProfile*/ 1) avatareditorcontainer_changes.isOwn = /*isMyProfile*/ ctx[0];
    			if (dirty & /*userToShow*/ 2) avatareditorcontainer_changes.photo = /*userToShow*/ ctx[1].photo;
    			avatareditorcontainer.$set(avatareditorcontainer_changes);
    			if ((!current || dirty & /*userToShow*/ 2) && t2_value !== (t2_value = /*userToShow*/ ctx[1].nickname + "")) set_data_dev(t2, t2_value);

    			if (!/*isMyProfile*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*isMyProfile*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(header, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			const statscontainer_changes = {};
    			if (dirty & /*stories*/ 8) statscontainer_changes.storiesNumber = /*stories*/ ctx[3].length;

    			if (dirty & /*userToShow*/ 2) statscontainer_changes.followersNumber = /*userToShow*/ ctx[1].followers
    			? /*userToShow*/ ctx[1].followers.length
    			: 0;

    			if (dirty & /*userToShow*/ 2) statscontainer_changes.followedNumber = /*userToShow*/ ctx[1].followed
    			? /*userToShow*/ ctx[1].followed.length
    			: 0;

    			statscontainer.$set(statscontainer_changes);
    			const booklistcontainer_changes = {};
    			if (dirty & /*userToShow*/ 2) booklistcontainer_changes.userId = /*userToShow*/ ctx[1].uuid;
    			if (dirty & /*isMyProfile*/ 1) booklistcontainer_changes.isOwn = /*isMyProfile*/ ctx[0];
    			if (dirty & /*userToShow*/ 2) booklistcontainer_changes.listTitle = "Historias de @" + /*userToShow*/ ctx[1].nickname;
    			booklistcontainer.$set(booklistcontainer_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(avatareditorcontainer.$$.fragment, local);
    			transition_in(if_block);
    			transition_in(statscontainer.$$.fragment, local);
    			transition_in(booklistcontainer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(avatareditorcontainer.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(statscontainer.$$.fragment, local);
    			transition_out(booklistcontainer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(header);
    			destroy_component(avatareditorcontainer);
    			if (if_block) if_block.d();
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(section);
    			destroy_component(statscontainer);
    			if (detaching) detach_dev(t5);
    			destroy_component(booklistcontainer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(109:4) {#if showProfile}",
    		ctx
    	});

    	return block;
    }

    // (120:8) {#if !isMyProfile}
    function create_if_block_1$1(ctx) {
    	let div;
    	let statebutton;
    	let current;

    	statebutton = new StateButton({
    			props: {
    				inactiveMessage: "Seguir",
    				activeMessage: "Siguiendo",
    				onClick: /*handleAddFollower*/ ctx[5],
    				isActive: /*userToShow*/ ctx[1].followers.includes(/*myUser*/ ctx[2].uuid)
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(statebutton.$$.fragment);
    			attr_dev(div, "class", "follow-button-container svelte-hiewy9");
    			add_location(div, file$4, 120, 10, 2797);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(statebutton, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const statebutton_changes = {};
    			if (dirty & /*userToShow, myUser*/ 6) statebutton_changes.isActive = /*userToShow*/ ctx[1].followers.includes(/*myUser*/ ctx[2].uuid);
    			statebutton.$set(statebutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(statebutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(statebutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(statebutton);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(120:8) {#if !isMyProfile}",
    		ctx
    	});

    	return block;
    }

    // (107:0) <MainLayout>
    function create_default_slot$2(ctx) {
    	let div;
    	let current;
    	let if_block = /*showProfile*/ ctx[4] && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "profile-wrapper svelte-hiewy9");
    			add_location(div, file$4, 107, 2, 2395);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*showProfile*/ ctx[4]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*showProfile*/ 16) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$3(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(107:0) <MainLayout>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let title_value;
    	let t;
    	let mainlayout;
    	let current;

    	document.title = title_value = /*isMyProfile*/ ctx[0]
    	? "Mi perfil"
    	: `Perfil | ${/*userToShow*/ ctx[1].nickname}`;

    	mainlayout = new Main({
    			props: {
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			t = space();
    			create_component(mainlayout.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    			mount_component(mainlayout, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*isMyProfile, userToShow*/ 3) && title_value !== (title_value = /*isMyProfile*/ ctx[0]
    			? "Mi perfil"
    			: `Perfil | ${/*userToShow*/ ctx[1].nickname}`)) {
    				document.title = title_value;
    			}

    			const mainlayout_changes = {};

    			if (dirty & /*$$scope, userToShow, isMyProfile, stories, myUser, showProfile*/ 543) {
    				mainlayout_changes.$$scope = { dirty, ctx };
    			}

    			mainlayout.$set(mainlayout_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mainlayout.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mainlayout.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    			destroy_component(mainlayout, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Profile', slots, []);
    	let isMyProfile = window.location.pathname.split("/")[1] === "my-profile";
    	let { userId } = $$props;
    	const parsedUserId = userId && userId.replace(PROFILE_DOT_REPLACEMENT, ".");

    	// This checks if you access to your profile in the url instead of "my-profile" route
    	if (userId && parsedUserId === user.is.epub) {
    		isMyProfile = true;
    	}

    	// Static object at first in order to not break the app
    	let userToShow = { followers: [], followed: [] };

    	let myUser;
    	let stories = [];
    	let showProfile = false;

    	const getPathUser = () => {
    		gun.get(parsedUserId).once(async _broughtUser => {
    			const broughtUser = await decryptData(_broughtUser.data);
    			$$invalidate(1, userToShow = broughtUser);
    			$$invalidate(4, showProfile = true);
    		});
    	};

    	if (isMyProfile) {
    		currentUser.subscribe(_currentUser => {
    			$$invalidate(1, userToShow = _currentUser);
    			$$invalidate(4, showProfile = true);

    			gun.get(_currentUser.uuid).get(BOOKS).map().once((_, key) => {
    				$$invalidate(3, stories = [...stories, key]);
    			});
    		});
    	} else {
    		currentUser.subscribe(_currentUser => {
    			$$invalidate(2, myUser = _currentUser);
    		});

    		getPathUser();
    	}

    	const handleAddFollower = () => {
    		updateFollowers(userToShow.uuid, () => getPathUser());
    	};

    	const writable_props = ['userId'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Profile> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('userId' in $$props) $$invalidate(6, userId = $$props.userId);
    	};

    	$$self.$capture_state = () => ({
    		MainLayout: Main,
    		currentUser,
    		AvatarEditorContainer,
    		BookListContainer: BooksListContainer,
    		StatsContainer,
    		gun,
    		user,
    		BOOKS,
    		Theme,
    		decryptData,
    		updateFollowers,
    		StateButton,
    		PROFILE_DOT_REPLACEMENT,
    		isMyProfile,
    		userId,
    		parsedUserId,
    		userToShow,
    		myUser,
    		stories,
    		showProfile,
    		getPathUser,
    		handleAddFollower
    	});

    	$$self.$inject_state = $$props => {
    		if ('isMyProfile' in $$props) $$invalidate(0, isMyProfile = $$props.isMyProfile);
    		if ('userId' in $$props) $$invalidate(6, userId = $$props.userId);
    		if ('userToShow' in $$props) $$invalidate(1, userToShow = $$props.userToShow);
    		if ('myUser' in $$props) $$invalidate(2, myUser = $$props.myUser);
    		if ('stories' in $$props) $$invalidate(3, stories = $$props.stories);
    		if ('showProfile' in $$props) $$invalidate(4, showProfile = $$props.showProfile);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		isMyProfile,
    		userToShow,
    		myUser,
    		stories,
    		showProfile,
    		handleAddFollower,
    		userId
    	];
    }

    class Profile extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, { userId: 6 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Profile",
    			options,
    			id: create_fragment$5.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*userId*/ ctx[6] === undefined && !('userId' in props)) {
    			console.warn("<Profile> was created without expected prop 'userId'");
    		}
    	}

    	get userId() {
    		throw new Error("<Profile>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userId(value) {
    		throw new Error("<Profile>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/secure-routes/SecureMyProfile.svelte generated by Svelte v3.44.1 */
    const file$3 = "src/secure-routes/SecureMyProfile.svelte";

    // (22:2) {#if canShow}
    function create_if_block$2(ctx) {
    	let myprofile;
    	let current;

    	myprofile = new Profile({
    			props: { userId: /*userId*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(myprofile.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(myprofile, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const myprofile_changes = {};
    			if (dirty & /*userId*/ 1) myprofile_changes.userId = /*userId*/ ctx[0];
    			myprofile.$set(myprofile_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(myprofile.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(myprofile.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(myprofile, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(22:2) {#if canShow}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let main;
    	let current;
    	let if_block = /*canShow*/ ctx[1] && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			main = element("main");
    			if (if_block) if_block.c();
    			add_location(main, file$3, 20, 0, 302);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			if (if_block) if_block.m(main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*canShow*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*canShow*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(main, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SecureMyProfile', slots, []);
    	let canShow = false;
    	let { userId } = $$props;

    	onMount(() => {
    		if (!user.is) {
    			navigate("/");
    			return;
    		}

    		$$invalidate(1, canShow = true);
    	});

    	const writable_props = ['userId'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SecureMyProfile> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('userId' in $$props) $$invalidate(0, userId = $$props.userId);
    	};

    	$$self.$capture_state = () => ({
    		navigate,
    		onMount,
    		user,
    		MyProfile: Profile,
    		canShow,
    		userId
    	});

    	$$self.$inject_state = $$props => {
    		if ('canShow' in $$props) $$invalidate(1, canShow = $$props.canShow);
    		if ('userId' in $$props) $$invalidate(0, userId = $$props.userId);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [userId, canShow];
    }

    class SecureMyProfile extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, { userId: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SecureMyProfile",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*userId*/ ctx[0] === undefined && !('userId' in props)) {
    			console.warn("<SecureMyProfile> was created without expected prop 'userId'");
    		}
    	}

    	get userId() {
    		throw new Error("<SecureMyProfile>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userId(value) {
    		throw new Error("<SecureMyProfile>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /*!
     * Quill Editor v1.3.7
     * https://quilljs.com/
     * Copyright (c) 2014, Jason Chen
     * Copyright (c) 2013, salesforce.com
     */

    var quill = createCommonjsModule(function (module, exports) {
    (function webpackUniversalModuleDefinition(root, factory) {
    	module.exports = factory();
    })(typeof self !== 'undefined' ? self : commonjsGlobal, function() {
    return /******/ (function(modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/ 	var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
    /******/
    /******/ 		// Check if module is in cache
    /******/ 		if(installedModules[moduleId]) {
    /******/ 			return installedModules[moduleId].exports;
    /******/ 		}
    /******/ 		// Create a new module (and put it into the cache)
    /******/ 		var module = installedModules[moduleId] = {
    /******/ 			i: moduleId,
    /******/ 			l: false,
    /******/ 			exports: {}
    /******/ 		};
    /******/
    /******/ 		// Execute the module function
    /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ 		// Flag the module as loaded
    /******/ 		module.l = true;
    /******/
    /******/ 		// Return the exports of the module
    /******/ 		return module.exports;
    /******/ 	}
    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/ 	__webpack_require__.c = installedModules;
    /******/
    /******/ 	// define getter function for harmony exports
    /******/ 	__webpack_require__.d = function(exports, name, getter) {
    /******/ 		if(!__webpack_require__.o(exports, name)) {
    /******/ 			Object.defineProperty(exports, name, {
    /******/ 				configurable: false,
    /******/ 				enumerable: true,
    /******/ 				get: getter
    /******/ 			});
    /******/ 		}
    /******/ 	};
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/ 	__webpack_require__.n = function(module) {
    /******/ 		var getter = module && module.__esModule ?
    /******/ 			function getDefault() { return module['default']; } :
    /******/ 			function getModuleExports() { return module; };
    /******/ 		__webpack_require__.d(getter, 'a', getter);
    /******/ 		return getter;
    /******/ 	};
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    /******/
    /******/ 	// __webpack_public_path__
    /******/ 	__webpack_require__.p = "";
    /******/
    /******/ 	// Load entry module and return exports
    /******/ 	return __webpack_require__(__webpack_require__.s = 109);
    /******/ })
    /************************************************************************/
    /******/ ([
    /* 0 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    var container_1 = __webpack_require__(17);
    var format_1 = __webpack_require__(18);
    var leaf_1 = __webpack_require__(19);
    var scroll_1 = __webpack_require__(45);
    var inline_1 = __webpack_require__(46);
    var block_1 = __webpack_require__(47);
    var embed_1 = __webpack_require__(48);
    var text_1 = __webpack_require__(49);
    var attributor_1 = __webpack_require__(12);
    var class_1 = __webpack_require__(32);
    var style_1 = __webpack_require__(33);
    var store_1 = __webpack_require__(31);
    var Registry = __webpack_require__(1);
    var Parchment = {
        Scope: Registry.Scope,
        create: Registry.create,
        find: Registry.find,
        query: Registry.query,
        register: Registry.register,
        Container: container_1.default,
        Format: format_1.default,
        Leaf: leaf_1.default,
        Embed: embed_1.default,
        Scroll: scroll_1.default,
        Block: block_1.default,
        Inline: inline_1.default,
        Text: text_1.default,
        Attributor: {
            Attribute: attributor_1.default,
            Class: class_1.default,
            Style: style_1.default,
            Store: store_1.default,
        },
    };
    exports.default = Parchment;


    /***/ }),
    /* 1 */
    /***/ (function(module, exports, __webpack_require__) {

    var __extends = (this && this.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    var ParchmentError = /** @class */ (function (_super) {
        __extends(ParchmentError, _super);
        function ParchmentError(message) {
            var _this = this;
            message = '[Parchment] ' + message;
            _this = _super.call(this, message) || this;
            _this.message = message;
            _this.name = _this.constructor.name;
            return _this;
        }
        return ParchmentError;
    }(Error));
    exports.ParchmentError = ParchmentError;
    var attributes = {};
    var classes = {};
    var tags = {};
    var types = {};
    exports.DATA_KEY = '__blot';
    var Scope;
    (function (Scope) {
        Scope[Scope["TYPE"] = 3] = "TYPE";
        Scope[Scope["LEVEL"] = 12] = "LEVEL";
        Scope[Scope["ATTRIBUTE"] = 13] = "ATTRIBUTE";
        Scope[Scope["BLOT"] = 14] = "BLOT";
        Scope[Scope["INLINE"] = 7] = "INLINE";
        Scope[Scope["BLOCK"] = 11] = "BLOCK";
        Scope[Scope["BLOCK_BLOT"] = 10] = "BLOCK_BLOT";
        Scope[Scope["INLINE_BLOT"] = 6] = "INLINE_BLOT";
        Scope[Scope["BLOCK_ATTRIBUTE"] = 9] = "BLOCK_ATTRIBUTE";
        Scope[Scope["INLINE_ATTRIBUTE"] = 5] = "INLINE_ATTRIBUTE";
        Scope[Scope["ANY"] = 15] = "ANY";
    })(Scope = exports.Scope || (exports.Scope = {}));
    function create(input, value) {
        var match = query(input);
        if (match == null) {
            throw new ParchmentError("Unable to create " + input + " blot");
        }
        var BlotClass = match;
        var node = 
        // @ts-ignore
        input instanceof Node || input['nodeType'] === Node.TEXT_NODE ? input : BlotClass.create(value);
        return new BlotClass(node, value);
    }
    exports.create = create;
    function find(node, bubble) {
        if (bubble === void 0) { bubble = false; }
        if (node == null)
            return null;
        // @ts-ignore
        if (node[exports.DATA_KEY] != null)
            return node[exports.DATA_KEY].blot;
        if (bubble)
            return find(node.parentNode, bubble);
        return null;
    }
    exports.find = find;
    function query(query, scope) {
        if (scope === void 0) { scope = Scope.ANY; }
        var match;
        if (typeof query === 'string') {
            match = types[query] || attributes[query];
            // @ts-ignore
        }
        else if (query instanceof Text || query['nodeType'] === Node.TEXT_NODE) {
            match = types['text'];
        }
        else if (typeof query === 'number') {
            if (query & Scope.LEVEL & Scope.BLOCK) {
                match = types['block'];
            }
            else if (query & Scope.LEVEL & Scope.INLINE) {
                match = types['inline'];
            }
        }
        else if (query instanceof HTMLElement) {
            var names = (query.getAttribute('class') || '').split(/\s+/);
            for (var i in names) {
                match = classes[names[i]];
                if (match)
                    break;
            }
            match = match || tags[query.tagName];
        }
        if (match == null)
            return null;
        // @ts-ignore
        if (scope & Scope.LEVEL & match.scope && scope & Scope.TYPE & match.scope)
            return match;
        return null;
    }
    exports.query = query;
    function register() {
        var Definitions = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            Definitions[_i] = arguments[_i];
        }
        if (Definitions.length > 1) {
            return Definitions.map(function (d) {
                return register(d);
            });
        }
        var Definition = Definitions[0];
        if (typeof Definition.blotName !== 'string' && typeof Definition.attrName !== 'string') {
            throw new ParchmentError('Invalid definition');
        }
        else if (Definition.blotName === 'abstract') {
            throw new ParchmentError('Cannot register abstract class');
        }
        types[Definition.blotName || Definition.attrName] = Definition;
        if (typeof Definition.keyName === 'string') {
            attributes[Definition.keyName] = Definition;
        }
        else {
            if (Definition.className != null) {
                classes[Definition.className] = Definition;
            }
            if (Definition.tagName != null) {
                if (Array.isArray(Definition.tagName)) {
                    Definition.tagName = Definition.tagName.map(function (tagName) {
                        return tagName.toUpperCase();
                    });
                }
                else {
                    Definition.tagName = Definition.tagName.toUpperCase();
                }
                var tagNames = Array.isArray(Definition.tagName) ? Definition.tagName : [Definition.tagName];
                tagNames.forEach(function (tag) {
                    if (tags[tag] == null || Definition.className == null) {
                        tags[tag] = Definition;
                    }
                });
            }
        }
        return Definition;
    }
    exports.register = register;


    /***/ }),
    /* 2 */
    /***/ (function(module, exports, __webpack_require__) {

    var diff = __webpack_require__(51);
    var equal = __webpack_require__(11);
    var extend = __webpack_require__(3);
    var op = __webpack_require__(20);


    var NULL_CHARACTER = String.fromCharCode(0);  // Placeholder char for embed in diff()


    var Delta = function (ops) {
      // Assume we are given a well formed ops
      if (Array.isArray(ops)) {
        this.ops = ops;
      } else if (ops != null && Array.isArray(ops.ops)) {
        this.ops = ops.ops;
      } else {
        this.ops = [];
      }
    };


    Delta.prototype.insert = function (text, attributes) {
      var newOp = {};
      if (text.length === 0) return this;
      newOp.insert = text;
      if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {
        newOp.attributes = attributes;
      }
      return this.push(newOp);
    };

    Delta.prototype['delete'] = function (length) {
      if (length <= 0) return this;
      return this.push({ 'delete': length });
    };

    Delta.prototype.retain = function (length, attributes) {
      if (length <= 0) return this;
      var newOp = { retain: length };
      if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {
        newOp.attributes = attributes;
      }
      return this.push(newOp);
    };

    Delta.prototype.push = function (newOp) {
      var index = this.ops.length;
      var lastOp = this.ops[index - 1];
      newOp = extend(true, {}, newOp);
      if (typeof lastOp === 'object') {
        if (typeof newOp['delete'] === 'number' && typeof lastOp['delete'] === 'number') {
          this.ops[index - 1] = { 'delete': lastOp['delete'] + newOp['delete'] };
          return this;
        }
        // Since it does not matter if we insert before or after deleting at the same index,
        // always prefer to insert first
        if (typeof lastOp['delete'] === 'number' && newOp.insert != null) {
          index -= 1;
          lastOp = this.ops[index - 1];
          if (typeof lastOp !== 'object') {
            this.ops.unshift(newOp);
            return this;
          }
        }
        if (equal(newOp.attributes, lastOp.attributes)) {
          if (typeof newOp.insert === 'string' && typeof lastOp.insert === 'string') {
            this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };
            if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes;
            return this;
          } else if (typeof newOp.retain === 'number' && typeof lastOp.retain === 'number') {
            this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };
            if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes;
            return this;
          }
        }
      }
      if (index === this.ops.length) {
        this.ops.push(newOp);
      } else {
        this.ops.splice(index, 0, newOp);
      }
      return this;
    };

    Delta.prototype.chop = function () {
      var lastOp = this.ops[this.ops.length - 1];
      if (lastOp && lastOp.retain && !lastOp.attributes) {
        this.ops.pop();
      }
      return this;
    };

    Delta.prototype.filter = function (predicate) {
      return this.ops.filter(predicate);
    };

    Delta.prototype.forEach = function (predicate) {
      this.ops.forEach(predicate);
    };

    Delta.prototype.map = function (predicate) {
      return this.ops.map(predicate);
    };

    Delta.prototype.partition = function (predicate) {
      var passed = [], failed = [];
      this.forEach(function(op) {
        var target = predicate(op) ? passed : failed;
        target.push(op);
      });
      return [passed, failed];
    };

    Delta.prototype.reduce = function (predicate, initial) {
      return this.ops.reduce(predicate, initial);
    };

    Delta.prototype.changeLength = function () {
      return this.reduce(function (length, elem) {
        if (elem.insert) {
          return length + op.length(elem);
        } else if (elem.delete) {
          return length - elem.delete;
        }
        return length;
      }, 0);
    };

    Delta.prototype.length = function () {
      return this.reduce(function (length, elem) {
        return length + op.length(elem);
      }, 0);
    };

    Delta.prototype.slice = function (start, end) {
      start = start || 0;
      if (typeof end !== 'number') end = Infinity;
      var ops = [];
      var iter = op.iterator(this.ops);
      var index = 0;
      while (index < end && iter.hasNext()) {
        var nextOp;
        if (index < start) {
          nextOp = iter.next(start - index);
        } else {
          nextOp = iter.next(end - index);
          ops.push(nextOp);
        }
        index += op.length(nextOp);
      }
      return new Delta(ops);
    };


    Delta.prototype.compose = function (other) {
      var thisIter = op.iterator(this.ops);
      var otherIter = op.iterator(other.ops);
      var ops = [];
      var firstOther = otherIter.peek();
      if (firstOther != null && typeof firstOther.retain === 'number' && firstOther.attributes == null) {
        var firstLeft = firstOther.retain;
        while (thisIter.peekType() === 'insert' && thisIter.peekLength() <= firstLeft) {
          firstLeft -= thisIter.peekLength();
          ops.push(thisIter.next());
        }
        if (firstOther.retain - firstLeft > 0) {
          otherIter.next(firstOther.retain - firstLeft);
        }
      }
      var delta = new Delta(ops);
      while (thisIter.hasNext() || otherIter.hasNext()) {
        if (otherIter.peekType() === 'insert') {
          delta.push(otherIter.next());
        } else if (thisIter.peekType() === 'delete') {
          delta.push(thisIter.next());
        } else {
          var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
          var thisOp = thisIter.next(length);
          var otherOp = otherIter.next(length);
          if (typeof otherOp.retain === 'number') {
            var newOp = {};
            if (typeof thisOp.retain === 'number') {
              newOp.retain = length;
            } else {
              newOp.insert = thisOp.insert;
            }
            // Preserve null when composing with a retain, otherwise remove it for inserts
            var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');
            if (attributes) newOp.attributes = attributes;
            delta.push(newOp);

            // Optimization if rest of other is just retain
            if (!otherIter.hasNext() && equal(delta.ops[delta.ops.length - 1], newOp)) {
              var rest = new Delta(thisIter.rest());
              return delta.concat(rest).chop();
            }

          // Other op should be delete, we could be an insert or retain
          // Insert + delete cancels out
          } else if (typeof otherOp['delete'] === 'number' && typeof thisOp.retain === 'number') {
            delta.push(otherOp);
          }
        }
      }
      return delta.chop();
    };

    Delta.prototype.concat = function (other) {
      var delta = new Delta(this.ops.slice());
      if (other.ops.length > 0) {
        delta.push(other.ops[0]);
        delta.ops = delta.ops.concat(other.ops.slice(1));
      }
      return delta;
    };

    Delta.prototype.diff = function (other, index) {
      if (this.ops === other.ops) {
        return new Delta();
      }
      var strings = [this, other].map(function (delta) {
        return delta.map(function (op) {
          if (op.insert != null) {
            return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;
          }
          var prep = (delta === other) ? 'on' : 'with';
          throw new Error('diff() called ' + prep + ' non-document');
        }).join('');
      });
      var delta = new Delta();
      var diffResult = diff(strings[0], strings[1], index);
      var thisIter = op.iterator(this.ops);
      var otherIter = op.iterator(other.ops);
      diffResult.forEach(function (component) {
        var length = component[1].length;
        while (length > 0) {
          var opLength = 0;
          switch (component[0]) {
            case diff.INSERT:
              opLength = Math.min(otherIter.peekLength(), length);
              delta.push(otherIter.next(opLength));
              break;
            case diff.DELETE:
              opLength = Math.min(length, thisIter.peekLength());
              thisIter.next(opLength);
              delta['delete'](opLength);
              break;
            case diff.EQUAL:
              opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
              var thisOp = thisIter.next(opLength);
              var otherOp = otherIter.next(opLength);
              if (equal(thisOp.insert, otherOp.insert)) {
                delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));
              } else {
                delta.push(otherOp)['delete'](opLength);
              }
              break;
          }
          length -= opLength;
        }
      });
      return delta.chop();
    };

    Delta.prototype.eachLine = function (predicate, newline) {
      newline = newline || '\n';
      var iter = op.iterator(this.ops);
      var line = new Delta();
      var i = 0;
      while (iter.hasNext()) {
        if (iter.peekType() !== 'insert') return;
        var thisOp = iter.peek();
        var start = op.length(thisOp) - iter.peekLength();
        var index = typeof thisOp.insert === 'string' ?
          thisOp.insert.indexOf(newline, start) - start : -1;
        if (index < 0) {
          line.push(iter.next());
        } else if (index > 0) {
          line.push(iter.next(index));
        } else {
          if (predicate(line, iter.next(1).attributes || {}, i) === false) {
            return;
          }
          i += 1;
          line = new Delta();
        }
      }
      if (line.length() > 0) {
        predicate(line, {}, i);
      }
    };

    Delta.prototype.transform = function (other, priority) {
      priority = !!priority;
      if (typeof other === 'number') {
        return this.transformPosition(other, priority);
      }
      var thisIter = op.iterator(this.ops);
      var otherIter = op.iterator(other.ops);
      var delta = new Delta();
      while (thisIter.hasNext() || otherIter.hasNext()) {
        if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {
          delta.retain(op.length(thisIter.next()));
        } else if (otherIter.peekType() === 'insert') {
          delta.push(otherIter.next());
        } else {
          var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
          var thisOp = thisIter.next(length);
          var otherOp = otherIter.next(length);
          if (thisOp['delete']) {
            // Our delete either makes their delete redundant or removes their retain
            continue;
          } else if (otherOp['delete']) {
            delta.push(otherOp);
          } else {
            // We retain either their retain or insert
            delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));
          }
        }
      }
      return delta.chop();
    };

    Delta.prototype.transformPosition = function (index, priority) {
      priority = !!priority;
      var thisIter = op.iterator(this.ops);
      var offset = 0;
      while (thisIter.hasNext() && offset <= index) {
        var length = thisIter.peekLength();
        var nextType = thisIter.peekType();
        thisIter.next();
        if (nextType === 'delete') {
          index -= Math.min(length, index - offset);
          continue;
        } else if (nextType === 'insert' && (offset < index || !priority)) {
          index += length;
        }
        offset += length;
      }
      return index;
    };


    module.exports = Delta;


    /***/ }),
    /* 3 */
    /***/ (function(module, exports) {

    var hasOwn = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var defineProperty = Object.defineProperty;
    var gOPD = Object.getOwnPropertyDescriptor;

    var isArray = function isArray(arr) {
    	if (typeof Array.isArray === 'function') {
    		return Array.isArray(arr);
    	}

    	return toStr.call(arr) === '[object Array]';
    };

    var isPlainObject = function isPlainObject(obj) {
    	if (!obj || toStr.call(obj) !== '[object Object]') {
    		return false;
    	}

    	var hasOwnConstructor = hasOwn.call(obj, 'constructor');
    	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
    	// Not own constructor property must be Object
    	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
    		return false;
    	}

    	// Own properties are enumerated firstly, so to speed up,
    	// if last one is own, then all properties are own.
    	var key;
    	for (key in obj) { /**/ }

    	return typeof key === 'undefined' || hasOwn.call(obj, key);
    };

    // If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
    var setProperty = function setProperty(target, options) {
    	if (defineProperty && options.name === '__proto__') {
    		defineProperty(target, options.name, {
    			enumerable: true,
    			configurable: true,
    			value: options.newValue,
    			writable: true
    		});
    	} else {
    		target[options.name] = options.newValue;
    	}
    };

    // Return undefined instead of __proto__ if '__proto__' is not an own property
    var getProperty = function getProperty(obj, name) {
    	if (name === '__proto__') {
    		if (!hasOwn.call(obj, name)) {
    			return void 0;
    		} else if (gOPD) {
    			// In early versions of node, obj['__proto__'] is buggy when obj has
    			// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
    			return gOPD(obj, name).value;
    		}
    	}

    	return obj[name];
    };

    module.exports = function extend() {
    	var options, name, src, copy, copyIsArray, clone;
    	var target = arguments[0];
    	var i = 1;
    	var length = arguments.length;
    	var deep = false;

    	// Handle a deep copy situation
    	if (typeof target === 'boolean') {
    		deep = target;
    		target = arguments[1] || {};
    		// skip the boolean and the target
    		i = 2;
    	}
    	if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
    		target = {};
    	}

    	for (; i < length; ++i) {
    		options = arguments[i];
    		// Only deal with non-null/undefined values
    		if (options != null) {
    			// Extend the base object
    			for (name in options) {
    				src = getProperty(target, name);
    				copy = getProperty(options, name);

    				// Prevent never-ending loop
    				if (target !== copy) {
    					// Recurse if we're merging plain objects or arrays
    					if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
    						if (copyIsArray) {
    							copyIsArray = false;
    							clone = src && isArray(src) ? src : [];
    						} else {
    							clone = src && isPlainObject(src) ? src : {};
    						}

    						// Never move original objects, clone them
    						setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

    					// Don't bring in undefined values
    					} else if (typeof copy !== 'undefined') {
    						setProperty(target, { name: name, newValue: copy });
    					}
    				}
    			}
    		}
    	}

    	// Return the modified object
    	return target;
    };


    /***/ }),
    /* 4 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.BlockEmbed = exports.bubbleFormats = undefined;

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _extend = __webpack_require__(3);

    var _extend2 = _interopRequireDefault(_extend);

    var _quillDelta = __webpack_require__(2);

    var _quillDelta2 = _interopRequireDefault(_quillDelta);

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    var _break = __webpack_require__(16);

    var _break2 = _interopRequireDefault(_break);

    var _inline = __webpack_require__(6);

    var _inline2 = _interopRequireDefault(_inline);

    var _text = __webpack_require__(7);

    var _text2 = _interopRequireDefault(_text);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var NEWLINE_LENGTH = 1;

    var BlockEmbed = function (_Parchment$Embed) {
      _inherits(BlockEmbed, _Parchment$Embed);

      function BlockEmbed() {
        _classCallCheck(this, BlockEmbed);

        return _possibleConstructorReturn(this, (BlockEmbed.__proto__ || Object.getPrototypeOf(BlockEmbed)).apply(this, arguments));
      }

      _createClass(BlockEmbed, [{
        key: 'attach',
        value: function attach() {
          _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'attach', this).call(this);
          this.attributes = new _parchment2.default.Attributor.Store(this.domNode);
        }
      }, {
        key: 'delta',
        value: function delta() {
          return new _quillDelta2.default().insert(this.value(), (0, _extend2.default)(this.formats(), this.attributes.values()));
        }
      }, {
        key: 'format',
        value: function format(name, value) {
          var attribute = _parchment2.default.query(name, _parchment2.default.Scope.BLOCK_ATTRIBUTE);
          if (attribute != null) {
            this.attributes.attribute(attribute, value);
          }
        }
      }, {
        key: 'formatAt',
        value: function formatAt(index, length, name, value) {
          this.format(name, value);
        }
      }, {
        key: 'insertAt',
        value: function insertAt(index, value, def) {
          if (typeof value === 'string' && value.endsWith('\n')) {
            var block = _parchment2.default.create(Block.blotName);
            this.parent.insertBefore(block, index === 0 ? this : this.next);
            block.insertAt(0, value.slice(0, -1));
          } else {
            _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'insertAt', this).call(this, index, value, def);
          }
        }
      }]);

      return BlockEmbed;
    }(_parchment2.default.Embed);

    BlockEmbed.scope = _parchment2.default.Scope.BLOCK_BLOT;
    // It is important for cursor behavior BlockEmbeds use tags that are block level elements


    var Block = function (_Parchment$Block) {
      _inherits(Block, _Parchment$Block);

      function Block(domNode) {
        _classCallCheck(this, Block);

        var _this2 = _possibleConstructorReturn(this, (Block.__proto__ || Object.getPrototypeOf(Block)).call(this, domNode));

        _this2.cache = {};
        return _this2;
      }

      _createClass(Block, [{
        key: 'delta',
        value: function delta() {
          if (this.cache.delta == null) {
            this.cache.delta = this.descendants(_parchment2.default.Leaf).reduce(function (delta, leaf) {
              if (leaf.length() === 0) {
                return delta;
              } else {
                return delta.insert(leaf.value(), bubbleFormats(leaf));
              }
            }, new _quillDelta2.default()).insert('\n', bubbleFormats(this));
          }
          return this.cache.delta;
        }
      }, {
        key: 'deleteAt',
        value: function deleteAt(index, length) {
          _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'deleteAt', this).call(this, index, length);
          this.cache = {};
        }
      }, {
        key: 'formatAt',
        value: function formatAt(index, length, name, value) {
          if (length <= 0) return;
          if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
            if (index + length === this.length()) {
              this.format(name, value);
            }
          } else {
            _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'formatAt', this).call(this, index, Math.min(length, this.length() - index - 1), name, value);
          }
          this.cache = {};
        }
      }, {
        key: 'insertAt',
        value: function insertAt(index, value, def) {
          if (def != null) return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, index, value, def);
          if (value.length === 0) return;
          var lines = value.split('\n');
          var text = lines.shift();
          if (text.length > 0) {
            if (index < this.length() - 1 || this.children.tail == null) {
              _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, Math.min(index, this.length() - 1), text);
            } else {
              this.children.tail.insertAt(this.children.tail.length(), text);
            }
            this.cache = {};
          }
          var block = this;
          lines.reduce(function (index, line) {
            block = block.split(index, true);
            block.insertAt(0, line);
            return line.length;
          }, index + text.length);
        }
      }, {
        key: 'insertBefore',
        value: function insertBefore(blot, ref) {
          var head = this.children.head;
          _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertBefore', this).call(this, blot, ref);
          if (head instanceof _break2.default) {
            head.remove();
          }
          this.cache = {};
        }
      }, {
        key: 'length',
        value: function length() {
          if (this.cache.length == null) {
            this.cache.length = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'length', this).call(this) + NEWLINE_LENGTH;
          }
          return this.cache.length;
        }
      }, {
        key: 'moveChildren',
        value: function moveChildren(target, ref) {
          _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'moveChildren', this).call(this, target, ref);
          this.cache = {};
        }
      }, {
        key: 'optimize',
        value: function optimize(context) {
          _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'optimize', this).call(this, context);
          this.cache = {};
        }
      }, {
        key: 'path',
        value: function path(index) {
          return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'path', this).call(this, index, true);
        }
      }, {
        key: 'removeChild',
        value: function removeChild(child) {
          _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'removeChild', this).call(this, child);
          this.cache = {};
        }
      }, {
        key: 'split',
        value: function split(index) {
          var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

          if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {
            var clone = this.clone();
            if (index === 0) {
              this.parent.insertBefore(clone, this);
              return this;
            } else {
              this.parent.insertBefore(clone, this.next);
              return clone;
            }
          } else {
            var next = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'split', this).call(this, index, force);
            this.cache = {};
            return next;
          }
        }
      }]);

      return Block;
    }(_parchment2.default.Block);

    Block.blotName = 'block';
    Block.tagName = 'P';
    Block.defaultChild = 'break';
    Block.allowedChildren = [_inline2.default, _parchment2.default.Embed, _text2.default];

    function bubbleFormats(blot) {
      var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (blot == null) return formats;
      if (typeof blot.formats === 'function') {
        formats = (0, _extend2.default)(formats, blot.formats());
      }
      if (blot.parent == null || blot.parent.blotName == 'scroll' || blot.parent.statics.scope !== blot.statics.scope) {
        return formats;
      }
      return bubbleFormats(blot.parent, formats);
    }

    exports.bubbleFormats = bubbleFormats;
    exports.BlockEmbed = BlockEmbed;
    exports.default = Block;

    /***/ }),
    /* 5 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.overload = exports.expandConfig = undefined;

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    __webpack_require__(50);

    var _quillDelta = __webpack_require__(2);

    var _quillDelta2 = _interopRequireDefault(_quillDelta);

    var _editor = __webpack_require__(14);

    var _editor2 = _interopRequireDefault(_editor);

    var _emitter3 = __webpack_require__(8);

    var _emitter4 = _interopRequireDefault(_emitter3);

    var _module = __webpack_require__(9);

    var _module2 = _interopRequireDefault(_module);

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    var _selection = __webpack_require__(15);

    var _selection2 = _interopRequireDefault(_selection);

    var _extend = __webpack_require__(3);

    var _extend2 = _interopRequireDefault(_extend);

    var _logger = __webpack_require__(10);

    var _logger2 = _interopRequireDefault(_logger);

    var _theme = __webpack_require__(34);

    var _theme2 = _interopRequireDefault(_theme);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var debug = (0, _logger2.default)('quill');

    var Quill = function () {
      _createClass(Quill, null, [{
        key: 'debug',
        value: function debug(limit) {
          if (limit === true) {
            limit = 'log';
          }
          _logger2.default.level(limit);
        }
      }, {
        key: 'find',
        value: function find(node) {
          return node.__quill || _parchment2.default.find(node);
        }
      }, {
        key: 'import',
        value: function _import(name) {
          if (this.imports[name] == null) {
            debug.error('Cannot import ' + name + '. Are you sure it was registered?');
          }
          return this.imports[name];
        }
      }, {
        key: 'register',
        value: function register(path, target) {
          var _this = this;

          var overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

          if (typeof path !== 'string') {
            var name = path.attrName || path.blotName;
            if (typeof name === 'string') {
              // register(Blot | Attributor, overwrite)
              this.register('formats/' + name, path, target);
            } else {
              Object.keys(path).forEach(function (key) {
                _this.register(key, path[key], target);
              });
            }
          } else {
            if (this.imports[path] != null && !overwrite) {
              debug.warn('Overwriting ' + path + ' with', target);
            }
            this.imports[path] = target;
            if ((path.startsWith('blots/') || path.startsWith('formats/')) && target.blotName !== 'abstract') {
              _parchment2.default.register(target);
            } else if (path.startsWith('modules') && typeof target.register === 'function') {
              target.register();
            }
          }
        }
      }]);

      function Quill(container) {
        var _this2 = this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, Quill);

        this.options = expandConfig(container, options);
        this.container = this.options.container;
        if (this.container == null) {
          return debug.error('Invalid Quill container', container);
        }
        if (this.options.debug) {
          Quill.debug(this.options.debug);
        }
        var html = this.container.innerHTML.trim();
        this.container.classList.add('ql-container');
        this.container.innerHTML = '';
        this.container.__quill = this;
        this.root = this.addContainer('ql-editor');
        this.root.classList.add('ql-blank');
        this.root.setAttribute('data-gramm', false);
        this.scrollingContainer = this.options.scrollingContainer || this.root;
        this.emitter = new _emitter4.default();
        this.scroll = _parchment2.default.create(this.root, {
          emitter: this.emitter,
          whitelist: this.options.formats
        });
        this.editor = new _editor2.default(this.scroll);
        this.selection = new _selection2.default(this.scroll, this.emitter);
        this.theme = new this.options.theme(this, this.options);
        this.keyboard = this.theme.addModule('keyboard');
        this.clipboard = this.theme.addModule('clipboard');
        this.history = this.theme.addModule('history');
        this.theme.init();
        this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type) {
          if (type === _emitter4.default.events.TEXT_CHANGE) {
            _this2.root.classList.toggle('ql-blank', _this2.editor.isBlank());
          }
        });
        this.emitter.on(_emitter4.default.events.SCROLL_UPDATE, function (source, mutations) {
          var range = _this2.selection.lastRange;
          var index = range && range.length === 0 ? range.index : undefined;
          modify.call(_this2, function () {
            return _this2.editor.update(null, mutations, index);
          }, source);
        });
        var contents = this.clipboard.convert('<div class=\'ql-editor\' style="white-space: normal;">' + html + '<p><br></p></div>');
        this.setContents(contents);
        this.history.clear();
        if (this.options.placeholder) {
          this.root.setAttribute('data-placeholder', this.options.placeholder);
        }
        if (this.options.readOnly) {
          this.disable();
        }
      }

      _createClass(Quill, [{
        key: 'addContainer',
        value: function addContainer(container) {
          var refNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

          if (typeof container === 'string') {
            var className = container;
            container = document.createElement('div');
            container.classList.add(className);
          }
          this.container.insertBefore(container, refNode);
          return container;
        }
      }, {
        key: 'blur',
        value: function blur() {
          this.selection.setRange(null);
        }
      }, {
        key: 'deleteText',
        value: function deleteText(index, length, source) {
          var _this3 = this;

          var _overload = overload(index, length, source);

          var _overload2 = _slicedToArray(_overload, 4);

          index = _overload2[0];
          length = _overload2[1];
          source = _overload2[3];

          return modify.call(this, function () {
            return _this3.editor.deleteText(index, length);
          }, source, index, -1 * length);
        }
      }, {
        key: 'disable',
        value: function disable() {
          this.enable(false);
        }
      }, {
        key: 'enable',
        value: function enable() {
          var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

          this.scroll.enable(enabled);
          this.container.classList.toggle('ql-disabled', !enabled);
        }
      }, {
        key: 'focus',
        value: function focus() {
          var scrollTop = this.scrollingContainer.scrollTop;
          this.selection.focus();
          this.scrollingContainer.scrollTop = scrollTop;
          this.scrollIntoView();
        }
      }, {
        key: 'format',
        value: function format(name, value) {
          var _this4 = this;

          var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;

          return modify.call(this, function () {
            var range = _this4.getSelection(true);
            var change = new _quillDelta2.default();
            if (range == null) {
              return change;
            } else if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
              change = _this4.editor.formatLine(range.index, range.length, _defineProperty({}, name, value));
            } else if (range.length === 0) {
              _this4.selection.format(name, value);
              return change;
            } else {
              change = _this4.editor.formatText(range.index, range.length, _defineProperty({}, name, value));
            }
            _this4.setSelection(range, _emitter4.default.sources.SILENT);
            return change;
          }, source);
        }
      }, {
        key: 'formatLine',
        value: function formatLine(index, length, name, value, source) {
          var _this5 = this;

          var formats = void 0;

          var _overload3 = overload(index, length, name, value, source);

          var _overload4 = _slicedToArray(_overload3, 4);

          index = _overload4[0];
          length = _overload4[1];
          formats = _overload4[2];
          source = _overload4[3];

          return modify.call(this, function () {
            return _this5.editor.formatLine(index, length, formats);
          }, source, index, 0);
        }
      }, {
        key: 'formatText',
        value: function formatText(index, length, name, value, source) {
          var _this6 = this;

          var formats = void 0;

          var _overload5 = overload(index, length, name, value, source);

          var _overload6 = _slicedToArray(_overload5, 4);

          index = _overload6[0];
          length = _overload6[1];
          formats = _overload6[2];
          source = _overload6[3];

          return modify.call(this, function () {
            return _this6.editor.formatText(index, length, formats);
          }, source, index, 0);
        }
      }, {
        key: 'getBounds',
        value: function getBounds(index) {
          var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

          var bounds = void 0;
          if (typeof index === 'number') {
            bounds = this.selection.getBounds(index, length);
          } else {
            bounds = this.selection.getBounds(index.index, index.length);
          }
          var containerBounds = this.container.getBoundingClientRect();
          return {
            bottom: bounds.bottom - containerBounds.top,
            height: bounds.height,
            left: bounds.left - containerBounds.left,
            right: bounds.right - containerBounds.left,
            top: bounds.top - containerBounds.top,
            width: bounds.width
          };
        }
      }, {
        key: 'getContents',
        value: function getContents() {
          var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

          var _overload7 = overload(index, length);

          var _overload8 = _slicedToArray(_overload7, 2);

          index = _overload8[0];
          length = _overload8[1];

          return this.editor.getContents(index, length);
        }
      }, {
        key: 'getFormat',
        value: function getFormat() {
          var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSelection(true);
          var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

          if (typeof index === 'number') {
            return this.editor.getFormat(index, length);
          } else {
            return this.editor.getFormat(index.index, index.length);
          }
        }
      }, {
        key: 'getIndex',
        value: function getIndex(blot) {
          return blot.offset(this.scroll);
        }
      }, {
        key: 'getLength',
        value: function getLength() {
          return this.scroll.length();
        }
      }, {
        key: 'getLeaf',
        value: function getLeaf(index) {
          return this.scroll.leaf(index);
        }
      }, {
        key: 'getLine',
        value: function getLine(index) {
          return this.scroll.line(index);
        }
      }, {
        key: 'getLines',
        value: function getLines() {
          var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

          if (typeof index !== 'number') {
            return this.scroll.lines(index.index, index.length);
          } else {
            return this.scroll.lines(index, length);
          }
        }
      }, {
        key: 'getModule',
        value: function getModule(name) {
          return this.theme.modules[name];
        }
      }, {
        key: 'getSelection',
        value: function getSelection() {
          var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

          if (focus) this.focus();
          this.update(); // Make sure we access getRange with editor in consistent state
          return this.selection.getRange()[0];
        }
      }, {
        key: 'getText',
        value: function getText() {
          var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

          var _overload9 = overload(index, length);

          var _overload10 = _slicedToArray(_overload9, 2);

          index = _overload10[0];
          length = _overload10[1];

          return this.editor.getText(index, length);
        }
      }, {
        key: 'hasFocus',
        value: function hasFocus() {
          return this.selection.hasFocus();
        }
      }, {
        key: 'insertEmbed',
        value: function insertEmbed(index, embed, value) {
          var _this7 = this;

          var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Quill.sources.API;

          return modify.call(this, function () {
            return _this7.editor.insertEmbed(index, embed, value);
          }, source, index);
        }
      }, {
        key: 'insertText',
        value: function insertText(index, text, name, value, source) {
          var _this8 = this;

          var formats = void 0;

          var _overload11 = overload(index, 0, name, value, source);

          var _overload12 = _slicedToArray(_overload11, 4);

          index = _overload12[0];
          formats = _overload12[2];
          source = _overload12[3];

          return modify.call(this, function () {
            return _this8.editor.insertText(index, text, formats);
          }, source, index, text.length);
        }
      }, {
        key: 'isEnabled',
        value: function isEnabled() {
          return !this.container.classList.contains('ql-disabled');
        }
      }, {
        key: 'off',
        value: function off() {
          return this.emitter.off.apply(this.emitter, arguments);
        }
      }, {
        key: 'on',
        value: function on() {
          return this.emitter.on.apply(this.emitter, arguments);
        }
      }, {
        key: 'once',
        value: function once() {
          return this.emitter.once.apply(this.emitter, arguments);
        }
      }, {
        key: 'pasteHTML',
        value: function pasteHTML(index, html, source) {
          this.clipboard.dangerouslyPasteHTML(index, html, source);
        }
      }, {
        key: 'removeFormat',
        value: function removeFormat(index, length, source) {
          var _this9 = this;

          var _overload13 = overload(index, length, source);

          var _overload14 = _slicedToArray(_overload13, 4);

          index = _overload14[0];
          length = _overload14[1];
          source = _overload14[3];

          return modify.call(this, function () {
            return _this9.editor.removeFormat(index, length);
          }, source, index);
        }
      }, {
        key: 'scrollIntoView',
        value: function scrollIntoView() {
          this.selection.scrollIntoView(this.scrollingContainer);
        }
      }, {
        key: 'setContents',
        value: function setContents(delta) {
          var _this10 = this;

          var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

          return modify.call(this, function () {
            delta = new _quillDelta2.default(delta);
            var length = _this10.getLength();
            var deleted = _this10.editor.deleteText(0, length);
            var applied = _this10.editor.applyDelta(delta);
            var lastOp = applied.ops[applied.ops.length - 1];
            if (lastOp != null && typeof lastOp.insert === 'string' && lastOp.insert[lastOp.insert.length - 1] === '\n') {
              _this10.editor.deleteText(_this10.getLength() - 1, 1);
              applied.delete(1);
            }
            var ret = deleted.compose(applied);
            return ret;
          }, source);
        }
      }, {
        key: 'setSelection',
        value: function setSelection(index, length, source) {
          if (index == null) {
            this.selection.setRange(null, length || Quill.sources.API);
          } else {
            var _overload15 = overload(index, length, source);

            var _overload16 = _slicedToArray(_overload15, 4);

            index = _overload16[0];
            length = _overload16[1];
            source = _overload16[3];

            this.selection.setRange(new _selection.Range(index, length), source);
            if (source !== _emitter4.default.sources.SILENT) {
              this.selection.scrollIntoView(this.scrollingContainer);
            }
          }
        }
      }, {
        key: 'setText',
        value: function setText(text) {
          var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

          var delta = new _quillDelta2.default().insert(text);
          return this.setContents(delta, source);
        }
      }, {
        key: 'update',
        value: function update() {
          var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;

          var change = this.scroll.update(source); // Will update selection before selection.update() does if text changes
          this.selection.update(source);
          return change;
        }
      }, {
        key: 'updateContents',
        value: function updateContents(delta) {
          var _this11 = this;

          var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

          return modify.call(this, function () {
            delta = new _quillDelta2.default(delta);
            return _this11.editor.applyDelta(delta, source);
          }, source, true);
        }
      }]);

      return Quill;
    }();

    Quill.DEFAULTS = {
      bounds: null,
      formats: null,
      modules: {},
      placeholder: '',
      readOnly: false,
      scrollingContainer: null,
      strict: true,
      theme: 'default'
    };
    Quill.events = _emitter4.default.events;
    Quill.sources = _emitter4.default.sources;
    // eslint-disable-next-line no-undef
    Quill.version =  "1.3.7";

    Quill.imports = {
      'delta': _quillDelta2.default,
      'parchment': _parchment2.default,
      'core/module': _module2.default,
      'core/theme': _theme2.default
    };

    function expandConfig(container, userConfig) {
      userConfig = (0, _extend2.default)(true, {
        container: container,
        modules: {
          clipboard: true,
          keyboard: true,
          history: true
        }
      }, userConfig);
      if (!userConfig.theme || userConfig.theme === Quill.DEFAULTS.theme) {
        userConfig.theme = _theme2.default;
      } else {
        userConfig.theme = Quill.import('themes/' + userConfig.theme);
        if (userConfig.theme == null) {
          throw new Error('Invalid theme ' + userConfig.theme + '. Did you register it?');
        }
      }
      var themeConfig = (0, _extend2.default)(true, {}, userConfig.theme.DEFAULTS);
      [themeConfig, userConfig].forEach(function (config) {
        config.modules = config.modules || {};
        Object.keys(config.modules).forEach(function (module) {
          if (config.modules[module] === true) {
            config.modules[module] = {};
          }
        });
      });
      var moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));
      var moduleConfig = moduleNames.reduce(function (config, name) {
        var moduleClass = Quill.import('modules/' + name);
        if (moduleClass == null) {
          debug.error('Cannot load ' + name + ' module. Are you sure you registered it?');
        } else {
          config[name] = moduleClass.DEFAULTS || {};
        }
        return config;
      }, {});
      // Special case toolbar shorthand
      if (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {
        userConfig.modules.toolbar = {
          container: userConfig.modules.toolbar
        };
      }
      userConfig = (0, _extend2.default)(true, {}, Quill.DEFAULTS, { modules: moduleConfig }, themeConfig, userConfig);
      ['bounds', 'container', 'scrollingContainer'].forEach(function (key) {
        if (typeof userConfig[key] === 'string') {
          userConfig[key] = document.querySelector(userConfig[key]);
        }
      });
      userConfig.modules = Object.keys(userConfig.modules).reduce(function (config, name) {
        if (userConfig.modules[name]) {
          config[name] = userConfig.modules[name];
        }
        return config;
      }, {});
      return userConfig;
    }

    // Handle selection preservation and TEXT_CHANGE emission
    // common to modification APIs
    function modify(modifier, source, index, shift) {
      if (this.options.strict && !this.isEnabled() && source === _emitter4.default.sources.USER) {
        return new _quillDelta2.default();
      }
      var range = index == null ? null : this.getSelection();
      var oldDelta = this.editor.delta;
      var change = modifier();
      if (range != null) {
        if (index === true) index = range.index;
        if (shift == null) {
          range = shiftRange(range, change, source);
        } else if (shift !== 0) {
          range = shiftRange(range, index, shift, source);
        }
        this.setSelection(range, _emitter4.default.sources.SILENT);
      }
      if (change.length() > 0) {
        var _emitter;

        var args = [_emitter4.default.events.TEXT_CHANGE, change, oldDelta, source];
        (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
        if (source !== _emitter4.default.sources.SILENT) {
          var _emitter2;

          (_emitter2 = this.emitter).emit.apply(_emitter2, args);
        }
      }
      return change;
    }

    function overload(index, length, name, value, source) {
      var formats = {};
      if (typeof index.index === 'number' && typeof index.length === 'number') {
        // Allow for throwaway end (used by insertText/insertEmbed)
        if (typeof length !== 'number') {
          source = value, value = name, name = length, length = index.length, index = index.index;
        } else {
          length = index.length, index = index.index;
        }
      } else if (typeof length !== 'number') {
        source = value, value = name, name = length, length = 0;
      }
      // Handle format being object, two format name/value strings or excluded
      if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
        formats = name;
        source = value;
      } else if (typeof name === 'string') {
        if (value != null) {
          formats[name] = value;
        } else {
          source = name;
        }
      }
      // Handle optional source
      source = source || _emitter4.default.sources.API;
      return [index, length, formats, source];
    }

    function shiftRange(range, index, length, source) {
      if (range == null) return null;
      var start = void 0,
          end = void 0;
      if (index instanceof _quillDelta2.default) {
        var _map = [range.index, range.index + range.length].map(function (pos) {
          return index.transformPosition(pos, source !== _emitter4.default.sources.USER);
        });

        var _map2 = _slicedToArray(_map, 2);

        start = _map2[0];
        end = _map2[1];
      } else {
        var _map3 = [range.index, range.index + range.length].map(function (pos) {
          if (pos < index || pos === index && source === _emitter4.default.sources.USER) return pos;
          if (length >= 0) {
            return pos + length;
          } else {
            return Math.max(index, pos + length);
          }
        });

        var _map4 = _slicedToArray(_map3, 2);

        start = _map4[0];
        end = _map4[1];
      }
      return new _selection.Range(start, end - start);
    }

    exports.expandConfig = expandConfig;
    exports.overload = overload;
    exports.default = Quill;

    /***/ }),
    /* 6 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _text = __webpack_require__(7);

    var _text2 = _interopRequireDefault(_text);

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var Inline = function (_Parchment$Inline) {
      _inherits(Inline, _Parchment$Inline);

      function Inline() {
        _classCallCheck(this, Inline);

        return _possibleConstructorReturn(this, (Inline.__proto__ || Object.getPrototypeOf(Inline)).apply(this, arguments));
      }

      _createClass(Inline, [{
        key: 'formatAt',
        value: function formatAt(index, length, name, value) {
          if (Inline.compare(this.statics.blotName, name) < 0 && _parchment2.default.query(name, _parchment2.default.Scope.BLOT)) {
            var blot = this.isolate(index, length);
            if (value) {
              blot.wrap(name, value);
            }
          } else {
            _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'formatAt', this).call(this, index, length, name, value);
          }
        }
      }, {
        key: 'optimize',
        value: function optimize(context) {
          _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'optimize', this).call(this, context);
          if (this.parent instanceof Inline && Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {
            var parent = this.parent.isolate(this.offset(), this.length());
            this.moveChildren(parent);
            parent.wrap(this);
          }
        }
      }], [{
        key: 'compare',
        value: function compare(self, other) {
          var selfIndex = Inline.order.indexOf(self);
          var otherIndex = Inline.order.indexOf(other);
          if (selfIndex >= 0 || otherIndex >= 0) {
            return selfIndex - otherIndex;
          } else if (self === other) {
            return 0;
          } else if (self < other) {
            return -1;
          } else {
            return 1;
          }
        }
      }]);

      return Inline;
    }(_parchment2.default.Inline);

    Inline.allowedChildren = [Inline, _parchment2.default.Embed, _text2.default];
    // Lower index means deeper in the DOM tree, since not found (-1) is for embeds
    Inline.order = ['cursor', 'inline', // Must be lower
    'underline', 'strike', 'italic', 'bold', 'script', 'link', 'code' // Must be higher
    ];

    exports.default = Inline;

    /***/ }),
    /* 7 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var TextBlot = function (_Parchment$Text) {
      _inherits(TextBlot, _Parchment$Text);

      function TextBlot() {
        _classCallCheck(this, TextBlot);

        return _possibleConstructorReturn(this, (TextBlot.__proto__ || Object.getPrototypeOf(TextBlot)).apply(this, arguments));
      }

      return TextBlot;
    }(_parchment2.default.Text);

    exports.default = TextBlot;

    /***/ }),
    /* 8 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _eventemitter = __webpack_require__(54);

    var _eventemitter2 = _interopRequireDefault(_eventemitter);

    var _logger = __webpack_require__(10);

    var _logger2 = _interopRequireDefault(_logger);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var debug = (0, _logger2.default)('quill:events');

    var EVENTS = ['selectionchange', 'mousedown', 'mouseup', 'click'];

    EVENTS.forEach(function (eventName) {
      document.addEventListener(eventName, function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        [].slice.call(document.querySelectorAll('.ql-container')).forEach(function (node) {
          // TODO use WeakMap
          if (node.__quill && node.__quill.emitter) {
            var _node$__quill$emitter;

            (_node$__quill$emitter = node.__quill.emitter).handleDOM.apply(_node$__quill$emitter, args);
          }
        });
      });
    });

    var Emitter = function (_EventEmitter) {
      _inherits(Emitter, _EventEmitter);

      function Emitter() {
        _classCallCheck(this, Emitter);

        var _this = _possibleConstructorReturn(this, (Emitter.__proto__ || Object.getPrototypeOf(Emitter)).call(this));

        _this.listeners = {};
        _this.on('error', debug.error);
        return _this;
      }

      _createClass(Emitter, [{
        key: 'emit',
        value: function emit() {
          debug.log.apply(debug, arguments);
          _get(Emitter.prototype.__proto__ || Object.getPrototypeOf(Emitter.prototype), 'emit', this).apply(this, arguments);
        }
      }, {
        key: 'handleDOM',
        value: function handleDOM(event) {
          for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          (this.listeners[event.type] || []).forEach(function (_ref) {
            var node = _ref.node,
                handler = _ref.handler;

            if (event.target === node || node.contains(event.target)) {
              handler.apply(undefined, [event].concat(args));
            }
          });
        }
      }, {
        key: 'listenDOM',
        value: function listenDOM(eventName, node, handler) {
          if (!this.listeners[eventName]) {
            this.listeners[eventName] = [];
          }
          this.listeners[eventName].push({ node: node, handler: handler });
        }
      }]);

      return Emitter;
    }(_eventemitter2.default);

    Emitter.events = {
      EDITOR_CHANGE: 'editor-change',
      SCROLL_BEFORE_UPDATE: 'scroll-before-update',
      SCROLL_OPTIMIZE: 'scroll-optimize',
      SCROLL_UPDATE: 'scroll-update',
      SELECTION_CHANGE: 'selection-change',
      TEXT_CHANGE: 'text-change'
    };
    Emitter.sources = {
      API: 'api',
      SILENT: 'silent',
      USER: 'user'
    };

    exports.default = Emitter;

    /***/ }),
    /* 9 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var Module = function Module(quill) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, Module);

      this.quill = quill;
      this.options = options;
    };

    Module.DEFAULTS = {};

    exports.default = Module;

    /***/ }),
    /* 10 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var levels = ['error', 'warn', 'log', 'info'];
    var level = 'warn';

    function debug(method) {
      if (levels.indexOf(method) <= levels.indexOf(level)) {
        var _console;

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        (_console = console)[method].apply(_console, args); // eslint-disable-line no-console
      }
    }

    function namespace(ns) {
      return levels.reduce(function (logger, method) {
        logger[method] = debug.bind(console, method, ns);
        return logger;
      }, {});
    }

    debug.level = namespace.level = function (newLevel) {
      level = newLevel;
    };

    exports.default = namespace;

    /***/ }),
    /* 11 */
    /***/ (function(module, exports, __webpack_require__) {

    var pSlice = Array.prototype.slice;
    var objectKeys = __webpack_require__(52);
    var isArguments = __webpack_require__(53);

    var deepEqual = module.exports = function (actual, expected, opts) {
      if (!opts) opts = {};
      // 7.1. All identical values are equivalent, as determined by ===.
      if (actual === expected) {
        return true;

      } else if (actual instanceof Date && expected instanceof Date) {
        return actual.getTime() === expected.getTime();

      // 7.3. Other pairs that do not both pass typeof value == 'object',
      // equivalence is determined by ==.
      } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
        return opts.strict ? actual === expected : actual == expected;

      // 7.4. For all other Object pairs, including Array objects, equivalence is
      // determined by having the same number of owned properties (as verified
      // with Object.prototype.hasOwnProperty.call), the same set of keys
      // (although not necessarily the same order), equivalent values for every
      // corresponding key, and an identical 'prototype' property. Note: this
      // accounts for both named and indexed properties on Arrays.
      } else {
        return objEquiv(actual, expected, opts);
      }
    };

    function isUndefinedOrNull(value) {
      return value === null || value === undefined;
    }

    function isBuffer (x) {
      if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
      if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
        return false;
      }
      if (x.length > 0 && typeof x[0] !== 'number') return false;
      return true;
    }

    function objEquiv(a, b, opts) {
      var i, key;
      if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
        return false;
      // an identical 'prototype' property.
      if (a.prototype !== b.prototype) return false;
      //~~~I've managed to break Object.keys through screwy arguments passing.
      //   Converting to array solves the problem.
      if (isArguments(a)) {
        if (!isArguments(b)) {
          return false;
        }
        a = pSlice.call(a);
        b = pSlice.call(b);
        return deepEqual(a, b, opts);
      }
      if (isBuffer(a)) {
        if (!isBuffer(b)) {
          return false;
        }
        if (a.length !== b.length) return false;
        for (i = 0; i < a.length; i++) {
          if (a[i] !== b[i]) return false;
        }
        return true;
      }
      try {
        var ka = objectKeys(a),
            kb = objectKeys(b);
      } catch (e) {//happens when one is a string literal and the other isn't
        return false;
      }
      // having the same number of owned properties (keys incorporates
      // hasOwnProperty)
      if (ka.length != kb.length)
        return false;
      //the same set of keys (although not necessarily the same order),
      ka.sort();
      kb.sort();
      //~~~cheap key test
      for (i = ka.length - 1; i >= 0; i--) {
        if (ka[i] != kb[i])
          return false;
      }
      //equivalent values for every corresponding key, and
      //~~~possibly expensive deep test
      for (i = ka.length - 1; i >= 0; i--) {
        key = ka[i];
        if (!deepEqual(a[key], b[key], opts)) return false;
      }
      return typeof a === typeof b;
    }


    /***/ }),
    /* 12 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    var Registry = __webpack_require__(1);
    var Attributor = /** @class */ (function () {
        function Attributor(attrName, keyName, options) {
            if (options === void 0) { options = {}; }
            this.attrName = attrName;
            this.keyName = keyName;
            var attributeBit = Registry.Scope.TYPE & Registry.Scope.ATTRIBUTE;
            if (options.scope != null) {
                // Ignore type bits, force attribute bit
                this.scope = (options.scope & Registry.Scope.LEVEL) | attributeBit;
            }
            else {
                this.scope = Registry.Scope.ATTRIBUTE;
            }
            if (options.whitelist != null)
                this.whitelist = options.whitelist;
        }
        Attributor.keys = function (node) {
            return [].map.call(node.attributes, function (item) {
                return item.name;
            });
        };
        Attributor.prototype.add = function (node, value) {
            if (!this.canAdd(node, value))
                return false;
            node.setAttribute(this.keyName, value);
            return true;
        };
        Attributor.prototype.canAdd = function (node, value) {
            var match = Registry.query(node, Registry.Scope.BLOT & (this.scope | Registry.Scope.TYPE));
            if (match == null)
                return false;
            if (this.whitelist == null)
                return true;
            if (typeof value === 'string') {
                return this.whitelist.indexOf(value.replace(/["']/g, '')) > -1;
            }
            else {
                return this.whitelist.indexOf(value) > -1;
            }
        };
        Attributor.prototype.remove = function (node) {
            node.removeAttribute(this.keyName);
        };
        Attributor.prototype.value = function (node) {
            var value = node.getAttribute(this.keyName);
            if (this.canAdd(node, value) && value) {
                return value;
            }
            return '';
        };
        return Attributor;
    }());
    exports.default = Attributor;


    /***/ }),
    /* 13 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.Code = undefined;

    var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _quillDelta = __webpack_require__(2);

    var _quillDelta2 = _interopRequireDefault(_quillDelta);

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    var _block = __webpack_require__(4);

    var _block2 = _interopRequireDefault(_block);

    var _inline = __webpack_require__(6);

    var _inline2 = _interopRequireDefault(_inline);

    var _text = __webpack_require__(7);

    var _text2 = _interopRequireDefault(_text);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var Code = function (_Inline) {
      _inherits(Code, _Inline);

      function Code() {
        _classCallCheck(this, Code);

        return _possibleConstructorReturn(this, (Code.__proto__ || Object.getPrototypeOf(Code)).apply(this, arguments));
      }

      return Code;
    }(_inline2.default);

    Code.blotName = 'code';
    Code.tagName = 'CODE';

    var CodeBlock = function (_Block) {
      _inherits(CodeBlock, _Block);

      function CodeBlock() {
        _classCallCheck(this, CodeBlock);

        return _possibleConstructorReturn(this, (CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock)).apply(this, arguments));
      }

      _createClass(CodeBlock, [{
        key: 'delta',
        value: function delta() {
          var _this3 = this;

          var text = this.domNode.textContent;
          if (text.endsWith('\n')) {
            // Should always be true
            text = text.slice(0, -1);
          }
          return text.split('\n').reduce(function (delta, frag) {
            return delta.insert(frag).insert('\n', _this3.formats());
          }, new _quillDelta2.default());
        }
      }, {
        key: 'format',
        value: function format(name, value) {
          if (name === this.statics.blotName && value) return;

          var _descendant = this.descendant(_text2.default, this.length() - 1),
              _descendant2 = _slicedToArray(_descendant, 1),
              text = _descendant2[0];

          if (text != null) {
            text.deleteAt(text.length() - 1, 1);
          }
          _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'format', this).call(this, name, value);
        }
      }, {
        key: 'formatAt',
        value: function formatAt(index, length, name, value) {
          if (length === 0) return;
          if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK) == null || name === this.statics.blotName && value === this.statics.formats(this.domNode)) {
            return;
          }
          var nextNewline = this.newlineIndex(index);
          if (nextNewline < 0 || nextNewline >= index + length) return;
          var prevNewline = this.newlineIndex(index, true) + 1;
          var isolateLength = nextNewline - prevNewline + 1;
          var blot = this.isolate(prevNewline, isolateLength);
          var next = blot.next;
          blot.format(name, value);
          if (next instanceof CodeBlock) {
            next.formatAt(0, index - prevNewline + length - isolateLength, name, value);
          }
        }
      }, {
        key: 'insertAt',
        value: function insertAt(index, value, def) {
          if (def != null) return;

          var _descendant3 = this.descendant(_text2.default, index),
              _descendant4 = _slicedToArray(_descendant3, 2),
              text = _descendant4[0],
              offset = _descendant4[1];

          text.insertAt(offset, value);
        }
      }, {
        key: 'length',
        value: function length() {
          var length = this.domNode.textContent.length;
          if (!this.domNode.textContent.endsWith('\n')) {
            return length + 1;
          }
          return length;
        }
      }, {
        key: 'newlineIndex',
        value: function newlineIndex(searchIndex) {
          var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

          if (!reverse) {
            var offset = this.domNode.textContent.slice(searchIndex).indexOf('\n');
            return offset > -1 ? searchIndex + offset : -1;
          } else {
            return this.domNode.textContent.slice(0, searchIndex).lastIndexOf('\n');
          }
        }
      }, {
        key: 'optimize',
        value: function optimize(context) {
          if (!this.domNode.textContent.endsWith('\n')) {
            this.appendChild(_parchment2.default.create('text', '\n'));
          }
          _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'optimize', this).call(this, context);
          var next = this.next;
          if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && this.statics.formats(this.domNode) === next.statics.formats(next.domNode)) {
            next.optimize(context);
            next.moveChildren(this);
            next.remove();
          }
        }
      }, {
        key: 'replace',
        value: function replace(target) {
          _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'replace', this).call(this, target);
          [].slice.call(this.domNode.querySelectorAll('*')).forEach(function (node) {
            var blot = _parchment2.default.find(node);
            if (blot == null) {
              node.parentNode.removeChild(node);
            } else if (blot instanceof _parchment2.default.Embed) {
              blot.remove();
            } else {
              blot.unwrap();
            }
          });
        }
      }], [{
        key: 'create',
        value: function create(value) {
          var domNode = _get(CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock), 'create', this).call(this, value);
          domNode.setAttribute('spellcheck', false);
          return domNode;
        }
      }, {
        key: 'formats',
        value: function formats() {
          return true;
        }
      }]);

      return CodeBlock;
    }(_block2.default);

    CodeBlock.blotName = 'code-block';
    CodeBlock.tagName = 'PRE';
    CodeBlock.TAB = '  ';

    exports.Code = Code;
    exports.default = CodeBlock;

    /***/ }),
    /* 14 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _quillDelta = __webpack_require__(2);

    var _quillDelta2 = _interopRequireDefault(_quillDelta);

    var _op = __webpack_require__(20);

    var _op2 = _interopRequireDefault(_op);

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    var _code = __webpack_require__(13);

    var _code2 = _interopRequireDefault(_code);

    var _cursor = __webpack_require__(24);

    var _cursor2 = _interopRequireDefault(_cursor);

    var _block = __webpack_require__(4);

    var _block2 = _interopRequireDefault(_block);

    var _break = __webpack_require__(16);

    var _break2 = _interopRequireDefault(_break);

    var _clone = __webpack_require__(21);

    var _clone2 = _interopRequireDefault(_clone);

    var _deepEqual = __webpack_require__(11);

    var _deepEqual2 = _interopRequireDefault(_deepEqual);

    var _extend = __webpack_require__(3);

    var _extend2 = _interopRequireDefault(_extend);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var ASCII = /^[ -~]*$/;

    var Editor = function () {
      function Editor(scroll) {
        _classCallCheck(this, Editor);

        this.scroll = scroll;
        this.delta = this.getDelta();
      }

      _createClass(Editor, [{
        key: 'applyDelta',
        value: function applyDelta(delta) {
          var _this = this;

          var consumeNextNewline = false;
          this.scroll.update();
          var scrollLength = this.scroll.length();
          this.scroll.batchStart();
          delta = normalizeDelta(delta);
          delta.reduce(function (index, op) {
            var length = op.retain || op.delete || op.insert.length || 1;
            var attributes = op.attributes || {};
            if (op.insert != null) {
              if (typeof op.insert === 'string') {
                var text = op.insert;
                if (text.endsWith('\n') && consumeNextNewline) {
                  consumeNextNewline = false;
                  text = text.slice(0, -1);
                }
                if (index >= scrollLength && !text.endsWith('\n')) {
                  consumeNextNewline = true;
                }
                _this.scroll.insertAt(index, text);

                var _scroll$line = _this.scroll.line(index),
                    _scroll$line2 = _slicedToArray(_scroll$line, 2),
                    line = _scroll$line2[0],
                    offset = _scroll$line2[1];

                var formats = (0, _extend2.default)({}, (0, _block.bubbleFormats)(line));
                if (line instanceof _block2.default) {
                  var _line$descendant = line.descendant(_parchment2.default.Leaf, offset),
                      _line$descendant2 = _slicedToArray(_line$descendant, 1),
                      leaf = _line$descendant2[0];

                  formats = (0, _extend2.default)(formats, (0, _block.bubbleFormats)(leaf));
                }
                attributes = _op2.default.attributes.diff(formats, attributes) || {};
              } else if (_typeof(op.insert) === 'object') {
                var key = Object.keys(op.insert)[0]; // There should only be one key
                if (key == null) return index;
                _this.scroll.insertAt(index, key, op.insert[key]);
              }
              scrollLength += length;
            }
            Object.keys(attributes).forEach(function (name) {
              _this.scroll.formatAt(index, length, name, attributes[name]);
            });
            return index + length;
          }, 0);
          delta.reduce(function (index, op) {
            if (typeof op.delete === 'number') {
              _this.scroll.deleteAt(index, op.delete);
              return index;
            }
            return index + (op.retain || op.insert.length || 1);
          }, 0);
          this.scroll.batchEnd();
          return this.update(delta);
        }
      }, {
        key: 'deleteText',
        value: function deleteText(index, length) {
          this.scroll.deleteAt(index, length);
          return this.update(new _quillDelta2.default().retain(index).delete(length));
        }
      }, {
        key: 'formatLine',
        value: function formatLine(index, length) {
          var _this2 = this;

          var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

          this.scroll.update();
          Object.keys(formats).forEach(function (format) {
            if (_this2.scroll.whitelist != null && !_this2.scroll.whitelist[format]) return;
            var lines = _this2.scroll.lines(index, Math.max(length, 1));
            var lengthRemaining = length;
            lines.forEach(function (line) {
              var lineLength = line.length();
              if (!(line instanceof _code2.default)) {
                line.format(format, formats[format]);
              } else {
                var codeIndex = index - line.offset(_this2.scroll);
                var codeLength = line.newlineIndex(codeIndex + lengthRemaining) - codeIndex + 1;
                line.formatAt(codeIndex, codeLength, format, formats[format]);
              }
              lengthRemaining -= lineLength;
            });
          });
          this.scroll.optimize();
          return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
        }
      }, {
        key: 'formatText',
        value: function formatText(index, length) {
          var _this3 = this;

          var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

          Object.keys(formats).forEach(function (format) {
            _this3.scroll.formatAt(index, length, format, formats[format]);
          });
          return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
        }
      }, {
        key: 'getContents',
        value: function getContents(index, length) {
          return this.delta.slice(index, index + length);
        }
      }, {
        key: 'getDelta',
        value: function getDelta() {
          return this.scroll.lines().reduce(function (delta, line) {
            return delta.concat(line.delta());
          }, new _quillDelta2.default());
        }
      }, {
        key: 'getFormat',
        value: function getFormat(index) {
          var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

          var lines = [],
              leaves = [];
          if (length === 0) {
            this.scroll.path(index).forEach(function (path) {
              var _path = _slicedToArray(path, 1),
                  blot = _path[0];

              if (blot instanceof _block2.default) {
                lines.push(blot);
              } else if (blot instanceof _parchment2.default.Leaf) {
                leaves.push(blot);
              }
            });
          } else {
            lines = this.scroll.lines(index, length);
            leaves = this.scroll.descendants(_parchment2.default.Leaf, index, length);
          }
          var formatsArr = [lines, leaves].map(function (blots) {
            if (blots.length === 0) return {};
            var formats = (0, _block.bubbleFormats)(blots.shift());
            while (Object.keys(formats).length > 0) {
              var blot = blots.shift();
              if (blot == null) return formats;
              formats = combineFormats((0, _block.bubbleFormats)(blot), formats);
            }
            return formats;
          });
          return _extend2.default.apply(_extend2.default, formatsArr);
        }
      }, {
        key: 'getText',
        value: function getText(index, length) {
          return this.getContents(index, length).filter(function (op) {
            return typeof op.insert === 'string';
          }).map(function (op) {
            return op.insert;
          }).join('');
        }
      }, {
        key: 'insertEmbed',
        value: function insertEmbed(index, embed, value) {
          this.scroll.insertAt(index, embed, value);
          return this.update(new _quillDelta2.default().retain(index).insert(_defineProperty({}, embed, value)));
        }
      }, {
        key: 'insertText',
        value: function insertText(index, text) {
          var _this4 = this;

          var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

          text = text.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
          this.scroll.insertAt(index, text);
          Object.keys(formats).forEach(function (format) {
            _this4.scroll.formatAt(index, text.length, format, formats[format]);
          });
          return this.update(new _quillDelta2.default().retain(index).insert(text, (0, _clone2.default)(formats)));
        }
      }, {
        key: 'isBlank',
        value: function isBlank() {
          if (this.scroll.children.length == 0) return true;
          if (this.scroll.children.length > 1) return false;
          var block = this.scroll.children.head;
          if (block.statics.blotName !== _block2.default.blotName) return false;
          if (block.children.length > 1) return false;
          return block.children.head instanceof _break2.default;
        }
      }, {
        key: 'removeFormat',
        value: function removeFormat(index, length) {
          var text = this.getText(index, length);

          var _scroll$line3 = this.scroll.line(index + length),
              _scroll$line4 = _slicedToArray(_scroll$line3, 2),
              line = _scroll$line4[0],
              offset = _scroll$line4[1];

          var suffixLength = 0,
              suffix = new _quillDelta2.default();
          if (line != null) {
            if (!(line instanceof _code2.default)) {
              suffixLength = line.length() - offset;
            } else {
              suffixLength = line.newlineIndex(offset) - offset + 1;
            }
            suffix = line.delta().slice(offset, offset + suffixLength - 1).insert('\n');
          }
          var contents = this.getContents(index, length + suffixLength);
          var diff = contents.diff(new _quillDelta2.default().insert(text).concat(suffix));
          var delta = new _quillDelta2.default().retain(index).concat(diff);
          return this.applyDelta(delta);
        }
      }, {
        key: 'update',
        value: function update(change) {
          var mutations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
          var cursorIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

          var oldDelta = this.delta;
          if (mutations.length === 1 && mutations[0].type === 'characterData' && mutations[0].target.data.match(ASCII) && _parchment2.default.find(mutations[0].target)) {
            // Optimization for character changes
            var textBlot = _parchment2.default.find(mutations[0].target);
            var formats = (0, _block.bubbleFormats)(textBlot);
            var index = textBlot.offset(this.scroll);
            var oldValue = mutations[0].oldValue.replace(_cursor2.default.CONTENTS, '');
            var oldText = new _quillDelta2.default().insert(oldValue);
            var newText = new _quillDelta2.default().insert(textBlot.value());
            var diffDelta = new _quillDelta2.default().retain(index).concat(oldText.diff(newText, cursorIndex));
            change = diffDelta.reduce(function (delta, op) {
              if (op.insert) {
                return delta.insert(op.insert, formats);
              } else {
                return delta.push(op);
              }
            }, new _quillDelta2.default());
            this.delta = oldDelta.compose(change);
          } else {
            this.delta = this.getDelta();
            if (!change || !(0, _deepEqual2.default)(oldDelta.compose(change), this.delta)) {
              change = oldDelta.diff(this.delta, cursorIndex);
            }
          }
          return change;
        }
      }]);

      return Editor;
    }();

    function combineFormats(formats, combined) {
      return Object.keys(combined).reduce(function (merged, name) {
        if (formats[name] == null) return merged;
        if (combined[name] === formats[name]) {
          merged[name] = combined[name];
        } else if (Array.isArray(combined[name])) {
          if (combined[name].indexOf(formats[name]) < 0) {
            merged[name] = combined[name].concat([formats[name]]);
          }
        } else {
          merged[name] = [combined[name], formats[name]];
        }
        return merged;
      }, {});
    }

    function normalizeDelta(delta) {
      return delta.reduce(function (delta, op) {
        if (op.insert === 1) {
          var attributes = (0, _clone2.default)(op.attributes);
          delete attributes['image'];
          return delta.insert({ image: op.attributes.image }, attributes);
        }
        if (op.attributes != null && (op.attributes.list === true || op.attributes.bullet === true)) {
          op = (0, _clone2.default)(op);
          if (op.attributes.list) {
            op.attributes.list = 'ordered';
          } else {
            op.attributes.list = 'bullet';
            delete op.attributes.bullet;
          }
        }
        if (typeof op.insert === 'string') {
          var text = op.insert.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
          return delta.insert(text, op.attributes);
        }
        return delta.push(op);
      }, new _quillDelta2.default());
    }

    exports.default = Editor;

    /***/ }),
    /* 15 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.Range = undefined;

    var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    var _clone = __webpack_require__(21);

    var _clone2 = _interopRequireDefault(_clone);

    var _deepEqual = __webpack_require__(11);

    var _deepEqual2 = _interopRequireDefault(_deepEqual);

    var _emitter3 = __webpack_require__(8);

    var _emitter4 = _interopRequireDefault(_emitter3);

    var _logger = __webpack_require__(10);

    var _logger2 = _interopRequireDefault(_logger);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var debug = (0, _logger2.default)('quill:selection');

    var Range = function Range(index) {
      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      _classCallCheck(this, Range);

      this.index = index;
      this.length = length;
    };

    var Selection = function () {
      function Selection(scroll, emitter) {
        var _this = this;

        _classCallCheck(this, Selection);

        this.emitter = emitter;
        this.scroll = scroll;
        this.composing = false;
        this.mouseDown = false;
        this.root = this.scroll.domNode;
        this.cursor = _parchment2.default.create('cursor', this);
        // savedRange is last non-null range
        this.lastRange = this.savedRange = new Range(0, 0);
        this.handleComposition();
        this.handleDragging();
        this.emitter.listenDOM('selectionchange', document, function () {
          if (!_this.mouseDown) {
            setTimeout(_this.update.bind(_this, _emitter4.default.sources.USER), 1);
          }
        });
        this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type, delta) {
          if (type === _emitter4.default.events.TEXT_CHANGE && delta.length() > 0) {
            _this.update(_emitter4.default.sources.SILENT);
          }
        });
        this.emitter.on(_emitter4.default.events.SCROLL_BEFORE_UPDATE, function () {
          if (!_this.hasFocus()) return;
          var native = _this.getNativeRange();
          if (native == null) return;
          if (native.start.node === _this.cursor.textNode) return; // cursor.restore() will handle
          // TODO unclear if this has negative side effects
          _this.emitter.once(_emitter4.default.events.SCROLL_UPDATE, function () {
            try {
              _this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);
            } catch (ignored) {}
          });
        });
        this.emitter.on(_emitter4.default.events.SCROLL_OPTIMIZE, function (mutations, context) {
          if (context.range) {
            var _context$range = context.range,
                startNode = _context$range.startNode,
                startOffset = _context$range.startOffset,
                endNode = _context$range.endNode,
                endOffset = _context$range.endOffset;

            _this.setNativeRange(startNode, startOffset, endNode, endOffset);
          }
        });
        this.update(_emitter4.default.sources.SILENT);
      }

      _createClass(Selection, [{
        key: 'handleComposition',
        value: function handleComposition() {
          var _this2 = this;

          this.root.addEventListener('compositionstart', function () {
            _this2.composing = true;
          });
          this.root.addEventListener('compositionend', function () {
            _this2.composing = false;
            if (_this2.cursor.parent) {
              var range = _this2.cursor.restore();
              if (!range) return;
              setTimeout(function () {
                _this2.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);
              }, 1);
            }
          });
        }
      }, {
        key: 'handleDragging',
        value: function handleDragging() {
          var _this3 = this;

          this.emitter.listenDOM('mousedown', document.body, function () {
            _this3.mouseDown = true;
          });
          this.emitter.listenDOM('mouseup', document.body, function () {
            _this3.mouseDown = false;
            _this3.update(_emitter4.default.sources.USER);
          });
        }
      }, {
        key: 'focus',
        value: function focus() {
          if (this.hasFocus()) return;
          this.root.focus();
          this.setRange(this.savedRange);
        }
      }, {
        key: 'format',
        value: function format(_format, value) {
          if (this.scroll.whitelist != null && !this.scroll.whitelist[_format]) return;
          this.scroll.update();
          var nativeRange = this.getNativeRange();
          if (nativeRange == null || !nativeRange.native.collapsed || _parchment2.default.query(_format, _parchment2.default.Scope.BLOCK)) return;
          if (nativeRange.start.node !== this.cursor.textNode) {
            var blot = _parchment2.default.find(nativeRange.start.node, false);
            if (blot == null) return;
            // TODO Give blot ability to not split
            if (blot instanceof _parchment2.default.Leaf) {
              var after = blot.split(nativeRange.start.offset);
              blot.parent.insertBefore(this.cursor, after);
            } else {
              blot.insertBefore(this.cursor, nativeRange.start.node); // Should never happen
            }
            this.cursor.attach();
          }
          this.cursor.format(_format, value);
          this.scroll.optimize();
          this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);
          this.update();
        }
      }, {
        key: 'getBounds',
        value: function getBounds(index) {
          var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

          var scrollLength = this.scroll.length();
          index = Math.min(index, scrollLength - 1);
          length = Math.min(index + length, scrollLength - 1) - index;
          var node = void 0,
              _scroll$leaf = this.scroll.leaf(index),
              _scroll$leaf2 = _slicedToArray(_scroll$leaf, 2),
              leaf = _scroll$leaf2[0],
              offset = _scroll$leaf2[1];
          if (leaf == null) return null;

          var _leaf$position = leaf.position(offset, true);

          var _leaf$position2 = _slicedToArray(_leaf$position, 2);

          node = _leaf$position2[0];
          offset = _leaf$position2[1];

          var range = document.createRange();
          if (length > 0) {
            range.setStart(node, offset);

            var _scroll$leaf3 = this.scroll.leaf(index + length);

            var _scroll$leaf4 = _slicedToArray(_scroll$leaf3, 2);

            leaf = _scroll$leaf4[0];
            offset = _scroll$leaf4[1];

            if (leaf == null) return null;

            var _leaf$position3 = leaf.position(offset, true);

            var _leaf$position4 = _slicedToArray(_leaf$position3, 2);

            node = _leaf$position4[0];
            offset = _leaf$position4[1];

            range.setEnd(node, offset);
            return range.getBoundingClientRect();
          } else {
            var side = 'left';
            var rect = void 0;
            if (node instanceof Text) {
              if (offset < node.data.length) {
                range.setStart(node, offset);
                range.setEnd(node, offset + 1);
              } else {
                range.setStart(node, offset - 1);
                range.setEnd(node, offset);
                side = 'right';
              }
              rect = range.getBoundingClientRect();
            } else {
              rect = leaf.domNode.getBoundingClientRect();
              if (offset > 0) side = 'right';
            }
            return {
              bottom: rect.top + rect.height,
              height: rect.height,
              left: rect[side],
              right: rect[side],
              top: rect.top,
              width: 0
            };
          }
        }
      }, {
        key: 'getNativeRange',
        value: function getNativeRange() {
          var selection = document.getSelection();
          if (selection == null || selection.rangeCount <= 0) return null;
          var nativeRange = selection.getRangeAt(0);
          if (nativeRange == null) return null;
          var range = this.normalizeNative(nativeRange);
          debug.info('getNativeRange', range);
          return range;
        }
      }, {
        key: 'getRange',
        value: function getRange() {
          var normalized = this.getNativeRange();
          if (normalized == null) return [null, null];
          var range = this.normalizedToRange(normalized);
          return [range, normalized];
        }
      }, {
        key: 'hasFocus',
        value: function hasFocus() {
          return document.activeElement === this.root;
        }
      }, {
        key: 'normalizedToRange',
        value: function normalizedToRange(range) {
          var _this4 = this;

          var positions = [[range.start.node, range.start.offset]];
          if (!range.native.collapsed) {
            positions.push([range.end.node, range.end.offset]);
          }
          var indexes = positions.map(function (position) {
            var _position = _slicedToArray(position, 2),
                node = _position[0],
                offset = _position[1];

            var blot = _parchment2.default.find(node, true);
            var index = blot.offset(_this4.scroll);
            if (offset === 0) {
              return index;
            } else if (blot instanceof _parchment2.default.Container) {
              return index + blot.length();
            } else {
              return index + blot.index(node, offset);
            }
          });
          var end = Math.min(Math.max.apply(Math, _toConsumableArray(indexes)), this.scroll.length() - 1);
          var start = Math.min.apply(Math, [end].concat(_toConsumableArray(indexes)));
          return new Range(start, end - start);
        }
      }, {
        key: 'normalizeNative',
        value: function normalizeNative(nativeRange) {
          if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {
            return null;
          }
          var range = {
            start: { node: nativeRange.startContainer, offset: nativeRange.startOffset },
            end: { node: nativeRange.endContainer, offset: nativeRange.endOffset },
            native: nativeRange
          };
          [range.start, range.end].forEach(function (position) {
            var node = position.node,
                offset = position.offset;
            while (!(node instanceof Text) && node.childNodes.length > 0) {
              if (node.childNodes.length > offset) {
                node = node.childNodes[offset];
                offset = 0;
              } else if (node.childNodes.length === offset) {
                node = node.lastChild;
                offset = node instanceof Text ? node.data.length : node.childNodes.length + 1;
              } else {
                break;
              }
            }
            position.node = node, position.offset = offset;
          });
          return range;
        }
      }, {
        key: 'rangeToNative',
        value: function rangeToNative(range) {
          var _this5 = this;

          var indexes = range.collapsed ? [range.index] : [range.index, range.index + range.length];
          var args = [];
          var scrollLength = this.scroll.length();
          indexes.forEach(function (index, i) {
            index = Math.min(scrollLength - 1, index);
            var node = void 0,
                _scroll$leaf5 = _this5.scroll.leaf(index),
                _scroll$leaf6 = _slicedToArray(_scroll$leaf5, 2),
                leaf = _scroll$leaf6[0],
                offset = _scroll$leaf6[1];
            var _leaf$position5 = leaf.position(offset, i !== 0);

            var _leaf$position6 = _slicedToArray(_leaf$position5, 2);

            node = _leaf$position6[0];
            offset = _leaf$position6[1];

            args.push(node, offset);
          });
          if (args.length < 2) {
            args = args.concat(args);
          }
          return args;
        }
      }, {
        key: 'scrollIntoView',
        value: function scrollIntoView(scrollingContainer) {
          var range = this.lastRange;
          if (range == null) return;
          var bounds = this.getBounds(range.index, range.length);
          if (bounds == null) return;
          var limit = this.scroll.length() - 1;

          var _scroll$line = this.scroll.line(Math.min(range.index, limit)),
              _scroll$line2 = _slicedToArray(_scroll$line, 1),
              first = _scroll$line2[0];

          var last = first;
          if (range.length > 0) {
            var _scroll$line3 = this.scroll.line(Math.min(range.index + range.length, limit));

            var _scroll$line4 = _slicedToArray(_scroll$line3, 1);

            last = _scroll$line4[0];
          }
          if (first == null || last == null) return;
          var scrollBounds = scrollingContainer.getBoundingClientRect();
          if (bounds.top < scrollBounds.top) {
            scrollingContainer.scrollTop -= scrollBounds.top - bounds.top;
          } else if (bounds.bottom > scrollBounds.bottom) {
            scrollingContainer.scrollTop += bounds.bottom - scrollBounds.bottom;
          }
        }
      }, {
        key: 'setNativeRange',
        value: function setNativeRange(startNode, startOffset) {
          var endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;
          var endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;
          var force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

          debug.info('setNativeRange', startNode, startOffset, endNode, endOffset);
          if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {
            return;
          }
          var selection = document.getSelection();
          if (selection == null) return;
          if (startNode != null) {
            if (!this.hasFocus()) this.root.focus();
            var native = (this.getNativeRange() || {}).native;
            if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {

              if (startNode.tagName == "BR") {
                startOffset = [].indexOf.call(startNode.parentNode.childNodes, startNode);
                startNode = startNode.parentNode;
              }
              if (endNode.tagName == "BR") {
                endOffset = [].indexOf.call(endNode.parentNode.childNodes, endNode);
                endNode = endNode.parentNode;
              }
              var range = document.createRange();
              range.setStart(startNode, startOffset);
              range.setEnd(endNode, endOffset);
              selection.removeAllRanges();
              selection.addRange(range);
            }
          } else {
            selection.removeAllRanges();
            this.root.blur();
            document.body.focus(); // root.blur() not enough on IE11+Travis+SauceLabs (but not local VMs)
          }
        }
      }, {
        key: 'setRange',
        value: function setRange(range) {
          var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;

          if (typeof force === 'string') {
            source = force;
            force = false;
          }
          debug.info('setRange', range);
          if (range != null) {
            var args = this.rangeToNative(range);
            this.setNativeRange.apply(this, _toConsumableArray(args).concat([force]));
          } else {
            this.setNativeRange(null);
          }
          this.update(source);
        }
      }, {
        key: 'update',
        value: function update() {
          var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;

          var oldRange = this.lastRange;

          var _getRange = this.getRange(),
              _getRange2 = _slicedToArray(_getRange, 2),
              lastRange = _getRange2[0],
              nativeRange = _getRange2[1];

          this.lastRange = lastRange;
          if (this.lastRange != null) {
            this.savedRange = this.lastRange;
          }
          if (!(0, _deepEqual2.default)(oldRange, this.lastRange)) {
            var _emitter;

            if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {
              this.cursor.restore();
            }
            var args = [_emitter4.default.events.SELECTION_CHANGE, (0, _clone2.default)(this.lastRange), (0, _clone2.default)(oldRange), source];
            (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
            if (source !== _emitter4.default.sources.SILENT) {
              var _emitter2;

              (_emitter2 = this.emitter).emit.apply(_emitter2, args);
            }
          }
        }
      }]);

      return Selection;
    }();

    function contains(parent, descendant) {
      try {
        // Firefox inserts inaccessible nodes around video elements
        descendant.parentNode;
      } catch (e) {
        return false;
      }
      // IE11 has bug with Text nodes
      // https://connect.microsoft.com/IE/feedback/details/780874/node-contains-is-incorrect
      if (descendant instanceof Text) {
        descendant = descendant.parentNode;
      }
      return parent.contains(descendant);
    }

    exports.Range = Range;
    exports.default = Selection;

    /***/ }),
    /* 16 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var Break = function (_Parchment$Embed) {
      _inherits(Break, _Parchment$Embed);

      function Break() {
        _classCallCheck(this, Break);

        return _possibleConstructorReturn(this, (Break.__proto__ || Object.getPrototypeOf(Break)).apply(this, arguments));
      }

      _createClass(Break, [{
        key: 'insertInto',
        value: function insertInto(parent, ref) {
          if (parent.children.length === 0) {
            _get(Break.prototype.__proto__ || Object.getPrototypeOf(Break.prototype), 'insertInto', this).call(this, parent, ref);
          } else {
            this.remove();
          }
        }
      }, {
        key: 'length',
        value: function length() {
          return 0;
        }
      }, {
        key: 'value',
        value: function value() {
          return '';
        }
      }], [{
        key: 'value',
        value: function value() {
          return undefined;
        }
      }]);

      return Break;
    }(_parchment2.default.Embed);

    Break.blotName = 'break';
    Break.tagName = 'BR';

    exports.default = Break;

    /***/ }),
    /* 17 */
    /***/ (function(module, exports, __webpack_require__) {

    var __extends = (this && this.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    var linked_list_1 = __webpack_require__(44);
    var shadow_1 = __webpack_require__(30);
    var Registry = __webpack_require__(1);
    var ContainerBlot = /** @class */ (function (_super) {
        __extends(ContainerBlot, _super);
        function ContainerBlot(domNode) {
            var _this = _super.call(this, domNode) || this;
            _this.build();
            return _this;
        }
        ContainerBlot.prototype.appendChild = function (other) {
            this.insertBefore(other);
        };
        ContainerBlot.prototype.attach = function () {
            _super.prototype.attach.call(this);
            this.children.forEach(function (child) {
                child.attach();
            });
        };
        ContainerBlot.prototype.build = function () {
            var _this = this;
            this.children = new linked_list_1.default();
            // Need to be reversed for if DOM nodes already in order
            [].slice
                .call(this.domNode.childNodes)
                .reverse()
                .forEach(function (node) {
                try {
                    var child = makeBlot(node);
                    _this.insertBefore(child, _this.children.head || undefined);
                }
                catch (err) {
                    if (err instanceof Registry.ParchmentError)
                        return;
                    else
                        throw err;
                }
            });
        };
        ContainerBlot.prototype.deleteAt = function (index, length) {
            if (index === 0 && length === this.length()) {
                return this.remove();
            }
            this.children.forEachAt(index, length, function (child, offset, length) {
                child.deleteAt(offset, length);
            });
        };
        ContainerBlot.prototype.descendant = function (criteria, index) {
            var _a = this.children.find(index), child = _a[0], offset = _a[1];
            if ((criteria.blotName == null && criteria(child)) ||
                (criteria.blotName != null && child instanceof criteria)) {
                return [child, offset];
            }
            else if (child instanceof ContainerBlot) {
                return child.descendant(criteria, offset);
            }
            else {
                return [null, -1];
            }
        };
        ContainerBlot.prototype.descendants = function (criteria, index, length) {
            if (index === void 0) { index = 0; }
            if (length === void 0) { length = Number.MAX_VALUE; }
            var descendants = [];
            var lengthLeft = length;
            this.children.forEachAt(index, length, function (child, index, length) {
                if ((criteria.blotName == null && criteria(child)) ||
                    (criteria.blotName != null && child instanceof criteria)) {
                    descendants.push(child);
                }
                if (child instanceof ContainerBlot) {
                    descendants = descendants.concat(child.descendants(criteria, index, lengthLeft));
                }
                lengthLeft -= length;
            });
            return descendants;
        };
        ContainerBlot.prototype.detach = function () {
            this.children.forEach(function (child) {
                child.detach();
            });
            _super.prototype.detach.call(this);
        };
        ContainerBlot.prototype.formatAt = function (index, length, name, value) {
            this.children.forEachAt(index, length, function (child, offset, length) {
                child.formatAt(offset, length, name, value);
            });
        };
        ContainerBlot.prototype.insertAt = function (index, value, def) {
            var _a = this.children.find(index), child = _a[0], offset = _a[1];
            if (child) {
                child.insertAt(offset, value, def);
            }
            else {
                var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
                this.appendChild(blot);
            }
        };
        ContainerBlot.prototype.insertBefore = function (childBlot, refBlot) {
            if (this.statics.allowedChildren != null &&
                !this.statics.allowedChildren.some(function (child) {
                    return childBlot instanceof child;
                })) {
                throw new Registry.ParchmentError("Cannot insert " + childBlot.statics.blotName + " into " + this.statics.blotName);
            }
            childBlot.insertInto(this, refBlot);
        };
        ContainerBlot.prototype.length = function () {
            return this.children.reduce(function (memo, child) {
                return memo + child.length();
            }, 0);
        };
        ContainerBlot.prototype.moveChildren = function (targetParent, refNode) {
            this.children.forEach(function (child) {
                targetParent.insertBefore(child, refNode);
            });
        };
        ContainerBlot.prototype.optimize = function (context) {
            _super.prototype.optimize.call(this, context);
            if (this.children.length === 0) {
                if (this.statics.defaultChild != null) {
                    var child = Registry.create(this.statics.defaultChild);
                    this.appendChild(child);
                    child.optimize(context);
                }
                else {
                    this.remove();
                }
            }
        };
        ContainerBlot.prototype.path = function (index, inclusive) {
            if (inclusive === void 0) { inclusive = false; }
            var _a = this.children.find(index, inclusive), child = _a[0], offset = _a[1];
            var position = [[this, index]];
            if (child instanceof ContainerBlot) {
                return position.concat(child.path(offset, inclusive));
            }
            else if (child != null) {
                position.push([child, offset]);
            }
            return position;
        };
        ContainerBlot.prototype.removeChild = function (child) {
            this.children.remove(child);
        };
        ContainerBlot.prototype.replace = function (target) {
            if (target instanceof ContainerBlot) {
                target.moveChildren(this);
            }
            _super.prototype.replace.call(this, target);
        };
        ContainerBlot.prototype.split = function (index, force) {
            if (force === void 0) { force = false; }
            if (!force) {
                if (index === 0)
                    return this;
                if (index === this.length())
                    return this.next;
            }
            var after = this.clone();
            this.parent.insertBefore(after, this.next);
            this.children.forEachAt(index, this.length(), function (child, offset, length) {
                child = child.split(offset, force);
                after.appendChild(child);
            });
            return after;
        };
        ContainerBlot.prototype.unwrap = function () {
            this.moveChildren(this.parent, this.next);
            this.remove();
        };
        ContainerBlot.prototype.update = function (mutations, context) {
            var _this = this;
            var addedNodes = [];
            var removedNodes = [];
            mutations.forEach(function (mutation) {
                if (mutation.target === _this.domNode && mutation.type === 'childList') {
                    addedNodes.push.apply(addedNodes, mutation.addedNodes);
                    removedNodes.push.apply(removedNodes, mutation.removedNodes);
                }
            });
            removedNodes.forEach(function (node) {
                // Check node has actually been removed
                // One exception is Chrome does not immediately remove IFRAMEs
                // from DOM but MutationRecord is correct in its reported removal
                if (node.parentNode != null &&
                    // @ts-ignore
                    node.tagName !== 'IFRAME' &&
                    document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
                    return;
                }
                var blot = Registry.find(node);
                if (blot == null)
                    return;
                if (blot.domNode.parentNode == null || blot.domNode.parentNode === _this.domNode) {
                    blot.detach();
                }
            });
            addedNodes
                .filter(function (node) {
                return node.parentNode == _this.domNode;
            })
                .sort(function (a, b) {
                if (a === b)
                    return 0;
                if (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {
                    return 1;
                }
                return -1;
            })
                .forEach(function (node) {
                var refBlot = null;
                if (node.nextSibling != null) {
                    refBlot = Registry.find(node.nextSibling);
                }
                var blot = makeBlot(node);
                if (blot.next != refBlot || blot.next == null) {
                    if (blot.parent != null) {
                        blot.parent.removeChild(_this);
                    }
                    _this.insertBefore(blot, refBlot || undefined);
                }
            });
        };
        return ContainerBlot;
    }(shadow_1.default));
    function makeBlot(node) {
        var blot = Registry.find(node);
        if (blot == null) {
            try {
                blot = Registry.create(node);
            }
            catch (e) {
                blot = Registry.create(Registry.Scope.INLINE);
                [].slice.call(node.childNodes).forEach(function (child) {
                    // @ts-ignore
                    blot.domNode.appendChild(child);
                });
                if (node.parentNode) {
                    node.parentNode.replaceChild(blot.domNode, node);
                }
                blot.attach();
            }
        }
        return blot;
    }
    exports.default = ContainerBlot;


    /***/ }),
    /* 18 */
    /***/ (function(module, exports, __webpack_require__) {

    var __extends = (this && this.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    var attributor_1 = __webpack_require__(12);
    var store_1 = __webpack_require__(31);
    var container_1 = __webpack_require__(17);
    var Registry = __webpack_require__(1);
    var FormatBlot = /** @class */ (function (_super) {
        __extends(FormatBlot, _super);
        function FormatBlot(domNode) {
            var _this = _super.call(this, domNode) || this;
            _this.attributes = new store_1.default(_this.domNode);
            return _this;
        }
        FormatBlot.formats = function (domNode) {
            if (typeof this.tagName === 'string') {
                return true;
            }
            else if (Array.isArray(this.tagName)) {
                return domNode.tagName.toLowerCase();
            }
            return undefined;
        };
        FormatBlot.prototype.format = function (name, value) {
            var format = Registry.query(name);
            if (format instanceof attributor_1.default) {
                this.attributes.attribute(format, value);
            }
            else if (value) {
                if (format != null && (name !== this.statics.blotName || this.formats()[name] !== value)) {
                    this.replaceWith(name, value);
                }
            }
        };
        FormatBlot.prototype.formats = function () {
            var formats = this.attributes.values();
            var format = this.statics.formats(this.domNode);
            if (format != null) {
                formats[this.statics.blotName] = format;
            }
            return formats;
        };
        FormatBlot.prototype.replaceWith = function (name, value) {
            var replacement = _super.prototype.replaceWith.call(this, name, value);
            this.attributes.copy(replacement);
            return replacement;
        };
        FormatBlot.prototype.update = function (mutations, context) {
            var _this = this;
            _super.prototype.update.call(this, mutations, context);
            if (mutations.some(function (mutation) {
                return mutation.target === _this.domNode && mutation.type === 'attributes';
            })) {
                this.attributes.build();
            }
        };
        FormatBlot.prototype.wrap = function (name, value) {
            var wrapper = _super.prototype.wrap.call(this, name, value);
            if (wrapper instanceof FormatBlot && wrapper.statics.scope === this.statics.scope) {
                this.attributes.move(wrapper);
            }
            return wrapper;
        };
        return FormatBlot;
    }(container_1.default));
    exports.default = FormatBlot;


    /***/ }),
    /* 19 */
    /***/ (function(module, exports, __webpack_require__) {

    var __extends = (this && this.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    var shadow_1 = __webpack_require__(30);
    var Registry = __webpack_require__(1);
    var LeafBlot = /** @class */ (function (_super) {
        __extends(LeafBlot, _super);
        function LeafBlot() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LeafBlot.value = function (domNode) {
            return true;
        };
        LeafBlot.prototype.index = function (node, offset) {
            if (this.domNode === node ||
                this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
                return Math.min(offset, 1);
            }
            return -1;
        };
        LeafBlot.prototype.position = function (index, inclusive) {
            var offset = [].indexOf.call(this.parent.domNode.childNodes, this.domNode);
            if (index > 0)
                offset += 1;
            return [this.parent.domNode, offset];
        };
        LeafBlot.prototype.value = function () {
            var _a;
            return _a = {}, _a[this.statics.blotName] = this.statics.value(this.domNode) || true, _a;
        };
        LeafBlot.scope = Registry.Scope.INLINE_BLOT;
        return LeafBlot;
    }(shadow_1.default));
    exports.default = LeafBlot;


    /***/ }),
    /* 20 */
    /***/ (function(module, exports, __webpack_require__) {

    var equal = __webpack_require__(11);
    var extend = __webpack_require__(3);


    var lib = {
      attributes: {
        compose: function (a, b, keepNull) {
          if (typeof a !== 'object') a = {};
          if (typeof b !== 'object') b = {};
          var attributes = extend(true, {}, b);
          if (!keepNull) {
            attributes = Object.keys(attributes).reduce(function (copy, key) {
              if (attributes[key] != null) {
                copy[key] = attributes[key];
              }
              return copy;
            }, {});
          }
          for (var key in a) {
            if (a[key] !== undefined && b[key] === undefined) {
              attributes[key] = a[key];
            }
          }
          return Object.keys(attributes).length > 0 ? attributes : undefined;
        },

        diff: function(a, b) {
          if (typeof a !== 'object') a = {};
          if (typeof b !== 'object') b = {};
          var attributes = Object.keys(a).concat(Object.keys(b)).reduce(function (attributes, key) {
            if (!equal(a[key], b[key])) {
              attributes[key] = b[key] === undefined ? null : b[key];
            }
            return attributes;
          }, {});
          return Object.keys(attributes).length > 0 ? attributes : undefined;
        },

        transform: function (a, b, priority) {
          if (typeof a !== 'object') return b;
          if (typeof b !== 'object') return undefined;
          if (!priority) return b;  // b simply overwrites us without priority
          var attributes = Object.keys(b).reduce(function (attributes, key) {
            if (a[key] === undefined) attributes[key] = b[key];  // null is a valid value
            return attributes;
          }, {});
          return Object.keys(attributes).length > 0 ? attributes : undefined;
        }
      },

      iterator: function (ops) {
        return new Iterator(ops);
      },

      length: function (op) {
        if (typeof op['delete'] === 'number') {
          return op['delete'];
        } else if (typeof op.retain === 'number') {
          return op.retain;
        } else {
          return typeof op.insert === 'string' ? op.insert.length : 1;
        }
      }
    };


    function Iterator(ops) {
      this.ops = ops;
      this.index = 0;
      this.offset = 0;
    }
    Iterator.prototype.hasNext = function () {
      return this.peekLength() < Infinity;
    };

    Iterator.prototype.next = function (length) {
      if (!length) length = Infinity;
      var nextOp = this.ops[this.index];
      if (nextOp) {
        var offset = this.offset;
        var opLength = lib.length(nextOp);
        if (length >= opLength - offset) {
          length = opLength - offset;
          this.index += 1;
          this.offset = 0;
        } else {
          this.offset += length;
        }
        if (typeof nextOp['delete'] === 'number') {
          return { 'delete': length };
        } else {
          var retOp = {};
          if (nextOp.attributes) {
            retOp.attributes = nextOp.attributes;
          }
          if (typeof nextOp.retain === 'number') {
            retOp.retain = length;
          } else if (typeof nextOp.insert === 'string') {
            retOp.insert = nextOp.insert.substr(offset, length);
          } else {
            // offset should === 0, length should === 1
            retOp.insert = nextOp.insert;
          }
          return retOp;
        }
      } else {
        return { retain: Infinity };
      }
    };

    Iterator.prototype.peek = function () {
      return this.ops[this.index];
    };

    Iterator.prototype.peekLength = function () {
      if (this.ops[this.index]) {
        // Should never return 0 if our index is being managed correctly
        return lib.length(this.ops[this.index]) - this.offset;
      } else {
        return Infinity;
      }
    };

    Iterator.prototype.peekType = function () {
      if (this.ops[this.index]) {
        if (typeof this.ops[this.index]['delete'] === 'number') {
          return 'delete';
        } else if (typeof this.ops[this.index].retain === 'number') {
          return 'retain';
        } else {
          return 'insert';
        }
      }
      return 'retain';
    };

    Iterator.prototype.rest = function () {
      if (!this.hasNext()) {
        return [];
      } else if (this.offset === 0) {
        return this.ops.slice(this.index);
      } else {
        var offset = this.offset;
        var index = this.index;
        var next = this.next();
        var rest = this.ops.slice(this.index);
        this.offset = offset;
        this.index = index;
        return [next].concat(rest);
      }
    };


    module.exports = lib;


    /***/ }),
    /* 21 */
    /***/ (function(module, exports) {

    var clone = (function() {

    function _instanceof(obj, type) {
      return type != null && obj instanceof type;
    }

    var nativeMap;
    try {
      nativeMap = Map;
    } catch(_) {
      // maybe a reference error because no `Map`. Give it a dummy value that no
      // value will ever be an instanceof.
      nativeMap = function() {};
    }

    var nativeSet;
    try {
      nativeSet = Set;
    } catch(_) {
      nativeSet = function() {};
    }

    var nativePromise;
    try {
      nativePromise = Promise;
    } catch(_) {
      nativePromise = function() {};
    }

    /**
     * Clones (copies) an Object using deep copying.
     *
     * This function supports circular references by default, but if you are certain
     * there are no circular references in your object, you can save some CPU time
     * by calling clone(obj, false).
     *
     * Caution: if `circular` is false and `parent` contains circular references,
     * your program may enter an infinite loop and crash.
     *
     * @param `parent` - the object to be cloned
     * @param `circular` - set to true if the object to be cloned may contain
     *    circular references. (optional - true by default)
     * @param `depth` - set to a number if the object is only to be cloned to
     *    a particular depth. (optional - defaults to Infinity)
     * @param `prototype` - sets the prototype to be used when cloning an object.
     *    (optional - defaults to parent prototype).
     * @param `includeNonEnumerable` - set to true if the non-enumerable properties
     *    should be cloned as well. Non-enumerable properties on the prototype
     *    chain will be ignored. (optional - false by default)
    */
    function clone(parent, circular, depth, prototype, includeNonEnumerable) {
      if (typeof circular === 'object') {
        depth = circular.depth;
        prototype = circular.prototype;
        includeNonEnumerable = circular.includeNonEnumerable;
        circular = circular.circular;
      }
      // maintain two arrays for circular references, where corresponding parents
      // and children have the same index
      var allParents = [];
      var allChildren = [];

      var useBuffer = typeof Buffer != 'undefined';

      if (typeof circular == 'undefined')
        circular = true;

      if (typeof depth == 'undefined')
        depth = Infinity;

      // recurse this function so we don't reset allParents and allChildren
      function _clone(parent, depth) {
        // cloning null always returns null
        if (parent === null)
          return null;

        if (depth === 0)
          return parent;

        var child;
        var proto;
        if (typeof parent != 'object') {
          return parent;
        }

        if (_instanceof(parent, nativeMap)) {
          child = new nativeMap();
        } else if (_instanceof(parent, nativeSet)) {
          child = new nativeSet();
        } else if (_instanceof(parent, nativePromise)) {
          child = new nativePromise(function (resolve, reject) {
            parent.then(function(value) {
              resolve(_clone(value, depth - 1));
            }, function(err) {
              reject(_clone(err, depth - 1));
            });
          });
        } else if (clone.__isArray(parent)) {
          child = [];
        } else if (clone.__isRegExp(parent)) {
          child = new RegExp(parent.source, __getRegExpFlags(parent));
          if (parent.lastIndex) child.lastIndex = parent.lastIndex;
        } else if (clone.__isDate(parent)) {
          child = new Date(parent.getTime());
        } else if (useBuffer && Buffer.isBuffer(parent)) {
          if (Buffer.allocUnsafe) {
            // Node.js >= 4.5.0
            child = Buffer.allocUnsafe(parent.length);
          } else {
            // Older Node.js versions
            child = new Buffer(parent.length);
          }
          parent.copy(child);
          return child;
        } else if (_instanceof(parent, Error)) {
          child = Object.create(parent);
        } else {
          if (typeof prototype == 'undefined') {
            proto = Object.getPrototypeOf(parent);
            child = Object.create(proto);
          }
          else {
            child = Object.create(prototype);
            proto = prototype;
          }
        }

        if (circular) {
          var index = allParents.indexOf(parent);

          if (index != -1) {
            return allChildren[index];
          }
          allParents.push(parent);
          allChildren.push(child);
        }

        if (_instanceof(parent, nativeMap)) {
          parent.forEach(function(value, key) {
            var keyChild = _clone(key, depth - 1);
            var valueChild = _clone(value, depth - 1);
            child.set(keyChild, valueChild);
          });
        }
        if (_instanceof(parent, nativeSet)) {
          parent.forEach(function(value) {
            var entryChild = _clone(value, depth - 1);
            child.add(entryChild);
          });
        }

        for (var i in parent) {
          var attrs;
          if (proto) {
            attrs = Object.getOwnPropertyDescriptor(proto, i);
          }

          if (attrs && attrs.set == null) {
            continue;
          }
          child[i] = _clone(parent[i], depth - 1);
        }

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(parent);
          for (var i = 0; i < symbols.length; i++) {
            // Don't need to worry about cloning a symbol because it is a primitive,
            // like a number or string.
            var symbol = symbols[i];
            var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
            if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
              continue;
            }
            child[symbol] = _clone(parent[symbol], depth - 1);
            if (!descriptor.enumerable) {
              Object.defineProperty(child, symbol, {
                enumerable: false
              });
            }
          }
        }

        if (includeNonEnumerable) {
          var allPropertyNames = Object.getOwnPropertyNames(parent);
          for (var i = 0; i < allPropertyNames.length; i++) {
            var propertyName = allPropertyNames[i];
            var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
            if (descriptor && descriptor.enumerable) {
              continue;
            }
            child[propertyName] = _clone(parent[propertyName], depth - 1);
            Object.defineProperty(child, propertyName, {
              enumerable: false
            });
          }
        }

        return child;
      }

      return _clone(parent, depth);
    }

    /**
     * Simple flat clone using prototype, accepts only objects, usefull for property
     * override on FLAT configuration object (no nested props).
     *
     * USE WITH CAUTION! This may not behave as you wish if you do not know how this
     * works.
     */
    clone.clonePrototype = function clonePrototype(parent) {
      if (parent === null)
        return null;

      var c = function () {};
      c.prototype = parent;
      return new c();
    };

    // private utility functions

    function __objToStr(o) {
      return Object.prototype.toString.call(o);
    }
    clone.__objToStr = __objToStr;

    function __isDate(o) {
      return typeof o === 'object' && __objToStr(o) === '[object Date]';
    }
    clone.__isDate = __isDate;

    function __isArray(o) {
      return typeof o === 'object' && __objToStr(o) === '[object Array]';
    }
    clone.__isArray = __isArray;

    function __isRegExp(o) {
      return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
    }
    clone.__isRegExp = __isRegExp;

    function __getRegExpFlags(re) {
      var flags = '';
      if (re.global) flags += 'g';
      if (re.ignoreCase) flags += 'i';
      if (re.multiline) flags += 'm';
      return flags;
    }
    clone.__getRegExpFlags = __getRegExpFlags;

    return clone;
    })();

    if (typeof module === 'object' && module.exports) {
      module.exports = clone;
    }


    /***/ }),
    /* 22 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    var _emitter = __webpack_require__(8);

    var _emitter2 = _interopRequireDefault(_emitter);

    var _block = __webpack_require__(4);

    var _block2 = _interopRequireDefault(_block);

    var _break = __webpack_require__(16);

    var _break2 = _interopRequireDefault(_break);

    var _code = __webpack_require__(13);

    var _code2 = _interopRequireDefault(_code);

    var _container = __webpack_require__(25);

    var _container2 = _interopRequireDefault(_container);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    function isLine(blot) {
      return blot instanceof _block2.default || blot instanceof _block.BlockEmbed;
    }

    var Scroll = function (_Parchment$Scroll) {
      _inherits(Scroll, _Parchment$Scroll);

      function Scroll(domNode, config) {
        _classCallCheck(this, Scroll);

        var _this = _possibleConstructorReturn(this, (Scroll.__proto__ || Object.getPrototypeOf(Scroll)).call(this, domNode));

        _this.emitter = config.emitter;
        if (Array.isArray(config.whitelist)) {
          _this.whitelist = config.whitelist.reduce(function (whitelist, format) {
            whitelist[format] = true;
            return whitelist;
          }, {});
        }
        // Some reason fixes composition issues with character languages in Windows/Chrome, Safari
        _this.domNode.addEventListener('DOMNodeInserted', function () {});
        _this.optimize();
        _this.enable();
        return _this;
      }

      _createClass(Scroll, [{
        key: 'batchStart',
        value: function batchStart() {
          this.batch = true;
        }
      }, {
        key: 'batchEnd',
        value: function batchEnd() {
          this.batch = false;
          this.optimize();
        }
      }, {
        key: 'deleteAt',
        value: function deleteAt(index, length) {
          var _line = this.line(index),
              _line2 = _slicedToArray(_line, 2),
              first = _line2[0],
              offset = _line2[1];

          var _line3 = this.line(index + length),
              _line4 = _slicedToArray(_line3, 1),
              last = _line4[0];

          _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'deleteAt', this).call(this, index, length);
          if (last != null && first !== last && offset > 0) {
            if (first instanceof _block.BlockEmbed || last instanceof _block.BlockEmbed) {
              this.optimize();
              return;
            }
            if (first instanceof _code2.default) {
              var newlineIndex = first.newlineIndex(first.length(), true);
              if (newlineIndex > -1) {
                first = first.split(newlineIndex + 1);
                if (first === last) {
                  this.optimize();
                  return;
                }
              }
            } else if (last instanceof _code2.default) {
              var _newlineIndex = last.newlineIndex(0);
              if (_newlineIndex > -1) {
                last.split(_newlineIndex + 1);
              }
            }
            var ref = last.children.head instanceof _break2.default ? null : last.children.head;
            first.moveChildren(last, ref);
            first.remove();
          }
          this.optimize();
        }
      }, {
        key: 'enable',
        value: function enable() {
          var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

          this.domNode.setAttribute('contenteditable', enabled);
        }
      }, {
        key: 'formatAt',
        value: function formatAt(index, length, format, value) {
          if (this.whitelist != null && !this.whitelist[format]) return;
          _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'formatAt', this).call(this, index, length, format, value);
          this.optimize();
        }
      }, {
        key: 'insertAt',
        value: function insertAt(index, value, def) {
          if (def != null && this.whitelist != null && !this.whitelist[value]) return;
          if (index >= this.length()) {
            if (def == null || _parchment2.default.query(value, _parchment2.default.Scope.BLOCK) == null) {
              var blot = _parchment2.default.create(this.statics.defaultChild);
              this.appendChild(blot);
              if (def == null && value.endsWith('\n')) {
                value = value.slice(0, -1);
              }
              blot.insertAt(0, value, def);
            } else {
              var embed = _parchment2.default.create(value, def);
              this.appendChild(embed);
            }
          } else {
            _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertAt', this).call(this, index, value, def);
          }
          this.optimize();
        }
      }, {
        key: 'insertBefore',
        value: function insertBefore(blot, ref) {
          if (blot.statics.scope === _parchment2.default.Scope.INLINE_BLOT) {
            var wrapper = _parchment2.default.create(this.statics.defaultChild);
            wrapper.appendChild(blot);
            blot = wrapper;
          }
          _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertBefore', this).call(this, blot, ref);
        }
      }, {
        key: 'leaf',
        value: function leaf(index) {
          return this.path(index).pop() || [null, -1];
        }
      }, {
        key: 'line',
        value: function line(index) {
          if (index === this.length()) {
            return this.line(index - 1);
          }
          return this.descendant(isLine, index);
        }
      }, {
        key: 'lines',
        value: function lines() {
          var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

          var getLines = function getLines(blot, index, length) {
            var lines = [],
                lengthLeft = length;
            blot.children.forEachAt(index, length, function (child, index, length) {
              if (isLine(child)) {
                lines.push(child);
              } else if (child instanceof _parchment2.default.Container) {
                lines = lines.concat(getLines(child, index, lengthLeft));
              }
              lengthLeft -= length;
            });
            return lines;
          };
          return getLines(this, index, length);
        }
      }, {
        key: 'optimize',
        value: function optimize() {
          var mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          if (this.batch === true) return;
          _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'optimize', this).call(this, mutations, context);
          if (mutations.length > 0) {
            this.emitter.emit(_emitter2.default.events.SCROLL_OPTIMIZE, mutations, context);
          }
        }
      }, {
        key: 'path',
        value: function path(index) {
          return _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'path', this).call(this, index).slice(1); // Exclude self
        }
      }, {
        key: 'update',
        value: function update(mutations) {
          if (this.batch === true) return;
          var source = _emitter2.default.sources.USER;
          if (typeof mutations === 'string') {
            source = mutations;
          }
          if (!Array.isArray(mutations)) {
            mutations = this.observer.takeRecords();
          }
          if (mutations.length > 0) {
            this.emitter.emit(_emitter2.default.events.SCROLL_BEFORE_UPDATE, source, mutations);
          }
          _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'update', this).call(this, mutations.concat([])); // pass copy
          if (mutations.length > 0) {
            this.emitter.emit(_emitter2.default.events.SCROLL_UPDATE, source, mutations);
          }
        }
      }]);

      return Scroll;
    }(_parchment2.default.Scroll);

    Scroll.blotName = 'scroll';
    Scroll.className = 'ql-editor';
    Scroll.tagName = 'DIV';
    Scroll.defaultChild = 'block';
    Scroll.allowedChildren = [_block2.default, _block.BlockEmbed, _container2.default];

    exports.default = Scroll;

    /***/ }),
    /* 23 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SHORTKEY = exports.default = undefined;

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _clone = __webpack_require__(21);

    var _clone2 = _interopRequireDefault(_clone);

    var _deepEqual = __webpack_require__(11);

    var _deepEqual2 = _interopRequireDefault(_deepEqual);

    var _extend = __webpack_require__(3);

    var _extend2 = _interopRequireDefault(_extend);

    var _quillDelta = __webpack_require__(2);

    var _quillDelta2 = _interopRequireDefault(_quillDelta);

    var _op = __webpack_require__(20);

    var _op2 = _interopRequireDefault(_op);

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    var _quill = __webpack_require__(5);

    var _quill2 = _interopRequireDefault(_quill);

    var _logger = __webpack_require__(10);

    var _logger2 = _interopRequireDefault(_logger);

    var _module = __webpack_require__(9);

    var _module2 = _interopRequireDefault(_module);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var debug = (0, _logger2.default)('quill:keyboard');

    var SHORTKEY = /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';

    var Keyboard = function (_Module) {
      _inherits(Keyboard, _Module);

      _createClass(Keyboard, null, [{
        key: 'match',
        value: function match(evt, binding) {
          binding = normalize(binding);
          if (['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].some(function (key) {
            return !!binding[key] !== evt[key] && binding[key] !== null;
          })) {
            return false;
          }
          return binding.key === (evt.which || evt.keyCode);
        }
      }]);

      function Keyboard(quill, options) {
        _classCallCheck(this, Keyboard);

        var _this = _possibleConstructorReturn(this, (Keyboard.__proto__ || Object.getPrototypeOf(Keyboard)).call(this, quill, options));

        _this.bindings = {};
        Object.keys(_this.options.bindings).forEach(function (name) {
          if (name === 'list autofill' && quill.scroll.whitelist != null && !quill.scroll.whitelist['list']) {
            return;
          }
          if (_this.options.bindings[name]) {
            _this.addBinding(_this.options.bindings[name]);
          }
        });
        _this.addBinding({ key: Keyboard.keys.ENTER, shiftKey: null }, handleEnter);
        _this.addBinding({ key: Keyboard.keys.ENTER, metaKey: null, ctrlKey: null, altKey: null }, function () {});
        if (/Firefox/i.test(navigator.userAgent)) {
          // Need to handle delete and backspace for Firefox in the general case #1171
          _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true }, handleBackspace);
          _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true }, handleDelete);
        } else {
          _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true, prefix: /^.?$/ }, handleBackspace);
          _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true, suffix: /^.?$/ }, handleDelete);
        }
        _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: false }, handleDeleteRange);
        _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: false }, handleDeleteRange);
        _this.addBinding({ key: Keyboard.keys.BACKSPACE, altKey: null, ctrlKey: null, metaKey: null, shiftKey: null }, { collapsed: true, offset: 0 }, handleBackspace);
        _this.listen();
        return _this;
      }

      _createClass(Keyboard, [{
        key: 'addBinding',
        value: function addBinding(key) {
          var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

          var binding = normalize(key);
          if (binding == null || binding.key == null) {
            return debug.warn('Attempted to add invalid keyboard binding', binding);
          }
          if (typeof context === 'function') {
            context = { handler: context };
          }
          if (typeof handler === 'function') {
            handler = { handler: handler };
          }
          binding = (0, _extend2.default)(binding, context, handler);
          this.bindings[binding.key] = this.bindings[binding.key] || [];
          this.bindings[binding.key].push(binding);
        }
      }, {
        key: 'listen',
        value: function listen() {
          var _this2 = this;

          this.quill.root.addEventListener('keydown', function (evt) {
            if (evt.defaultPrevented) return;
            var which = evt.which || evt.keyCode;
            var bindings = (_this2.bindings[which] || []).filter(function (binding) {
              return Keyboard.match(evt, binding);
            });
            if (bindings.length === 0) return;
            var range = _this2.quill.getSelection();
            if (range == null || !_this2.quill.hasFocus()) return;

            var _quill$getLine = _this2.quill.getLine(range.index),
                _quill$getLine2 = _slicedToArray(_quill$getLine, 2),
                line = _quill$getLine2[0],
                offset = _quill$getLine2[1];

            var _quill$getLeaf = _this2.quill.getLeaf(range.index),
                _quill$getLeaf2 = _slicedToArray(_quill$getLeaf, 2),
                leafStart = _quill$getLeaf2[0],
                offsetStart = _quill$getLeaf2[1];

            var _ref = range.length === 0 ? [leafStart, offsetStart] : _this2.quill.getLeaf(range.index + range.length),
                _ref2 = _slicedToArray(_ref, 2),
                leafEnd = _ref2[0],
                offsetEnd = _ref2[1];

            var prefixText = leafStart instanceof _parchment2.default.Text ? leafStart.value().slice(0, offsetStart) : '';
            var suffixText = leafEnd instanceof _parchment2.default.Text ? leafEnd.value().slice(offsetEnd) : '';
            var curContext = {
              collapsed: range.length === 0,
              empty: range.length === 0 && line.length() <= 1,
              format: _this2.quill.getFormat(range),
              offset: offset,
              prefix: prefixText,
              suffix: suffixText
            };
            var prevented = bindings.some(function (binding) {
              if (binding.collapsed != null && binding.collapsed !== curContext.collapsed) return false;
              if (binding.empty != null && binding.empty !== curContext.empty) return false;
              if (binding.offset != null && binding.offset !== curContext.offset) return false;
              if (Array.isArray(binding.format)) {
                // any format is present
                if (binding.format.every(function (name) {
                  return curContext.format[name] == null;
                })) {
                  return false;
                }
              } else if (_typeof(binding.format) === 'object') {
                // all formats must match
                if (!Object.keys(binding.format).every(function (name) {
                  if (binding.format[name] === true) return curContext.format[name] != null;
                  if (binding.format[name] === false) return curContext.format[name] == null;
                  return (0, _deepEqual2.default)(binding.format[name], curContext.format[name]);
                })) {
                  return false;
                }
              }
              if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) return false;
              if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) return false;
              return binding.handler.call(_this2, range, curContext) !== true;
            });
            if (prevented) {
              evt.preventDefault();
            }
          });
        }
      }]);

      return Keyboard;
    }(_module2.default);

    Keyboard.keys = {
      BACKSPACE: 8,
      TAB: 9,
      ENTER: 13,
      ESCAPE: 27,
      LEFT: 37,
      UP: 38,
      RIGHT: 39,
      DOWN: 40,
      DELETE: 46
    };

    Keyboard.DEFAULTS = {
      bindings: {
        'bold': makeFormatHandler('bold'),
        'italic': makeFormatHandler('italic'),
        'underline': makeFormatHandler('underline'),
        'indent': {
          // highlight tab or tab at beginning of list, indent or blockquote
          key: Keyboard.keys.TAB,
          format: ['blockquote', 'indent', 'list'],
          handler: function handler(range, context) {
            if (context.collapsed && context.offset !== 0) return true;
            this.quill.format('indent', '+1', _quill2.default.sources.USER);
          }
        },
        'outdent': {
          key: Keyboard.keys.TAB,
          shiftKey: true,
          format: ['blockquote', 'indent', 'list'],
          // highlight tab or tab at beginning of list, indent or blockquote
          handler: function handler(range, context) {
            if (context.collapsed && context.offset !== 0) return true;
            this.quill.format('indent', '-1', _quill2.default.sources.USER);
          }
        },
        'outdent backspace': {
          key: Keyboard.keys.BACKSPACE,
          collapsed: true,
          shiftKey: null,
          metaKey: null,
          ctrlKey: null,
          altKey: null,
          format: ['indent', 'list'],
          offset: 0,
          handler: function handler(range, context) {
            if (context.format.indent != null) {
              this.quill.format('indent', '-1', _quill2.default.sources.USER);
            } else if (context.format.list != null) {
              this.quill.format('list', false, _quill2.default.sources.USER);
            }
          }
        },
        'indent code-block': makeCodeBlockHandler(true),
        'outdent code-block': makeCodeBlockHandler(false),
        'remove tab': {
          key: Keyboard.keys.TAB,
          shiftKey: true,
          collapsed: true,
          prefix: /\t$/,
          handler: function handler(range) {
            this.quill.deleteText(range.index - 1, 1, _quill2.default.sources.USER);
          }
        },
        'tab': {
          key: Keyboard.keys.TAB,
          handler: function handler(range) {
            this.quill.history.cutoff();
            var delta = new _quillDelta2.default().retain(range.index).delete(range.length).insert('\t');
            this.quill.updateContents(delta, _quill2.default.sources.USER);
            this.quill.history.cutoff();
            this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
          }
        },
        'list empty enter': {
          key: Keyboard.keys.ENTER,
          collapsed: true,
          format: ['list'],
          empty: true,
          handler: function handler(range, context) {
            this.quill.format('list', false, _quill2.default.sources.USER);
            if (context.format.indent) {
              this.quill.format('indent', false, _quill2.default.sources.USER);
            }
          }
        },
        'checklist enter': {
          key: Keyboard.keys.ENTER,
          collapsed: true,
          format: { list: 'checked' },
          handler: function handler(range) {
            var _quill$getLine3 = this.quill.getLine(range.index),
                _quill$getLine4 = _slicedToArray(_quill$getLine3, 2),
                line = _quill$getLine4[0],
                offset = _quill$getLine4[1];

            var formats = (0, _extend2.default)({}, line.formats(), { list: 'checked' });
            var delta = new _quillDelta2.default().retain(range.index).insert('\n', formats).retain(line.length() - offset - 1).retain(1, { list: 'unchecked' });
            this.quill.updateContents(delta, _quill2.default.sources.USER);
            this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
            this.quill.scrollIntoView();
          }
        },
        'header enter': {
          key: Keyboard.keys.ENTER,
          collapsed: true,
          format: ['header'],
          suffix: /^$/,
          handler: function handler(range, context) {
            var _quill$getLine5 = this.quill.getLine(range.index),
                _quill$getLine6 = _slicedToArray(_quill$getLine5, 2),
                line = _quill$getLine6[0],
                offset = _quill$getLine6[1];

            var delta = new _quillDelta2.default().retain(range.index).insert('\n', context.format).retain(line.length() - offset - 1).retain(1, { header: null });
            this.quill.updateContents(delta, _quill2.default.sources.USER);
            this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
            this.quill.scrollIntoView();
          }
        },
        'list autofill': {
          key: ' ',
          collapsed: true,
          format: { list: false },
          prefix: /^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,
          handler: function handler(range, context) {
            var length = context.prefix.length;

            var _quill$getLine7 = this.quill.getLine(range.index),
                _quill$getLine8 = _slicedToArray(_quill$getLine7, 2),
                line = _quill$getLine8[0],
                offset = _quill$getLine8[1];

            if (offset > length) return true;
            var value = void 0;
            switch (context.prefix.trim()) {
              case '[]':case '[ ]':
                value = 'unchecked';
                break;
              case '[x]':
                value = 'checked';
                break;
              case '-':case '*':
                value = 'bullet';
                break;
              default:
                value = 'ordered';
            }
            this.quill.insertText(range.index, ' ', _quill2.default.sources.USER);
            this.quill.history.cutoff();
            var delta = new _quillDelta2.default().retain(range.index - offset).delete(length + 1).retain(line.length() - 2 - offset).retain(1, { list: value });
            this.quill.updateContents(delta, _quill2.default.sources.USER);
            this.quill.history.cutoff();
            this.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);
          }
        },
        'code exit': {
          key: Keyboard.keys.ENTER,
          collapsed: true,
          format: ['code-block'],
          prefix: /\n\n$/,
          suffix: /^\s+$/,
          handler: function handler(range) {
            var _quill$getLine9 = this.quill.getLine(range.index),
                _quill$getLine10 = _slicedToArray(_quill$getLine9, 2),
                line = _quill$getLine10[0],
                offset = _quill$getLine10[1];

            var delta = new _quillDelta2.default().retain(range.index + line.length() - offset - 2).retain(1, { 'code-block': null }).delete(1);
            this.quill.updateContents(delta, _quill2.default.sources.USER);
          }
        },
        'embed left': makeEmbedArrowHandler(Keyboard.keys.LEFT, false),
        'embed left shift': makeEmbedArrowHandler(Keyboard.keys.LEFT, true),
        'embed right': makeEmbedArrowHandler(Keyboard.keys.RIGHT, false),
        'embed right shift': makeEmbedArrowHandler(Keyboard.keys.RIGHT, true)
      }
    };

    function makeEmbedArrowHandler(key, shiftKey) {
      var _ref3;

      var where = key === Keyboard.keys.LEFT ? 'prefix' : 'suffix';
      return _ref3 = {
        key: key,
        shiftKey: shiftKey,
        altKey: null
      }, _defineProperty(_ref3, where, /^$/), _defineProperty(_ref3, 'handler', function handler(range) {
        var index = range.index;
        if (key === Keyboard.keys.RIGHT) {
          index += range.length + 1;
        }

        var _quill$getLeaf3 = this.quill.getLeaf(index),
            _quill$getLeaf4 = _slicedToArray(_quill$getLeaf3, 1),
            leaf = _quill$getLeaf4[0];

        if (!(leaf instanceof _parchment2.default.Embed)) return true;
        if (key === Keyboard.keys.LEFT) {
          if (shiftKey) {
            this.quill.setSelection(range.index - 1, range.length + 1, _quill2.default.sources.USER);
          } else {
            this.quill.setSelection(range.index - 1, _quill2.default.sources.USER);
          }
        } else {
          if (shiftKey) {
            this.quill.setSelection(range.index, range.length + 1, _quill2.default.sources.USER);
          } else {
            this.quill.setSelection(range.index + range.length + 1, _quill2.default.sources.USER);
          }
        }
        return false;
      }), _ref3;
    }

    function handleBackspace(range, context) {
      if (range.index === 0 || this.quill.getLength() <= 1) return;

      var _quill$getLine11 = this.quill.getLine(range.index),
          _quill$getLine12 = _slicedToArray(_quill$getLine11, 1),
          line = _quill$getLine12[0];

      var formats = {};
      if (context.offset === 0) {
        var _quill$getLine13 = this.quill.getLine(range.index - 1),
            _quill$getLine14 = _slicedToArray(_quill$getLine13, 1),
            prev = _quill$getLine14[0];

        if (prev != null && prev.length() > 1) {
          var curFormats = line.formats();
          var prevFormats = this.quill.getFormat(range.index - 1, 1);
          formats = _op2.default.attributes.diff(curFormats, prevFormats) || {};
        }
      }
      // Check for astral symbols
      var length = /[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(context.prefix) ? 2 : 1;
      this.quill.deleteText(range.index - length, length, _quill2.default.sources.USER);
      if (Object.keys(formats).length > 0) {
        this.quill.formatLine(range.index - length, length, formats, _quill2.default.sources.USER);
      }
      this.quill.focus();
    }

    function handleDelete(range, context) {
      // Check for astral symbols
      var length = /^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(context.suffix) ? 2 : 1;
      if (range.index >= this.quill.getLength() - length) return;
      var formats = {},
          nextLength = 0;

      var _quill$getLine15 = this.quill.getLine(range.index),
          _quill$getLine16 = _slicedToArray(_quill$getLine15, 1),
          line = _quill$getLine16[0];

      if (context.offset >= line.length() - 1) {
        var _quill$getLine17 = this.quill.getLine(range.index + 1),
            _quill$getLine18 = _slicedToArray(_quill$getLine17, 1),
            next = _quill$getLine18[0];

        if (next) {
          var curFormats = line.formats();
          var nextFormats = this.quill.getFormat(range.index, 1);
          formats = _op2.default.attributes.diff(curFormats, nextFormats) || {};
          nextLength = next.length();
        }
      }
      this.quill.deleteText(range.index, length, _quill2.default.sources.USER);
      if (Object.keys(formats).length > 0) {
        this.quill.formatLine(range.index + nextLength - 1, length, formats, _quill2.default.sources.USER);
      }
    }

    function handleDeleteRange(range) {
      var lines = this.quill.getLines(range);
      var formats = {};
      if (lines.length > 1) {
        var firstFormats = lines[0].formats();
        var lastFormats = lines[lines.length - 1].formats();
        formats = _op2.default.attributes.diff(lastFormats, firstFormats) || {};
      }
      this.quill.deleteText(range, _quill2.default.sources.USER);
      if (Object.keys(formats).length > 0) {
        this.quill.formatLine(range.index, 1, formats, _quill2.default.sources.USER);
      }
      this.quill.setSelection(range.index, _quill2.default.sources.SILENT);
      this.quill.focus();
    }

    function handleEnter(range, context) {
      var _this3 = this;

      if (range.length > 0) {
        this.quill.scroll.deleteAt(range.index, range.length); // So we do not trigger text-change
      }
      var lineFormats = Object.keys(context.format).reduce(function (lineFormats, format) {
        if (_parchment2.default.query(format, _parchment2.default.Scope.BLOCK) && !Array.isArray(context.format[format])) {
          lineFormats[format] = context.format[format];
        }
        return lineFormats;
      }, {});
      this.quill.insertText(range.index, '\n', lineFormats, _quill2.default.sources.USER);
      // Earlier scroll.deleteAt might have messed up our selection,
      // so insertText's built in selection preservation is not reliable
      this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
      this.quill.focus();
      Object.keys(context.format).forEach(function (name) {
        if (lineFormats[name] != null) return;
        if (Array.isArray(context.format[name])) return;
        if (name === 'link') return;
        _this3.quill.format(name, context.format[name], _quill2.default.sources.USER);
      });
    }

    function makeCodeBlockHandler(indent) {
      return {
        key: Keyboard.keys.TAB,
        shiftKey: !indent,
        format: { 'code-block': true },
        handler: function handler(range) {
          var CodeBlock = _parchment2.default.query('code-block');
          var index = range.index,
              length = range.length;

          var _quill$scroll$descend = this.quill.scroll.descendant(CodeBlock, index),
              _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),
              block = _quill$scroll$descend2[0],
              offset = _quill$scroll$descend2[1];

          if (block == null) return;
          var scrollIndex = this.quill.getIndex(block);
          var start = block.newlineIndex(offset, true) + 1;
          var end = block.newlineIndex(scrollIndex + offset + length);
          var lines = block.domNode.textContent.slice(start, end).split('\n');
          offset = 0;
          lines.forEach(function (line, i) {
            if (indent) {
              block.insertAt(start + offset, CodeBlock.TAB);
              offset += CodeBlock.TAB.length;
              if (i === 0) {
                index += CodeBlock.TAB.length;
              } else {
                length += CodeBlock.TAB.length;
              }
            } else if (line.startsWith(CodeBlock.TAB)) {
              block.deleteAt(start + offset, CodeBlock.TAB.length);
              offset -= CodeBlock.TAB.length;
              if (i === 0) {
                index -= CodeBlock.TAB.length;
              } else {
                length -= CodeBlock.TAB.length;
              }
            }
            offset += line.length + 1;
          });
          this.quill.update(_quill2.default.sources.USER);
          this.quill.setSelection(index, length, _quill2.default.sources.SILENT);
        }
      };
    }

    function makeFormatHandler(format) {
      return {
        key: format[0].toUpperCase(),
        shortKey: true,
        handler: function handler(range, context) {
          this.quill.format(format, !context.format[format], _quill2.default.sources.USER);
        }
      };
    }

    function normalize(binding) {
      if (typeof binding === 'string' || typeof binding === 'number') {
        return normalize({ key: binding });
      }
      if ((typeof binding === 'undefined' ? 'undefined' : _typeof(binding)) === 'object') {
        binding = (0, _clone2.default)(binding, false);
      }
      if (typeof binding.key === 'string') {
        if (Keyboard.keys[binding.key.toUpperCase()] != null) {
          binding.key = Keyboard.keys[binding.key.toUpperCase()];
        } else if (binding.key.length === 1) {
          binding.key = binding.key.toUpperCase().charCodeAt(0);
        } else {
          return null;
        }
      }
      if (binding.shortKey) {
        binding[SHORTKEY] = binding.shortKey;
        delete binding.shortKey;
      }
      return binding;
    }

    exports.default = Keyboard;
    exports.SHORTKEY = SHORTKEY;

    /***/ }),
    /* 24 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    var _text = __webpack_require__(7);

    var _text2 = _interopRequireDefault(_text);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var Cursor = function (_Parchment$Embed) {
      _inherits(Cursor, _Parchment$Embed);

      _createClass(Cursor, null, [{
        key: 'value',
        value: function value() {
          return undefined;
        }
      }]);

      function Cursor(domNode, selection) {
        _classCallCheck(this, Cursor);

        var _this = _possibleConstructorReturn(this, (Cursor.__proto__ || Object.getPrototypeOf(Cursor)).call(this, domNode));

        _this.selection = selection;
        _this.textNode = document.createTextNode(Cursor.CONTENTS);
        _this.domNode.appendChild(_this.textNode);
        _this._length = 0;
        return _this;
      }

      _createClass(Cursor, [{
        key: 'detach',
        value: function detach() {
          // super.detach() will also clear domNode.__blot
          if (this.parent != null) this.parent.removeChild(this);
        }
      }, {
        key: 'format',
        value: function format(name, value) {
          if (this._length !== 0) {
            return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'format', this).call(this, name, value);
          }
          var target = this,
              index = 0;
          while (target != null && target.statics.scope !== _parchment2.default.Scope.BLOCK_BLOT) {
            index += target.offset(target.parent);
            target = target.parent;
          }
          if (target != null) {
            this._length = Cursor.CONTENTS.length;
            target.optimize();
            target.formatAt(index, Cursor.CONTENTS.length, name, value);
            this._length = 0;
          }
        }
      }, {
        key: 'index',
        value: function index(node, offset) {
          if (node === this.textNode) return 0;
          return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'index', this).call(this, node, offset);
        }
      }, {
        key: 'length',
        value: function length() {
          return this._length;
        }
      }, {
        key: 'position',
        value: function position() {
          return [this.textNode, this.textNode.data.length];
        }
      }, {
        key: 'remove',
        value: function remove() {
          _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'remove', this).call(this);
          this.parent = null;
        }
      }, {
        key: 'restore',
        value: function restore() {
          if (this.selection.composing || this.parent == null) return;
          var textNode = this.textNode;
          var range = this.selection.getNativeRange();
          var restoreText = void 0,
              start = void 0,
              end = void 0;
          if (range != null && range.start.node === textNode && range.end.node === textNode) {
            var _ref = [textNode, range.start.offset, range.end.offset];
            restoreText = _ref[0];
            start = _ref[1];
            end = _ref[2];
          }
          // Link format will insert text outside of anchor tag
          while (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {
            this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);
          }
          if (this.textNode.data !== Cursor.CONTENTS) {
            var text = this.textNode.data.split(Cursor.CONTENTS).join('');
            if (this.next instanceof _text2.default) {
              restoreText = this.next.domNode;
              this.next.insertAt(0, text);
              this.textNode.data = Cursor.CONTENTS;
            } else {
              this.textNode.data = text;
              this.parent.insertBefore(_parchment2.default.create(this.textNode), this);
              this.textNode = document.createTextNode(Cursor.CONTENTS);
              this.domNode.appendChild(this.textNode);
            }
          }
          this.remove();
          if (start != null) {
            var _map = [start, end].map(function (offset) {
              return Math.max(0, Math.min(restoreText.data.length, offset - 1));
            });

            var _map2 = _slicedToArray(_map, 2);

            start = _map2[0];
            end = _map2[1];

            return {
              startNode: restoreText,
              startOffset: start,
              endNode: restoreText,
              endOffset: end
            };
          }
        }
      }, {
        key: 'update',
        value: function update(mutations, context) {
          var _this2 = this;

          if (mutations.some(function (mutation) {
            return mutation.type === 'characterData' && mutation.target === _this2.textNode;
          })) {
            var range = this.restore();
            if (range) context.range = range;
          }
        }
      }, {
        key: 'value',
        value: function value() {
          return '';
        }
      }]);

      return Cursor;
    }(_parchment2.default.Embed);

    Cursor.blotName = 'cursor';
    Cursor.className = 'ql-cursor';
    Cursor.tagName = 'span';
    Cursor.CONTENTS = '\uFEFF'; // Zero width no break space


    exports.default = Cursor;

    /***/ }),
    /* 25 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    var _block = __webpack_require__(4);

    var _block2 = _interopRequireDefault(_block);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var Container = function (_Parchment$Container) {
      _inherits(Container, _Parchment$Container);

      function Container() {
        _classCallCheck(this, Container);

        return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
      }

      return Container;
    }(_parchment2.default.Container);

    Container.allowedChildren = [_block2.default, _block.BlockEmbed, Container];

    exports.default = Container;

    /***/ }),
    /* 26 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ColorStyle = exports.ColorClass = exports.ColorAttributor = undefined;

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var ColorAttributor = function (_Parchment$Attributor) {
      _inherits(ColorAttributor, _Parchment$Attributor);

      function ColorAttributor() {
        _classCallCheck(this, ColorAttributor);

        return _possibleConstructorReturn(this, (ColorAttributor.__proto__ || Object.getPrototypeOf(ColorAttributor)).apply(this, arguments));
      }

      _createClass(ColorAttributor, [{
        key: 'value',
        value: function value(domNode) {
          var value = _get(ColorAttributor.prototype.__proto__ || Object.getPrototypeOf(ColorAttributor.prototype), 'value', this).call(this, domNode);
          if (!value.startsWith('rgb(')) return value;
          value = value.replace(/^[^\d]+/, '').replace(/[^\d]+$/, '');
          return '#' + value.split(',').map(function (component) {
            return ('00' + parseInt(component).toString(16)).slice(-2);
          }).join('');
        }
      }]);

      return ColorAttributor;
    }(_parchment2.default.Attributor.Style);

    var ColorClass = new _parchment2.default.Attributor.Class('color', 'ql-color', {
      scope: _parchment2.default.Scope.INLINE
    });
    var ColorStyle = new ColorAttributor('color', 'color', {
      scope: _parchment2.default.Scope.INLINE
    });

    exports.ColorAttributor = ColorAttributor;
    exports.ColorClass = ColorClass;
    exports.ColorStyle = ColorStyle;

    /***/ }),
    /* 27 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.sanitize = exports.default = undefined;

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _inline = __webpack_require__(6);

    var _inline2 = _interopRequireDefault(_inline);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var Link = function (_Inline) {
      _inherits(Link, _Inline);

      function Link() {
        _classCallCheck(this, Link);

        return _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).apply(this, arguments));
      }

      _createClass(Link, [{
        key: 'format',
        value: function format(name, value) {
          if (name !== this.statics.blotName || !value) return _get(Link.prototype.__proto__ || Object.getPrototypeOf(Link.prototype), 'format', this).call(this, name, value);
          value = this.constructor.sanitize(value);
          this.domNode.setAttribute('href', value);
        }
      }], [{
        key: 'create',
        value: function create(value) {
          var node = _get(Link.__proto__ || Object.getPrototypeOf(Link), 'create', this).call(this, value);
          value = this.sanitize(value);
          node.setAttribute('href', value);
          node.setAttribute('rel', 'noopener noreferrer');
          node.setAttribute('target', '_blank');
          return node;
        }
      }, {
        key: 'formats',
        value: function formats(domNode) {
          return domNode.getAttribute('href');
        }
      }, {
        key: 'sanitize',
        value: function sanitize(url) {
          return _sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;
        }
      }]);

      return Link;
    }(_inline2.default);

    Link.blotName = 'link';
    Link.tagName = 'A';
    Link.SANITIZED_URL = 'about:blank';
    Link.PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel'];

    function _sanitize(url, protocols) {
      var anchor = document.createElement('a');
      anchor.href = url;
      var protocol = anchor.href.slice(0, anchor.href.indexOf(':'));
      return protocols.indexOf(protocol) > -1;
    }

    exports.default = Link;
    exports.sanitize = _sanitize;

    /***/ }),
    /* 28 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _keyboard = __webpack_require__(23);

    var _keyboard2 = _interopRequireDefault(_keyboard);

    var _dropdown = __webpack_require__(107);

    var _dropdown2 = _interopRequireDefault(_dropdown);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var optionsCounter = 0;

    function toggleAriaAttribute(element, attribute) {
      element.setAttribute(attribute, !(element.getAttribute(attribute) === 'true'));
    }

    var Picker = function () {
      function Picker(select) {
        var _this = this;

        _classCallCheck(this, Picker);

        this.select = select;
        this.container = document.createElement('span');
        this.buildPicker();
        this.select.style.display = 'none';
        this.select.parentNode.insertBefore(this.container, this.select);

        this.label.addEventListener('mousedown', function () {
          _this.togglePicker();
        });
        this.label.addEventListener('keydown', function (event) {
          switch (event.keyCode) {
            // Allows the "Enter" key to open the picker
            case _keyboard2.default.keys.ENTER:
              _this.togglePicker();
              break;

            // Allows the "Escape" key to close the picker
            case _keyboard2.default.keys.ESCAPE:
              _this.escape();
              event.preventDefault();
              break;
          }
        });
        this.select.addEventListener('change', this.update.bind(this));
      }

      _createClass(Picker, [{
        key: 'togglePicker',
        value: function togglePicker() {
          this.container.classList.toggle('ql-expanded');
          // Toggle aria-expanded and aria-hidden to make the picker accessible
          toggleAriaAttribute(this.label, 'aria-expanded');
          toggleAriaAttribute(this.options, 'aria-hidden');
        }
      }, {
        key: 'buildItem',
        value: function buildItem(option) {
          var _this2 = this;

          var item = document.createElement('span');
          item.tabIndex = '0';
          item.setAttribute('role', 'button');

          item.classList.add('ql-picker-item');
          if (option.hasAttribute('value')) {
            item.setAttribute('data-value', option.getAttribute('value'));
          }
          if (option.textContent) {
            item.setAttribute('data-label', option.textContent);
          }
          item.addEventListener('click', function () {
            _this2.selectItem(item, true);
          });
          item.addEventListener('keydown', function (event) {
            switch (event.keyCode) {
              // Allows the "Enter" key to select an item
              case _keyboard2.default.keys.ENTER:
                _this2.selectItem(item, true);
                event.preventDefault();
                break;

              // Allows the "Escape" key to close the picker
              case _keyboard2.default.keys.ESCAPE:
                _this2.escape();
                event.preventDefault();
                break;
            }
          });

          return item;
        }
      }, {
        key: 'buildLabel',
        value: function buildLabel() {
          var label = document.createElement('span');
          label.classList.add('ql-picker-label');
          label.innerHTML = _dropdown2.default;
          label.tabIndex = '0';
          label.setAttribute('role', 'button');
          label.setAttribute('aria-expanded', 'false');
          this.container.appendChild(label);
          return label;
        }
      }, {
        key: 'buildOptions',
        value: function buildOptions() {
          var _this3 = this;

          var options = document.createElement('span');
          options.classList.add('ql-picker-options');

          // Don't want screen readers to read this until options are visible
          options.setAttribute('aria-hidden', 'true');
          options.tabIndex = '-1';

          // Need a unique id for aria-controls
          options.id = 'ql-picker-options-' + optionsCounter;
          optionsCounter += 1;
          this.label.setAttribute('aria-controls', options.id);

          this.options = options;

          [].slice.call(this.select.options).forEach(function (option) {
            var item = _this3.buildItem(option);
            options.appendChild(item);
            if (option.selected === true) {
              _this3.selectItem(item);
            }
          });
          this.container.appendChild(options);
        }
      }, {
        key: 'buildPicker',
        value: function buildPicker() {
          var _this4 = this;

          [].slice.call(this.select.attributes).forEach(function (item) {
            _this4.container.setAttribute(item.name, item.value);
          });
          this.container.classList.add('ql-picker');
          this.label = this.buildLabel();
          this.buildOptions();
        }
      }, {
        key: 'escape',
        value: function escape() {
          var _this5 = this;

          // Close menu and return focus to trigger label
          this.close();
          // Need setTimeout for accessibility to ensure that the browser executes
          // focus on the next process thread and after any DOM content changes
          setTimeout(function () {
            return _this5.label.focus();
          }, 1);
        }
      }, {
        key: 'close',
        value: function close() {
          this.container.classList.remove('ql-expanded');
          this.label.setAttribute('aria-expanded', 'false');
          this.options.setAttribute('aria-hidden', 'true');
        }
      }, {
        key: 'selectItem',
        value: function selectItem(item) {
          var trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

          var selected = this.container.querySelector('.ql-selected');
          if (item === selected) return;
          if (selected != null) {
            selected.classList.remove('ql-selected');
          }
          if (item == null) return;
          item.classList.add('ql-selected');
          this.select.selectedIndex = [].indexOf.call(item.parentNode.children, item);
          if (item.hasAttribute('data-value')) {
            this.label.setAttribute('data-value', item.getAttribute('data-value'));
          } else {
            this.label.removeAttribute('data-value');
          }
          if (item.hasAttribute('data-label')) {
            this.label.setAttribute('data-label', item.getAttribute('data-label'));
          } else {
            this.label.removeAttribute('data-label');
          }
          if (trigger) {
            if (typeof Event === 'function') {
              this.select.dispatchEvent(new Event('change'));
            } else if ((typeof Event === 'undefined' ? 'undefined' : _typeof(Event)) === 'object') {
              // IE11
              var event = document.createEvent('Event');
              event.initEvent('change', true, true);
              this.select.dispatchEvent(event);
            }
            this.close();
          }
        }
      }, {
        key: 'update',
        value: function update() {
          var option = void 0;
          if (this.select.selectedIndex > -1) {
            var item = this.container.querySelector('.ql-picker-options').children[this.select.selectedIndex];
            option = this.select.options[this.select.selectedIndex];
            this.selectItem(item);
          } else {
            this.selectItem(null);
          }
          var isActive = option != null && option !== this.select.querySelector('option[selected]');
          this.label.classList.toggle('ql-active', isActive);
        }
      }]);

      return Picker;
    }();

    exports.default = Picker;

    /***/ }),
    /* 29 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    var _quill = __webpack_require__(5);

    var _quill2 = _interopRequireDefault(_quill);

    var _block = __webpack_require__(4);

    var _block2 = _interopRequireDefault(_block);

    var _break = __webpack_require__(16);

    var _break2 = _interopRequireDefault(_break);

    var _container = __webpack_require__(25);

    var _container2 = _interopRequireDefault(_container);

    var _cursor = __webpack_require__(24);

    var _cursor2 = _interopRequireDefault(_cursor);

    var _embed = __webpack_require__(35);

    var _embed2 = _interopRequireDefault(_embed);

    var _inline = __webpack_require__(6);

    var _inline2 = _interopRequireDefault(_inline);

    var _scroll = __webpack_require__(22);

    var _scroll2 = _interopRequireDefault(_scroll);

    var _text = __webpack_require__(7);

    var _text2 = _interopRequireDefault(_text);

    var _clipboard = __webpack_require__(55);

    var _clipboard2 = _interopRequireDefault(_clipboard);

    var _history = __webpack_require__(42);

    var _history2 = _interopRequireDefault(_history);

    var _keyboard = __webpack_require__(23);

    var _keyboard2 = _interopRequireDefault(_keyboard);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    _quill2.default.register({
      'blots/block': _block2.default,
      'blots/block/embed': _block.BlockEmbed,
      'blots/break': _break2.default,
      'blots/container': _container2.default,
      'blots/cursor': _cursor2.default,
      'blots/embed': _embed2.default,
      'blots/inline': _inline2.default,
      'blots/scroll': _scroll2.default,
      'blots/text': _text2.default,

      'modules/clipboard': _clipboard2.default,
      'modules/history': _history2.default,
      'modules/keyboard': _keyboard2.default
    });

    _parchment2.default.register(_block2.default, _break2.default, _cursor2.default, _inline2.default, _scroll2.default, _text2.default);

    exports.default = _quill2.default;

    /***/ }),
    /* 30 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    var Registry = __webpack_require__(1);
    var ShadowBlot = /** @class */ (function () {
        function ShadowBlot(domNode) {
            this.domNode = domNode;
            // @ts-ignore
            this.domNode[Registry.DATA_KEY] = { blot: this };
        }
        Object.defineProperty(ShadowBlot.prototype, "statics", {
            // Hack for accessing inherited static methods
            get: function () {
                return this.constructor;
            },
            enumerable: true,
            configurable: true
        });
        ShadowBlot.create = function (value) {
            if (this.tagName == null) {
                throw new Registry.ParchmentError('Blot definition missing tagName');
            }
            var node;
            if (Array.isArray(this.tagName)) {
                if (typeof value === 'string') {
                    value = value.toUpperCase();
                    if (parseInt(value).toString() === value) {
                        value = parseInt(value);
                    }
                }
                if (typeof value === 'number') {
                    node = document.createElement(this.tagName[value - 1]);
                }
                else if (this.tagName.indexOf(value) > -1) {
                    node = document.createElement(value);
                }
                else {
                    node = document.createElement(this.tagName[0]);
                }
            }
            else {
                node = document.createElement(this.tagName);
            }
            if (this.className) {
                node.classList.add(this.className);
            }
            return node;
        };
        ShadowBlot.prototype.attach = function () {
            if (this.parent != null) {
                this.scroll = this.parent.scroll;
            }
        };
        ShadowBlot.prototype.clone = function () {
            var domNode = this.domNode.cloneNode(false);
            return Registry.create(domNode);
        };
        ShadowBlot.prototype.detach = function () {
            if (this.parent != null)
                this.parent.removeChild(this);
            // @ts-ignore
            delete this.domNode[Registry.DATA_KEY];
        };
        ShadowBlot.prototype.deleteAt = function (index, length) {
            var blot = this.isolate(index, length);
            blot.remove();
        };
        ShadowBlot.prototype.formatAt = function (index, length, name, value) {
            var blot = this.isolate(index, length);
            if (Registry.query(name, Registry.Scope.BLOT) != null && value) {
                blot.wrap(name, value);
            }
            else if (Registry.query(name, Registry.Scope.ATTRIBUTE) != null) {
                var parent = Registry.create(this.statics.scope);
                blot.wrap(parent);
                parent.format(name, value);
            }
        };
        ShadowBlot.prototype.insertAt = function (index, value, def) {
            var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
            var ref = this.split(index);
            this.parent.insertBefore(blot, ref);
        };
        ShadowBlot.prototype.insertInto = function (parentBlot, refBlot) {
            if (refBlot === void 0) { refBlot = null; }
            if (this.parent != null) {
                this.parent.children.remove(this);
            }
            var refDomNode = null;
            parentBlot.children.insertBefore(this, refBlot);
            if (refBlot != null) {
                refDomNode = refBlot.domNode;
            }
            if (this.domNode.parentNode != parentBlot.domNode ||
                this.domNode.nextSibling != refDomNode) {
                parentBlot.domNode.insertBefore(this.domNode, refDomNode);
            }
            this.parent = parentBlot;
            this.attach();
        };
        ShadowBlot.prototype.isolate = function (index, length) {
            var target = this.split(index);
            target.split(length);
            return target;
        };
        ShadowBlot.prototype.length = function () {
            return 1;
        };
        ShadowBlot.prototype.offset = function (root) {
            if (root === void 0) { root = this.parent; }
            if (this.parent == null || this == root)
                return 0;
            return this.parent.children.offset(this) + this.parent.offset(root);
        };
        ShadowBlot.prototype.optimize = function (context) {
            // TODO clean up once we use WeakMap
            // @ts-ignore
            if (this.domNode[Registry.DATA_KEY] != null) {
                // @ts-ignore
                delete this.domNode[Registry.DATA_KEY].mutations;
            }
        };
        ShadowBlot.prototype.remove = function () {
            if (this.domNode.parentNode != null) {
                this.domNode.parentNode.removeChild(this.domNode);
            }
            this.detach();
        };
        ShadowBlot.prototype.replace = function (target) {
            if (target.parent == null)
                return;
            target.parent.insertBefore(this, target.next);
            target.remove();
        };
        ShadowBlot.prototype.replaceWith = function (name, value) {
            var replacement = typeof name === 'string' ? Registry.create(name, value) : name;
            replacement.replace(this);
            return replacement;
        };
        ShadowBlot.prototype.split = function (index, force) {
            return index === 0 ? this : this.next;
        };
        ShadowBlot.prototype.update = function (mutations, context) {
            // Nothing to do by default
        };
        ShadowBlot.prototype.wrap = function (name, value) {
            var wrapper = typeof name === 'string' ? Registry.create(name, value) : name;
            if (this.parent != null) {
                this.parent.insertBefore(wrapper, this.next);
            }
            wrapper.appendChild(this);
            return wrapper;
        };
        ShadowBlot.blotName = 'abstract';
        return ShadowBlot;
    }());
    exports.default = ShadowBlot;


    /***/ }),
    /* 31 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    var attributor_1 = __webpack_require__(12);
    var class_1 = __webpack_require__(32);
    var style_1 = __webpack_require__(33);
    var Registry = __webpack_require__(1);
    var AttributorStore = /** @class */ (function () {
        function AttributorStore(domNode) {
            this.attributes = {};
            this.domNode = domNode;
            this.build();
        }
        AttributorStore.prototype.attribute = function (attribute, value) {
            // verb
            if (value) {
                if (attribute.add(this.domNode, value)) {
                    if (attribute.value(this.domNode) != null) {
                        this.attributes[attribute.attrName] = attribute;
                    }
                    else {
                        delete this.attributes[attribute.attrName];
                    }
                }
            }
            else {
                attribute.remove(this.domNode);
                delete this.attributes[attribute.attrName];
            }
        };
        AttributorStore.prototype.build = function () {
            var _this = this;
            this.attributes = {};
            var attributes = attributor_1.default.keys(this.domNode);
            var classes = class_1.default.keys(this.domNode);
            var styles = style_1.default.keys(this.domNode);
            attributes
                .concat(classes)
                .concat(styles)
                .forEach(function (name) {
                var attr = Registry.query(name, Registry.Scope.ATTRIBUTE);
                if (attr instanceof attributor_1.default) {
                    _this.attributes[attr.attrName] = attr;
                }
            });
        };
        AttributorStore.prototype.copy = function (target) {
            var _this = this;
            Object.keys(this.attributes).forEach(function (key) {
                var value = _this.attributes[key].value(_this.domNode);
                target.format(key, value);
            });
        };
        AttributorStore.prototype.move = function (target) {
            var _this = this;
            this.copy(target);
            Object.keys(this.attributes).forEach(function (key) {
                _this.attributes[key].remove(_this.domNode);
            });
            this.attributes = {};
        };
        AttributorStore.prototype.values = function () {
            var _this = this;
            return Object.keys(this.attributes).reduce(function (attributes, name) {
                attributes[name] = _this.attributes[name].value(_this.domNode);
                return attributes;
            }, {});
        };
        return AttributorStore;
    }());
    exports.default = AttributorStore;


    /***/ }),
    /* 32 */
    /***/ (function(module, exports, __webpack_require__) {

    var __extends = (this && this.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    var attributor_1 = __webpack_require__(12);
    function match(node, prefix) {
        var className = node.getAttribute('class') || '';
        return className.split(/\s+/).filter(function (name) {
            return name.indexOf(prefix + "-") === 0;
        });
    }
    var ClassAttributor = /** @class */ (function (_super) {
        __extends(ClassAttributor, _super);
        function ClassAttributor() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ClassAttributor.keys = function (node) {
            return (node.getAttribute('class') || '').split(/\s+/).map(function (name) {
                return name
                    .split('-')
                    .slice(0, -1)
                    .join('-');
            });
        };
        ClassAttributor.prototype.add = function (node, value) {
            if (!this.canAdd(node, value))
                return false;
            this.remove(node);
            node.classList.add(this.keyName + "-" + value);
            return true;
        };
        ClassAttributor.prototype.remove = function (node) {
            var matches = match(node, this.keyName);
            matches.forEach(function (name) {
                node.classList.remove(name);
            });
            if (node.classList.length === 0) {
                node.removeAttribute('class');
            }
        };
        ClassAttributor.prototype.value = function (node) {
            var result = match(node, this.keyName)[0] || '';
            var value = result.slice(this.keyName.length + 1); // +1 for hyphen
            return this.canAdd(node, value) ? value : '';
        };
        return ClassAttributor;
    }(attributor_1.default));
    exports.default = ClassAttributor;


    /***/ }),
    /* 33 */
    /***/ (function(module, exports, __webpack_require__) {

    var __extends = (this && this.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    var attributor_1 = __webpack_require__(12);
    function camelize(name) {
        var parts = name.split('-');
        var rest = parts
            .slice(1)
            .map(function (part) {
            return part[0].toUpperCase() + part.slice(1);
        })
            .join('');
        return parts[0] + rest;
    }
    var StyleAttributor = /** @class */ (function (_super) {
        __extends(StyleAttributor, _super);
        function StyleAttributor() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        StyleAttributor.keys = function (node) {
            return (node.getAttribute('style') || '').split(';').map(function (value) {
                var arr = value.split(':');
                return arr[0].trim();
            });
        };
        StyleAttributor.prototype.add = function (node, value) {
            if (!this.canAdd(node, value))
                return false;
            // @ts-ignore
            node.style[camelize(this.keyName)] = value;
            return true;
        };
        StyleAttributor.prototype.remove = function (node) {
            // @ts-ignore
            node.style[camelize(this.keyName)] = '';
            if (!node.getAttribute('style')) {
                node.removeAttribute('style');
            }
        };
        StyleAttributor.prototype.value = function (node) {
            // @ts-ignore
            var value = node.style[camelize(this.keyName)];
            return this.canAdd(node, value) ? value : '';
        };
        return StyleAttributor;
    }(attributor_1.default));
    exports.default = StyleAttributor;


    /***/ }),
    /* 34 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var Theme = function () {
      function Theme(quill, options) {
        _classCallCheck(this, Theme);

        this.quill = quill;
        this.options = options;
        this.modules = {};
      }

      _createClass(Theme, [{
        key: 'init',
        value: function init() {
          var _this = this;

          Object.keys(this.options.modules).forEach(function (name) {
            if (_this.modules[name] == null) {
              _this.addModule(name);
            }
          });
        }
      }, {
        key: 'addModule',
        value: function addModule(name) {
          var moduleClass = this.quill.constructor.import('modules/' + name);
          this.modules[name] = new moduleClass(this.quill, this.options.modules[name] || {});
          return this.modules[name];
        }
      }]);

      return Theme;
    }();

    Theme.DEFAULTS = {
      modules: {}
    };
    Theme.themes = {
      'default': Theme
    };

    exports.default = Theme;

    /***/ }),
    /* 35 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    var _text = __webpack_require__(7);

    var _text2 = _interopRequireDefault(_text);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var GUARD_TEXT = '\uFEFF';

    var Embed = function (_Parchment$Embed) {
      _inherits(Embed, _Parchment$Embed);

      function Embed(node) {
        _classCallCheck(this, Embed);

        var _this = _possibleConstructorReturn(this, (Embed.__proto__ || Object.getPrototypeOf(Embed)).call(this, node));

        _this.contentNode = document.createElement('span');
        _this.contentNode.setAttribute('contenteditable', false);
        [].slice.call(_this.domNode.childNodes).forEach(function (childNode) {
          _this.contentNode.appendChild(childNode);
        });
        _this.leftGuard = document.createTextNode(GUARD_TEXT);
        _this.rightGuard = document.createTextNode(GUARD_TEXT);
        _this.domNode.appendChild(_this.leftGuard);
        _this.domNode.appendChild(_this.contentNode);
        _this.domNode.appendChild(_this.rightGuard);
        return _this;
      }

      _createClass(Embed, [{
        key: 'index',
        value: function index(node, offset) {
          if (node === this.leftGuard) return 0;
          if (node === this.rightGuard) return 1;
          return _get(Embed.prototype.__proto__ || Object.getPrototypeOf(Embed.prototype), 'index', this).call(this, node, offset);
        }
      }, {
        key: 'restore',
        value: function restore(node) {
          var range = void 0,
              textNode = void 0;
          var text = node.data.split(GUARD_TEXT).join('');
          if (node === this.leftGuard) {
            if (this.prev instanceof _text2.default) {
              var prevLength = this.prev.length();
              this.prev.insertAt(prevLength, text);
              range = {
                startNode: this.prev.domNode,
                startOffset: prevLength + text.length
              };
            } else {
              textNode = document.createTextNode(text);
              this.parent.insertBefore(_parchment2.default.create(textNode), this);
              range = {
                startNode: textNode,
                startOffset: text.length
              };
            }
          } else if (node === this.rightGuard) {
            if (this.next instanceof _text2.default) {
              this.next.insertAt(0, text);
              range = {
                startNode: this.next.domNode,
                startOffset: text.length
              };
            } else {
              textNode = document.createTextNode(text);
              this.parent.insertBefore(_parchment2.default.create(textNode), this.next);
              range = {
                startNode: textNode,
                startOffset: text.length
              };
            }
          }
          node.data = GUARD_TEXT;
          return range;
        }
      }, {
        key: 'update',
        value: function update(mutations, context) {
          var _this2 = this;

          mutations.forEach(function (mutation) {
            if (mutation.type === 'characterData' && (mutation.target === _this2.leftGuard || mutation.target === _this2.rightGuard)) {
              var range = _this2.restore(mutation.target);
              if (range) context.range = range;
            }
          });
        }
      }]);

      return Embed;
    }(_parchment2.default.Embed);

    exports.default = Embed;

    /***/ }),
    /* 36 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AlignStyle = exports.AlignClass = exports.AlignAttribute = undefined;

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var config = {
      scope: _parchment2.default.Scope.BLOCK,
      whitelist: ['right', 'center', 'justify']
    };

    var AlignAttribute = new _parchment2.default.Attributor.Attribute('align', 'align', config);
    var AlignClass = new _parchment2.default.Attributor.Class('align', 'ql-align', config);
    var AlignStyle = new _parchment2.default.Attributor.Style('align', 'text-align', config);

    exports.AlignAttribute = AlignAttribute;
    exports.AlignClass = AlignClass;
    exports.AlignStyle = AlignStyle;

    /***/ }),
    /* 37 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BackgroundStyle = exports.BackgroundClass = undefined;

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    var _color = __webpack_require__(26);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var BackgroundClass = new _parchment2.default.Attributor.Class('background', 'ql-bg', {
      scope: _parchment2.default.Scope.INLINE
    });
    var BackgroundStyle = new _color.ColorAttributor('background', 'background-color', {
      scope: _parchment2.default.Scope.INLINE
    });

    exports.BackgroundClass = BackgroundClass;
    exports.BackgroundStyle = BackgroundStyle;

    /***/ }),
    /* 38 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DirectionStyle = exports.DirectionClass = exports.DirectionAttribute = undefined;

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var config = {
      scope: _parchment2.default.Scope.BLOCK,
      whitelist: ['rtl']
    };

    var DirectionAttribute = new _parchment2.default.Attributor.Attribute('direction', 'dir', config);
    var DirectionClass = new _parchment2.default.Attributor.Class('direction', 'ql-direction', config);
    var DirectionStyle = new _parchment2.default.Attributor.Style('direction', 'direction', config);

    exports.DirectionAttribute = DirectionAttribute;
    exports.DirectionClass = DirectionClass;
    exports.DirectionStyle = DirectionStyle;

    /***/ }),
    /* 39 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.FontClass = exports.FontStyle = undefined;

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var config = {
      scope: _parchment2.default.Scope.INLINE,
      whitelist: ['serif', 'monospace']
    };

    var FontClass = new _parchment2.default.Attributor.Class('font', 'ql-font', config);

    var FontStyleAttributor = function (_Parchment$Attributor) {
      _inherits(FontStyleAttributor, _Parchment$Attributor);

      function FontStyleAttributor() {
        _classCallCheck(this, FontStyleAttributor);

        return _possibleConstructorReturn(this, (FontStyleAttributor.__proto__ || Object.getPrototypeOf(FontStyleAttributor)).apply(this, arguments));
      }

      _createClass(FontStyleAttributor, [{
        key: 'value',
        value: function value(node) {
          return _get(FontStyleAttributor.prototype.__proto__ || Object.getPrototypeOf(FontStyleAttributor.prototype), 'value', this).call(this, node).replace(/["']/g, '');
        }
      }]);

      return FontStyleAttributor;
    }(_parchment2.default.Attributor.Style);

    var FontStyle = new FontStyleAttributor('font', 'font-family', config);

    exports.FontStyle = FontStyle;
    exports.FontClass = FontClass;

    /***/ }),
    /* 40 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SizeStyle = exports.SizeClass = undefined;

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var SizeClass = new _parchment2.default.Attributor.Class('size', 'ql-size', {
      scope: _parchment2.default.Scope.INLINE,
      whitelist: ['small', 'large', 'huge']
    });
    var SizeStyle = new _parchment2.default.Attributor.Style('size', 'font-size', {
      scope: _parchment2.default.Scope.INLINE,
      whitelist: ['10px', '18px', '32px']
    });

    exports.SizeClass = SizeClass;
    exports.SizeStyle = SizeStyle;

    /***/ }),
    /* 41 */
    /***/ (function(module, exports, __webpack_require__) {


    module.exports = {
      'align': {
        '': __webpack_require__(76),
        'center': __webpack_require__(77),
        'right': __webpack_require__(78),
        'justify': __webpack_require__(79)
      },
      'background': __webpack_require__(80),
      'blockquote': __webpack_require__(81),
      'bold': __webpack_require__(82),
      'clean': __webpack_require__(83),
      'code': __webpack_require__(58),
      'code-block': __webpack_require__(58),
      'color': __webpack_require__(84),
      'direction': {
        '': __webpack_require__(85),
        'rtl': __webpack_require__(86)
      },
      'float': {
        'center': __webpack_require__(87),
        'full': __webpack_require__(88),
        'left': __webpack_require__(89),
        'right': __webpack_require__(90)
      },
      'formula': __webpack_require__(91),
      'header': {
        '1': __webpack_require__(92),
        '2': __webpack_require__(93)
      },
      'italic': __webpack_require__(94),
      'image': __webpack_require__(95),
      'indent': {
        '+1': __webpack_require__(96),
        '-1': __webpack_require__(97)
      },
      'link': __webpack_require__(98),
      'list': {
        'ordered': __webpack_require__(99),
        'bullet': __webpack_require__(100),
        'check': __webpack_require__(101)
      },
      'script': {
        'sub': __webpack_require__(102),
        'super': __webpack_require__(103)
      },
      'strike': __webpack_require__(104),
      'underline': __webpack_require__(105),
      'video': __webpack_require__(106)
    };

    /***/ }),
    /* 42 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getLastChangeIndex = exports.default = undefined;

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    var _quill = __webpack_require__(5);

    var _quill2 = _interopRequireDefault(_quill);

    var _module = __webpack_require__(9);

    var _module2 = _interopRequireDefault(_module);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var History = function (_Module) {
      _inherits(History, _Module);

      function History(quill, options) {
        _classCallCheck(this, History);

        var _this = _possibleConstructorReturn(this, (History.__proto__ || Object.getPrototypeOf(History)).call(this, quill, options));

        _this.lastRecorded = 0;
        _this.ignoreChange = false;
        _this.clear();
        _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (eventName, delta, oldDelta, source) {
          if (eventName !== _quill2.default.events.TEXT_CHANGE || _this.ignoreChange) return;
          if (!_this.options.userOnly || source === _quill2.default.sources.USER) {
            _this.record(delta, oldDelta);
          } else {
            _this.transform(delta);
          }
        });
        _this.quill.keyboard.addBinding({ key: 'Z', shortKey: true }, _this.undo.bind(_this));
        _this.quill.keyboard.addBinding({ key: 'Z', shortKey: true, shiftKey: true }, _this.redo.bind(_this));
        if (/Win/i.test(navigator.platform)) {
          _this.quill.keyboard.addBinding({ key: 'Y', shortKey: true }, _this.redo.bind(_this));
        }
        return _this;
      }

      _createClass(History, [{
        key: 'change',
        value: function change(source, dest) {
          if (this.stack[source].length === 0) return;
          var delta = this.stack[source].pop();
          this.stack[dest].push(delta);
          this.lastRecorded = 0;
          this.ignoreChange = true;
          this.quill.updateContents(delta[source], _quill2.default.sources.USER);
          this.ignoreChange = false;
          var index = getLastChangeIndex(delta[source]);
          this.quill.setSelection(index);
        }
      }, {
        key: 'clear',
        value: function clear() {
          this.stack = { undo: [], redo: [] };
        }
      }, {
        key: 'cutoff',
        value: function cutoff() {
          this.lastRecorded = 0;
        }
      }, {
        key: 'record',
        value: function record(changeDelta, oldDelta) {
          if (changeDelta.ops.length === 0) return;
          this.stack.redo = [];
          var undoDelta = this.quill.getContents().diff(oldDelta);
          var timestamp = Date.now();
          if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {
            var delta = this.stack.undo.pop();
            undoDelta = undoDelta.compose(delta.undo);
            changeDelta = delta.redo.compose(changeDelta);
          } else {
            this.lastRecorded = timestamp;
          }
          this.stack.undo.push({
            redo: changeDelta,
            undo: undoDelta
          });
          if (this.stack.undo.length > this.options.maxStack) {
            this.stack.undo.shift();
          }
        }
      }, {
        key: 'redo',
        value: function redo() {
          this.change('redo', 'undo');
        }
      }, {
        key: 'transform',
        value: function transform(delta) {
          this.stack.undo.forEach(function (change) {
            change.undo = delta.transform(change.undo, true);
            change.redo = delta.transform(change.redo, true);
          });
          this.stack.redo.forEach(function (change) {
            change.undo = delta.transform(change.undo, true);
            change.redo = delta.transform(change.redo, true);
          });
        }
      }, {
        key: 'undo',
        value: function undo() {
          this.change('undo', 'redo');
        }
      }]);

      return History;
    }(_module2.default);

    History.DEFAULTS = {
      delay: 1000,
      maxStack: 100,
      userOnly: false
    };

    function endsWithNewlineChange(delta) {
      var lastOp = delta.ops[delta.ops.length - 1];
      if (lastOp == null) return false;
      if (lastOp.insert != null) {
        return typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\n');
      }
      if (lastOp.attributes != null) {
        return Object.keys(lastOp.attributes).some(function (attr) {
          return _parchment2.default.query(attr, _parchment2.default.Scope.BLOCK) != null;
        });
      }
      return false;
    }

    function getLastChangeIndex(delta) {
      var deleteLength = delta.reduce(function (length, op) {
        length += op.delete || 0;
        return length;
      }, 0);
      var changeIndex = delta.length() - deleteLength;
      if (endsWithNewlineChange(delta)) {
        changeIndex -= 1;
      }
      return changeIndex;
    }

    exports.default = History;
    exports.getLastChangeIndex = getLastChangeIndex;

    /***/ }),
    /* 43 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.BaseTooltip = undefined;

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _extend = __webpack_require__(3);

    var _extend2 = _interopRequireDefault(_extend);

    var _quillDelta = __webpack_require__(2);

    var _quillDelta2 = _interopRequireDefault(_quillDelta);

    var _emitter = __webpack_require__(8);

    var _emitter2 = _interopRequireDefault(_emitter);

    var _keyboard = __webpack_require__(23);

    var _keyboard2 = _interopRequireDefault(_keyboard);

    var _theme = __webpack_require__(34);

    var _theme2 = _interopRequireDefault(_theme);

    var _colorPicker = __webpack_require__(59);

    var _colorPicker2 = _interopRequireDefault(_colorPicker);

    var _iconPicker = __webpack_require__(60);

    var _iconPicker2 = _interopRequireDefault(_iconPicker);

    var _picker = __webpack_require__(28);

    var _picker2 = _interopRequireDefault(_picker);

    var _tooltip = __webpack_require__(61);

    var _tooltip2 = _interopRequireDefault(_tooltip);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var ALIGNS = [false, 'center', 'right', 'justify'];

    var COLORS = ["#000000", "#e60000", "#ff9900", "#ffff00", "#008a00", "#0066cc", "#9933ff", "#ffffff", "#facccc", "#ffebcc", "#ffffcc", "#cce8cc", "#cce0f5", "#ebd6ff", "#bbbbbb", "#f06666", "#ffc266", "#ffff66", "#66b966", "#66a3e0", "#c285ff", "#888888", "#a10000", "#b26b00", "#b2b200", "#006100", "#0047b2", "#6b24b2", "#444444", "#5c0000", "#663d00", "#666600", "#003700", "#002966", "#3d1466"];

    var FONTS = [false, 'serif', 'monospace'];

    var HEADERS = ['1', '2', '3', false];

    var SIZES = ['small', false, 'large', 'huge'];

    var BaseTheme = function (_Theme) {
      _inherits(BaseTheme, _Theme);

      function BaseTheme(quill, options) {
        _classCallCheck(this, BaseTheme);

        var _this = _possibleConstructorReturn(this, (BaseTheme.__proto__ || Object.getPrototypeOf(BaseTheme)).call(this, quill, options));

        var listener = function listener(e) {
          if (!document.body.contains(quill.root)) {
            return document.body.removeEventListener('click', listener);
          }
          if (_this.tooltip != null && !_this.tooltip.root.contains(e.target) && document.activeElement !== _this.tooltip.textbox && !_this.quill.hasFocus()) {
            _this.tooltip.hide();
          }
          if (_this.pickers != null) {
            _this.pickers.forEach(function (picker) {
              if (!picker.container.contains(e.target)) {
                picker.close();
              }
            });
          }
        };
        quill.emitter.listenDOM('click', document.body, listener);
        return _this;
      }

      _createClass(BaseTheme, [{
        key: 'addModule',
        value: function addModule(name) {
          var module = _get(BaseTheme.prototype.__proto__ || Object.getPrototypeOf(BaseTheme.prototype), 'addModule', this).call(this, name);
          if (name === 'toolbar') {
            this.extendToolbar(module);
          }
          return module;
        }
      }, {
        key: 'buildButtons',
        value: function buildButtons(buttons, icons) {
          buttons.forEach(function (button) {
            var className = button.getAttribute('class') || '';
            className.split(/\s+/).forEach(function (name) {
              if (!name.startsWith('ql-')) return;
              name = name.slice('ql-'.length);
              if (icons[name] == null) return;
              if (name === 'direction') {
                button.innerHTML = icons[name][''] + icons[name]['rtl'];
              } else if (typeof icons[name] === 'string') {
                button.innerHTML = icons[name];
              } else {
                var value = button.value || '';
                if (value != null && icons[name][value]) {
                  button.innerHTML = icons[name][value];
                }
              }
            });
          });
        }
      }, {
        key: 'buildPickers',
        value: function buildPickers(selects, icons) {
          var _this2 = this;

          this.pickers = selects.map(function (select) {
            if (select.classList.contains('ql-align')) {
              if (select.querySelector('option') == null) {
                fillSelect(select, ALIGNS);
              }
              return new _iconPicker2.default(select, icons.align);
            } else if (select.classList.contains('ql-background') || select.classList.contains('ql-color')) {
              var format = select.classList.contains('ql-background') ? 'background' : 'color';
              if (select.querySelector('option') == null) {
                fillSelect(select, COLORS, format === 'background' ? '#ffffff' : '#000000');
              }
              return new _colorPicker2.default(select, icons[format]);
            } else {
              if (select.querySelector('option') == null) {
                if (select.classList.contains('ql-font')) {
                  fillSelect(select, FONTS);
                } else if (select.classList.contains('ql-header')) {
                  fillSelect(select, HEADERS);
                } else if (select.classList.contains('ql-size')) {
                  fillSelect(select, SIZES);
                }
              }
              return new _picker2.default(select);
            }
          });
          var update = function update() {
            _this2.pickers.forEach(function (picker) {
              picker.update();
            });
          };
          this.quill.on(_emitter2.default.events.EDITOR_CHANGE, update);
        }
      }]);

      return BaseTheme;
    }(_theme2.default);

    BaseTheme.DEFAULTS = (0, _extend2.default)(true, {}, _theme2.default.DEFAULTS, {
      modules: {
        toolbar: {
          handlers: {
            formula: function formula() {
              this.quill.theme.tooltip.edit('formula');
            },
            image: function image() {
              var _this3 = this;

              var fileInput = this.container.querySelector('input.ql-image[type=file]');
              if (fileInput == null) {
                fileInput = document.createElement('input');
                fileInput.setAttribute('type', 'file');
                fileInput.setAttribute('accept', 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon');
                fileInput.classList.add('ql-image');
                fileInput.addEventListener('change', function () {
                  if (fileInput.files != null && fileInput.files[0] != null) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                      var range = _this3.quill.getSelection(true);
                      _this3.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert({ image: e.target.result }), _emitter2.default.sources.USER);
                      _this3.quill.setSelection(range.index + 1, _emitter2.default.sources.SILENT);
                      fileInput.value = "";
                    };
                    reader.readAsDataURL(fileInput.files[0]);
                  }
                });
                this.container.appendChild(fileInput);
              }
              fileInput.click();
            },
            video: function video() {
              this.quill.theme.tooltip.edit('video');
            }
          }
        }
      }
    });

    var BaseTooltip = function (_Tooltip) {
      _inherits(BaseTooltip, _Tooltip);

      function BaseTooltip(quill, boundsContainer) {
        _classCallCheck(this, BaseTooltip);

        var _this4 = _possibleConstructorReturn(this, (BaseTooltip.__proto__ || Object.getPrototypeOf(BaseTooltip)).call(this, quill, boundsContainer));

        _this4.textbox = _this4.root.querySelector('input[type="text"]');
        _this4.listen();
        return _this4;
      }

      _createClass(BaseTooltip, [{
        key: 'listen',
        value: function listen() {
          var _this5 = this;

          this.textbox.addEventListener('keydown', function (event) {
            if (_keyboard2.default.match(event, 'enter')) {
              _this5.save();
              event.preventDefault();
            } else if (_keyboard2.default.match(event, 'escape')) {
              _this5.cancel();
              event.preventDefault();
            }
          });
        }
      }, {
        key: 'cancel',
        value: function cancel() {
          this.hide();
        }
      }, {
        key: 'edit',
        value: function edit() {
          var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'link';
          var preview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

          this.root.classList.remove('ql-hidden');
          this.root.classList.add('ql-editing');
          if (preview != null) {
            this.textbox.value = preview;
          } else if (mode !== this.root.getAttribute('data-mode')) {
            this.textbox.value = '';
          }
          this.position(this.quill.getBounds(this.quill.selection.savedRange));
          this.textbox.select();
          this.textbox.setAttribute('placeholder', this.textbox.getAttribute('data-' + mode) || '');
          this.root.setAttribute('data-mode', mode);
        }
      }, {
        key: 'restoreFocus',
        value: function restoreFocus() {
          var scrollTop = this.quill.scrollingContainer.scrollTop;
          this.quill.focus();
          this.quill.scrollingContainer.scrollTop = scrollTop;
        }
      }, {
        key: 'save',
        value: function save() {
          var value = this.textbox.value;
          switch (this.root.getAttribute('data-mode')) {
            case 'link':
              {
                var scrollTop = this.quill.root.scrollTop;
                if (this.linkRange) {
                  this.quill.formatText(this.linkRange, 'link', value, _emitter2.default.sources.USER);
                  delete this.linkRange;
                } else {
                  this.restoreFocus();
                  this.quill.format('link', value, _emitter2.default.sources.USER);
                }
                this.quill.root.scrollTop = scrollTop;
                break;
              }
            case 'video':
              {
                value = extractVideoUrl(value);
              } // eslint-disable-next-line no-fallthrough
            case 'formula':
              {
                if (!value) break;
                var range = this.quill.getSelection(true);
                if (range != null) {
                  var index = range.index + range.length;
                  this.quill.insertEmbed(index, this.root.getAttribute('data-mode'), value, _emitter2.default.sources.USER);
                  if (this.root.getAttribute('data-mode') === 'formula') {
                    this.quill.insertText(index + 1, ' ', _emitter2.default.sources.USER);
                  }
                  this.quill.setSelection(index + 2, _emitter2.default.sources.USER);
                }
                break;
              }
          }
          this.textbox.value = '';
          this.hide();
        }
      }]);

      return BaseTooltip;
    }(_tooltip2.default);

    function extractVideoUrl(url) {
      var match = url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);
      if (match) {
        return (match[1] || 'https') + '://www.youtube.com/embed/' + match[2] + '?showinfo=0';
      }
      if (match = url.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/)) {
        // eslint-disable-line no-cond-assign
        return (match[1] || 'https') + '://player.vimeo.com/video/' + match[2] + '/';
      }
      return url;
    }

    function fillSelect(select, values) {
      var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      values.forEach(function (value) {
        var option = document.createElement('option');
        if (value === defaultValue) {
          option.setAttribute('selected', 'selected');
        } else {
          option.setAttribute('value', value);
        }
        select.appendChild(option);
      });
    }

    exports.BaseTooltip = BaseTooltip;
    exports.default = BaseTheme;

    /***/ }),
    /* 44 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    var LinkedList = /** @class */ (function () {
        function LinkedList() {
            this.head = this.tail = null;
            this.length = 0;
        }
        LinkedList.prototype.append = function () {
            var nodes = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nodes[_i] = arguments[_i];
            }
            this.insertBefore(nodes[0], null);
            if (nodes.length > 1) {
                this.append.apply(this, nodes.slice(1));
            }
        };
        LinkedList.prototype.contains = function (node) {
            var cur, next = this.iterator();
            while ((cur = next())) {
                if (cur === node)
                    return true;
            }
            return false;
        };
        LinkedList.prototype.insertBefore = function (node, refNode) {
            if (!node)
                return;
            node.next = refNode;
            if (refNode != null) {
                node.prev = refNode.prev;
                if (refNode.prev != null) {
                    refNode.prev.next = node;
                }
                refNode.prev = node;
                if (refNode === this.head) {
                    this.head = node;
                }
            }
            else if (this.tail != null) {
                this.tail.next = node;
                node.prev = this.tail;
                this.tail = node;
            }
            else {
                node.prev = null;
                this.head = this.tail = node;
            }
            this.length += 1;
        };
        LinkedList.prototype.offset = function (target) {
            var index = 0, cur = this.head;
            while (cur != null) {
                if (cur === target)
                    return index;
                index += cur.length();
                cur = cur.next;
            }
            return -1;
        };
        LinkedList.prototype.remove = function (node) {
            if (!this.contains(node))
                return;
            if (node.prev != null)
                node.prev.next = node.next;
            if (node.next != null)
                node.next.prev = node.prev;
            if (node === this.head)
                this.head = node.next;
            if (node === this.tail)
                this.tail = node.prev;
            this.length -= 1;
        };
        LinkedList.prototype.iterator = function (curNode) {
            if (curNode === void 0) { curNode = this.head; }
            // TODO use yield when we can
            return function () {
                var ret = curNode;
                if (curNode != null)
                    curNode = curNode.next;
                return ret;
            };
        };
        LinkedList.prototype.find = function (index, inclusive) {
            if (inclusive === void 0) { inclusive = false; }
            var cur, next = this.iterator();
            while ((cur = next())) {
                var length = cur.length();
                if (index < length ||
                    (inclusive && index === length && (cur.next == null || cur.next.length() !== 0))) {
                    return [cur, index];
                }
                index -= length;
            }
            return [null, 0];
        };
        LinkedList.prototype.forEach = function (callback) {
            var cur, next = this.iterator();
            while ((cur = next())) {
                callback(cur);
            }
        };
        LinkedList.prototype.forEachAt = function (index, length, callback) {
            if (length <= 0)
                return;
            var _a = this.find(index), startNode = _a[0], offset = _a[1];
            var cur, curIndex = index - offset, next = this.iterator(startNode);
            while ((cur = next()) && curIndex < index + length) {
                var curLength = cur.length();
                if (index > curIndex) {
                    callback(cur, index - curIndex, Math.min(length, curIndex + curLength - index));
                }
                else {
                    callback(cur, 0, Math.min(curLength, index + length - curIndex));
                }
                curIndex += curLength;
            }
        };
        LinkedList.prototype.map = function (callback) {
            return this.reduce(function (memo, cur) {
                memo.push(callback(cur));
                return memo;
            }, []);
        };
        LinkedList.prototype.reduce = function (callback, memo) {
            var cur, next = this.iterator();
            while ((cur = next())) {
                memo = callback(memo, cur);
            }
            return memo;
        };
        return LinkedList;
    }());
    exports.default = LinkedList;


    /***/ }),
    /* 45 */
    /***/ (function(module, exports, __webpack_require__) {

    var __extends = (this && this.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    var container_1 = __webpack_require__(17);
    var Registry = __webpack_require__(1);
    var OBSERVER_CONFIG = {
        attributes: true,
        characterData: true,
        characterDataOldValue: true,
        childList: true,
        subtree: true,
    };
    var MAX_OPTIMIZE_ITERATIONS = 100;
    var ScrollBlot = /** @class */ (function (_super) {
        __extends(ScrollBlot, _super);
        function ScrollBlot(node) {
            var _this = _super.call(this, node) || this;
            _this.scroll = _this;
            _this.observer = new MutationObserver(function (mutations) {
                _this.update(mutations);
            });
            _this.observer.observe(_this.domNode, OBSERVER_CONFIG);
            _this.attach();
            return _this;
        }
        ScrollBlot.prototype.detach = function () {
            _super.prototype.detach.call(this);
            this.observer.disconnect();
        };
        ScrollBlot.prototype.deleteAt = function (index, length) {
            this.update();
            if (index === 0 && length === this.length()) {
                this.children.forEach(function (child) {
                    child.remove();
                });
            }
            else {
                _super.prototype.deleteAt.call(this, index, length);
            }
        };
        ScrollBlot.prototype.formatAt = function (index, length, name, value) {
            this.update();
            _super.prototype.formatAt.call(this, index, length, name, value);
        };
        ScrollBlot.prototype.insertAt = function (index, value, def) {
            this.update();
            _super.prototype.insertAt.call(this, index, value, def);
        };
        ScrollBlot.prototype.optimize = function (mutations, context) {
            var _this = this;
            if (mutations === void 0) { mutations = []; }
            if (context === void 0) { context = {}; }
            _super.prototype.optimize.call(this, context);
            // We must modify mutations directly, cannot make copy and then modify
            var records = [].slice.call(this.observer.takeRecords());
            // Array.push currently seems to be implemented by a non-tail recursive function
            // so we cannot just mutations.push.apply(mutations, this.observer.takeRecords());
            while (records.length > 0)
                mutations.push(records.pop());
            // TODO use WeakMap
            var mark = function (blot, markParent) {
                if (markParent === void 0) { markParent = true; }
                if (blot == null || blot === _this)
                    return;
                if (blot.domNode.parentNode == null)
                    return;
                // @ts-ignore
                if (blot.domNode[Registry.DATA_KEY].mutations == null) {
                    // @ts-ignore
                    blot.domNode[Registry.DATA_KEY].mutations = [];
                }
                if (markParent)
                    mark(blot.parent);
            };
            var optimize = function (blot) {
                // Post-order traversal
                if (
                // @ts-ignore
                blot.domNode[Registry.DATA_KEY] == null ||
                    // @ts-ignore
                    blot.domNode[Registry.DATA_KEY].mutations == null) {
                    return;
                }
                if (blot instanceof container_1.default) {
                    blot.children.forEach(optimize);
                }
                blot.optimize(context);
            };
            var remaining = mutations;
            for (var i = 0; remaining.length > 0; i += 1) {
                if (i >= MAX_OPTIMIZE_ITERATIONS) {
                    throw new Error('[Parchment] Maximum optimize iterations reached');
                }
                remaining.forEach(function (mutation) {
                    var blot = Registry.find(mutation.target, true);
                    if (blot == null)
                        return;
                    if (blot.domNode === mutation.target) {
                        if (mutation.type === 'childList') {
                            mark(Registry.find(mutation.previousSibling, false));
                            [].forEach.call(mutation.addedNodes, function (node) {
                                var child = Registry.find(node, false);
                                mark(child, false);
                                if (child instanceof container_1.default) {
                                    child.children.forEach(function (grandChild) {
                                        mark(grandChild, false);
                                    });
                                }
                            });
                        }
                        else if (mutation.type === 'attributes') {
                            mark(blot.prev);
                        }
                    }
                    mark(blot);
                });
                this.children.forEach(optimize);
                remaining = [].slice.call(this.observer.takeRecords());
                records = remaining.slice();
                while (records.length > 0)
                    mutations.push(records.pop());
            }
        };
        ScrollBlot.prototype.update = function (mutations, context) {
            var _this = this;
            if (context === void 0) { context = {}; }
            mutations = mutations || this.observer.takeRecords();
            // TODO use WeakMap
            mutations
                .map(function (mutation) {
                var blot = Registry.find(mutation.target, true);
                if (blot == null)
                    return null;
                // @ts-ignore
                if (blot.domNode[Registry.DATA_KEY].mutations == null) {
                    // @ts-ignore
                    blot.domNode[Registry.DATA_KEY].mutations = [mutation];
                    return blot;
                }
                else {
                    // @ts-ignore
                    blot.domNode[Registry.DATA_KEY].mutations.push(mutation);
                    return null;
                }
            })
                .forEach(function (blot) {
                if (blot == null ||
                    blot === _this ||
                    //@ts-ignore
                    blot.domNode[Registry.DATA_KEY] == null)
                    return;
                // @ts-ignore
                blot.update(blot.domNode[Registry.DATA_KEY].mutations || [], context);
            });
            // @ts-ignore
            if (this.domNode[Registry.DATA_KEY].mutations != null) {
                // @ts-ignore
                _super.prototype.update.call(this, this.domNode[Registry.DATA_KEY].mutations, context);
            }
            this.optimize(mutations, context);
        };
        ScrollBlot.blotName = 'scroll';
        ScrollBlot.defaultChild = 'block';
        ScrollBlot.scope = Registry.Scope.BLOCK_BLOT;
        ScrollBlot.tagName = 'DIV';
        return ScrollBlot;
    }(container_1.default));
    exports.default = ScrollBlot;


    /***/ }),
    /* 46 */
    /***/ (function(module, exports, __webpack_require__) {

    var __extends = (this && this.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    var format_1 = __webpack_require__(18);
    var Registry = __webpack_require__(1);
    // Shallow object comparison
    function isEqual(obj1, obj2) {
        if (Object.keys(obj1).length !== Object.keys(obj2).length)
            return false;
        // @ts-ignore
        for (var prop in obj1) {
            // @ts-ignore
            if (obj1[prop] !== obj2[prop])
                return false;
        }
        return true;
    }
    var InlineBlot = /** @class */ (function (_super) {
        __extends(InlineBlot, _super);
        function InlineBlot() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        InlineBlot.formats = function (domNode) {
            if (domNode.tagName === InlineBlot.tagName)
                return undefined;
            return _super.formats.call(this, domNode);
        };
        InlineBlot.prototype.format = function (name, value) {
            var _this = this;
            if (name === this.statics.blotName && !value) {
                this.children.forEach(function (child) {
                    if (!(child instanceof format_1.default)) {
                        child = child.wrap(InlineBlot.blotName, true);
                    }
                    _this.attributes.copy(child);
                });
                this.unwrap();
            }
            else {
                _super.prototype.format.call(this, name, value);
            }
        };
        InlineBlot.prototype.formatAt = function (index, length, name, value) {
            if (this.formats()[name] != null || Registry.query(name, Registry.Scope.ATTRIBUTE)) {
                var blot = this.isolate(index, length);
                blot.format(name, value);
            }
            else {
                _super.prototype.formatAt.call(this, index, length, name, value);
            }
        };
        InlineBlot.prototype.optimize = function (context) {
            _super.prototype.optimize.call(this, context);
            var formats = this.formats();
            if (Object.keys(formats).length === 0) {
                return this.unwrap(); // unformatted span
            }
            var next = this.next;
            if (next instanceof InlineBlot && next.prev === this && isEqual(formats, next.formats())) {
                next.moveChildren(this);
                next.remove();
            }
        };
        InlineBlot.blotName = 'inline';
        InlineBlot.scope = Registry.Scope.INLINE_BLOT;
        InlineBlot.tagName = 'SPAN';
        return InlineBlot;
    }(format_1.default));
    exports.default = InlineBlot;


    /***/ }),
    /* 47 */
    /***/ (function(module, exports, __webpack_require__) {

    var __extends = (this && this.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    var format_1 = __webpack_require__(18);
    var Registry = __webpack_require__(1);
    var BlockBlot = /** @class */ (function (_super) {
        __extends(BlockBlot, _super);
        function BlockBlot() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BlockBlot.formats = function (domNode) {
            var tagName = Registry.query(BlockBlot.blotName).tagName;
            if (domNode.tagName === tagName)
                return undefined;
            return _super.formats.call(this, domNode);
        };
        BlockBlot.prototype.format = function (name, value) {
            if (Registry.query(name, Registry.Scope.BLOCK) == null) {
                return;
            }
            else if (name === this.statics.blotName && !value) {
                this.replaceWith(BlockBlot.blotName);
            }
            else {
                _super.prototype.format.call(this, name, value);
            }
        };
        BlockBlot.prototype.formatAt = function (index, length, name, value) {
            if (Registry.query(name, Registry.Scope.BLOCK) != null) {
                this.format(name, value);
            }
            else {
                _super.prototype.formatAt.call(this, index, length, name, value);
            }
        };
        BlockBlot.prototype.insertAt = function (index, value, def) {
            if (def == null || Registry.query(value, Registry.Scope.INLINE) != null) {
                // Insert text or inline
                _super.prototype.insertAt.call(this, index, value, def);
            }
            else {
                var after = this.split(index);
                var blot = Registry.create(value, def);
                after.parent.insertBefore(blot, after);
            }
        };
        BlockBlot.prototype.update = function (mutations, context) {
            if (navigator.userAgent.match(/Trident/)) {
                this.build();
            }
            else {
                _super.prototype.update.call(this, mutations, context);
            }
        };
        BlockBlot.blotName = 'block';
        BlockBlot.scope = Registry.Scope.BLOCK_BLOT;
        BlockBlot.tagName = 'P';
        return BlockBlot;
    }(format_1.default));
    exports.default = BlockBlot;


    /***/ }),
    /* 48 */
    /***/ (function(module, exports, __webpack_require__) {

    var __extends = (this && this.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    var leaf_1 = __webpack_require__(19);
    var EmbedBlot = /** @class */ (function (_super) {
        __extends(EmbedBlot, _super);
        function EmbedBlot() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        EmbedBlot.formats = function (domNode) {
            return undefined;
        };
        EmbedBlot.prototype.format = function (name, value) {
            // super.formatAt wraps, which is what we want in general,
            // but this allows subclasses to overwrite for formats
            // that just apply to particular embeds
            _super.prototype.formatAt.call(this, 0, this.length(), name, value);
        };
        EmbedBlot.prototype.formatAt = function (index, length, name, value) {
            if (index === 0 && length === this.length()) {
                this.format(name, value);
            }
            else {
                _super.prototype.formatAt.call(this, index, length, name, value);
            }
        };
        EmbedBlot.prototype.formats = function () {
            return this.statics.formats(this.domNode);
        };
        return EmbedBlot;
    }(leaf_1.default));
    exports.default = EmbedBlot;


    /***/ }),
    /* 49 */
    /***/ (function(module, exports, __webpack_require__) {

    var __extends = (this && this.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    var leaf_1 = __webpack_require__(19);
    var Registry = __webpack_require__(1);
    var TextBlot = /** @class */ (function (_super) {
        __extends(TextBlot, _super);
        function TextBlot(node) {
            var _this = _super.call(this, node) || this;
            _this.text = _this.statics.value(_this.domNode);
            return _this;
        }
        TextBlot.create = function (value) {
            return document.createTextNode(value);
        };
        TextBlot.value = function (domNode) {
            var text = domNode.data;
            // @ts-ignore
            if (text['normalize'])
                text = text['normalize']();
            return text;
        };
        TextBlot.prototype.deleteAt = function (index, length) {
            this.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);
        };
        TextBlot.prototype.index = function (node, offset) {
            if (this.domNode === node) {
                return offset;
            }
            return -1;
        };
        TextBlot.prototype.insertAt = function (index, value, def) {
            if (def == null) {
                this.text = this.text.slice(0, index) + value + this.text.slice(index);
                this.domNode.data = this.text;
            }
            else {
                _super.prototype.insertAt.call(this, index, value, def);
            }
        };
        TextBlot.prototype.length = function () {
            return this.text.length;
        };
        TextBlot.prototype.optimize = function (context) {
            _super.prototype.optimize.call(this, context);
            this.text = this.statics.value(this.domNode);
            if (this.text.length === 0) {
                this.remove();
            }
            else if (this.next instanceof TextBlot && this.next.prev === this) {
                this.insertAt(this.length(), this.next.value());
                this.next.remove();
            }
        };
        TextBlot.prototype.position = function (index, inclusive) {
            return [this.domNode, index];
        };
        TextBlot.prototype.split = function (index, force) {
            if (force === void 0) { force = false; }
            if (!force) {
                if (index === 0)
                    return this;
                if (index === this.length())
                    return this.next;
            }
            var after = Registry.create(this.domNode.splitText(index));
            this.parent.insertBefore(after, this.next);
            this.text = this.statics.value(this.domNode);
            return after;
        };
        TextBlot.prototype.update = function (mutations, context) {
            var _this = this;
            if (mutations.some(function (mutation) {
                return mutation.type === 'characterData' && mutation.target === _this.domNode;
            })) {
                this.text = this.statics.value(this.domNode);
            }
        };
        TextBlot.prototype.value = function () {
            return this.text;
        };
        TextBlot.blotName = 'text';
        TextBlot.scope = Registry.Scope.INLINE_BLOT;
        return TextBlot;
    }(leaf_1.default));
    exports.default = TextBlot;


    /***/ }),
    /* 50 */
    /***/ (function(module, exports, __webpack_require__) {


    var elem = document.createElement('div');
    elem.classList.toggle('test-class', false);
    if (elem.classList.contains('test-class')) {
      var _toggle = DOMTokenList.prototype.toggle;
      DOMTokenList.prototype.toggle = function (token, force) {
        if (arguments.length > 1 && !this.contains(token) === !force) {
          return force;
        } else {
          return _toggle.call(this, token);
        }
      };
    }

    if (!String.prototype.startsWith) {
      String.prototype.startsWith = function (searchString, position) {
        position = position || 0;
        return this.substr(position, searchString.length) === searchString;
      };
    }

    if (!String.prototype.endsWith) {
      String.prototype.endsWith = function (searchString, position) {
        var subjectString = this.toString();
        if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
          position = subjectString.length;
        }
        position -= searchString.length;
        var lastIndex = subjectString.indexOf(searchString, position);
        return lastIndex !== -1 && lastIndex === position;
      };
    }

    if (!Array.prototype.find) {
      Object.defineProperty(Array.prototype, "find", {
        value: function value(predicate) {
          if (this === null) {
            throw new TypeError('Array.prototype.find called on null or undefined');
          }
          if (typeof predicate !== 'function') {
            throw new TypeError('predicate must be a function');
          }
          var list = Object(this);
          var length = list.length >>> 0;
          var thisArg = arguments[1];
          var value;

          for (var i = 0; i < length; i++) {
            value = list[i];
            if (predicate.call(thisArg, value, i, list)) {
              return value;
            }
          }
          return undefined;
        }
      });
    }

    document.addEventListener("DOMContentLoaded", function () {
      // Disable resizing in Firefox
      document.execCommand("enableObjectResizing", false, false);
      // Disable automatic linkifying in IE11
      document.execCommand("autoUrlDetect", false, false);
    });

    /***/ }),
    /* 51 */
    /***/ (function(module, exports) {

    /**
     * This library modifies the diff-patch-match library by Neil Fraser
     * by removing the patch and match functionality and certain advanced
     * options in the diff function. The original license is as follows:
     *
     * ===
     *
     * Diff Match and Patch
     *
     * Copyright 2006 Google Inc.
     * http://code.google.com/p/google-diff-match-patch/
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */


    /**
     * The data structure representing a diff is an array of tuples:
     * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
     * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
     */
    var DIFF_DELETE = -1;
    var DIFF_INSERT = 1;
    var DIFF_EQUAL = 0;


    /**
     * Find the differences between two texts.  Simplifies the problem by stripping
     * any common prefix or suffix off the texts before diffing.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @param {Int} cursor_pos Expected edit position in text1 (optional)
     * @return {Array} Array of diff tuples.
     */
    function diff_main(text1, text2, cursor_pos) {
      // Check for equality (speedup).
      if (text1 == text2) {
        if (text1) {
          return [[DIFF_EQUAL, text1]];
        }
        return [];
      }

      // Check cursor_pos within bounds
      if (cursor_pos < 0 || text1.length < cursor_pos) {
        cursor_pos = null;
      }

      // Trim off common prefix (speedup).
      var commonlength = diff_commonPrefix(text1, text2);
      var commonprefix = text1.substring(0, commonlength);
      text1 = text1.substring(commonlength);
      text2 = text2.substring(commonlength);

      // Trim off common suffix (speedup).
      commonlength = diff_commonSuffix(text1, text2);
      var commonsuffix = text1.substring(text1.length - commonlength);
      text1 = text1.substring(0, text1.length - commonlength);
      text2 = text2.substring(0, text2.length - commonlength);

      // Compute the diff on the middle block.
      var diffs = diff_compute_(text1, text2);

      // Restore the prefix and suffix.
      if (commonprefix) {
        diffs.unshift([DIFF_EQUAL, commonprefix]);
      }
      if (commonsuffix) {
        diffs.push([DIFF_EQUAL, commonsuffix]);
      }
      diff_cleanupMerge(diffs);
      if (cursor_pos != null) {
        diffs = fix_cursor(diffs, cursor_pos);
      }
      diffs = fix_emoji(diffs);
      return diffs;
    }

    /**
     * Find the differences between two texts.  Assumes that the texts do not
     * have any common prefix or suffix.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @return {Array} Array of diff tuples.
     */
    function diff_compute_(text1, text2) {
      var diffs;

      if (!text1) {
        // Just add some text (speedup).
        return [[DIFF_INSERT, text2]];
      }

      if (!text2) {
        // Just delete some text (speedup).
        return [[DIFF_DELETE, text1]];
      }

      var longtext = text1.length > text2.length ? text1 : text2;
      var shorttext = text1.length > text2.length ? text2 : text1;
      var i = longtext.indexOf(shorttext);
      if (i != -1) {
        // Shorter text is inside the longer text (speedup).
        diffs = [[DIFF_INSERT, longtext.substring(0, i)],
                 [DIFF_EQUAL, shorttext],
                 [DIFF_INSERT, longtext.substring(i + shorttext.length)]];
        // Swap insertions for deletions if diff is reversed.
        if (text1.length > text2.length) {
          diffs[0][0] = diffs[2][0] = DIFF_DELETE;
        }
        return diffs;
      }

      if (shorttext.length == 1) {
        // Single character string.
        // After the previous speedup, the character can't be an equality.
        return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
      }

      // Check to see if the problem can be split in two.
      var hm = diff_halfMatch_(text1, text2);
      if (hm) {
        // A half-match was found, sort out the return data.
        var text1_a = hm[0];
        var text1_b = hm[1];
        var text2_a = hm[2];
        var text2_b = hm[3];
        var mid_common = hm[4];
        // Send both pairs off for separate processing.
        var diffs_a = diff_main(text1_a, text2_a);
        var diffs_b = diff_main(text1_b, text2_b);
        // Merge the results.
        return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
      }

      return diff_bisect_(text1, text2);
    }

    /**
     * Find the 'middle snake' of a diff, split the problem in two
     * and return the recursively constructed diff.
     * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @return {Array} Array of diff tuples.
     * @private
     */
    function diff_bisect_(text1, text2) {
      // Cache the text lengths to prevent multiple calls.
      var text1_length = text1.length;
      var text2_length = text2.length;
      var max_d = Math.ceil((text1_length + text2_length) / 2);
      var v_offset = max_d;
      var v_length = 2 * max_d;
      var v1 = new Array(v_length);
      var v2 = new Array(v_length);
      // Setting all elements to -1 is faster in Chrome & Firefox than mixing
      // integers and undefined.
      for (var x = 0; x < v_length; x++) {
        v1[x] = -1;
        v2[x] = -1;
      }
      v1[v_offset + 1] = 0;
      v2[v_offset + 1] = 0;
      var delta = text1_length - text2_length;
      // If the total number of characters is odd, then the front path will collide
      // with the reverse path.
      var front = (delta % 2 != 0);
      // Offsets for start and end of k loop.
      // Prevents mapping of space beyond the grid.
      var k1start = 0;
      var k1end = 0;
      var k2start = 0;
      var k2end = 0;
      for (var d = 0; d < max_d; d++) {
        // Walk the front path one step.
        for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
          var k1_offset = v_offset + k1;
          var x1;
          if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {
            x1 = v1[k1_offset + 1];
          } else {
            x1 = v1[k1_offset - 1] + 1;
          }
          var y1 = x1 - k1;
          while (x1 < text1_length && y1 < text2_length &&
                 text1.charAt(x1) == text2.charAt(y1)) {
            x1++;
            y1++;
          }
          v1[k1_offset] = x1;
          if (x1 > text1_length) {
            // Ran off the right of the graph.
            k1end += 2;
          } else if (y1 > text2_length) {
            // Ran off the bottom of the graph.
            k1start += 2;
          } else if (front) {
            var k2_offset = v_offset + delta - k1;
            if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
              // Mirror x2 onto top-left coordinate system.
              var x2 = text1_length - v2[k2_offset];
              if (x1 >= x2) {
                // Overlap detected.
                return diff_bisectSplit_(text1, text2, x1, y1);
              }
            }
          }
        }

        // Walk the reverse path one step.
        for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
          var k2_offset = v_offset + k2;
          var x2;
          if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {
            x2 = v2[k2_offset + 1];
          } else {
            x2 = v2[k2_offset - 1] + 1;
          }
          var y2 = x2 - k2;
          while (x2 < text1_length && y2 < text2_length &&
                 text1.charAt(text1_length - x2 - 1) ==
                 text2.charAt(text2_length - y2 - 1)) {
            x2++;
            y2++;
          }
          v2[k2_offset] = x2;
          if (x2 > text1_length) {
            // Ran off the left of the graph.
            k2end += 2;
          } else if (y2 > text2_length) {
            // Ran off the top of the graph.
            k2start += 2;
          } else if (!front) {
            var k1_offset = v_offset + delta - k2;
            if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
              var x1 = v1[k1_offset];
              var y1 = v_offset + x1 - k1_offset;
              // Mirror x2 onto top-left coordinate system.
              x2 = text1_length - x2;
              if (x1 >= x2) {
                // Overlap detected.
                return diff_bisectSplit_(text1, text2, x1, y1);
              }
            }
          }
        }
      }
      // Diff took too long and hit the deadline or
      // number of diffs equals number of characters, no commonality at all.
      return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
    }

    /**
     * Given the location of the 'middle snake', split the diff in two parts
     * and recurse.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @param {number} x Index of split point in text1.
     * @param {number} y Index of split point in text2.
     * @return {Array} Array of diff tuples.
     */
    function diff_bisectSplit_(text1, text2, x, y) {
      var text1a = text1.substring(0, x);
      var text2a = text2.substring(0, y);
      var text1b = text1.substring(x);
      var text2b = text2.substring(y);

      // Compute both diffs serially.
      var diffs = diff_main(text1a, text2a);
      var diffsb = diff_main(text1b, text2b);

      return diffs.concat(diffsb);
    }

    /**
     * Determine the common prefix of two strings.
     * @param {string} text1 First string.
     * @param {string} text2 Second string.
     * @return {number} The number of characters common to the start of each
     *     string.
     */
    function diff_commonPrefix(text1, text2) {
      // Quick check for common null cases.
      if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
        return 0;
      }
      // Binary search.
      // Performance analysis: http://neil.fraser.name/news/2007/10/09/
      var pointermin = 0;
      var pointermax = Math.min(text1.length, text2.length);
      var pointermid = pointermax;
      var pointerstart = 0;
      while (pointermin < pointermid) {
        if (text1.substring(pointerstart, pointermid) ==
            text2.substring(pointerstart, pointermid)) {
          pointermin = pointermid;
          pointerstart = pointermin;
        } else {
          pointermax = pointermid;
        }
        pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
      }
      return pointermid;
    }

    /**
     * Determine the common suffix of two strings.
     * @param {string} text1 First string.
     * @param {string} text2 Second string.
     * @return {number} The number of characters common to the end of each string.
     */
    function diff_commonSuffix(text1, text2) {
      // Quick check for common null cases.
      if (!text1 || !text2 ||
          text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
        return 0;
      }
      // Binary search.
      // Performance analysis: http://neil.fraser.name/news/2007/10/09/
      var pointermin = 0;
      var pointermax = Math.min(text1.length, text2.length);
      var pointermid = pointermax;
      var pointerend = 0;
      while (pointermin < pointermid) {
        if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==
            text2.substring(text2.length - pointermid, text2.length - pointerend)) {
          pointermin = pointermid;
          pointerend = pointermin;
        } else {
          pointermax = pointermid;
        }
        pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
      }
      return pointermid;
    }

    /**
     * Do the two texts share a substring which is at least half the length of the
     * longer text?
     * This speedup can produce non-minimal diffs.
     * @param {string} text1 First string.
     * @param {string} text2 Second string.
     * @return {Array.<string>} Five element Array, containing the prefix of
     *     text1, the suffix of text1, the prefix of text2, the suffix of
     *     text2 and the common middle.  Or null if there was no match.
     */
    function diff_halfMatch_(text1, text2) {
      var longtext = text1.length > text2.length ? text1 : text2;
      var shorttext = text1.length > text2.length ? text2 : text1;
      if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
        return null;  // Pointless.
      }

      /**
       * Does a substring of shorttext exist within longtext such that the substring
       * is at least half the length of longtext?
       * Closure, but does not reference any external variables.
       * @param {string} longtext Longer string.
       * @param {string} shorttext Shorter string.
       * @param {number} i Start index of quarter length substring within longtext.
       * @return {Array.<string>} Five element Array, containing the prefix of
       *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
       *     of shorttext and the common middle.  Or null if there was no match.
       * @private
       */
      function diff_halfMatchI_(longtext, shorttext, i) {
        // Start with a 1/4 length substring at position i as a seed.
        var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
        var j = -1;
        var best_common = '';
        var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
        while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
          var prefixLength = diff_commonPrefix(longtext.substring(i),
                                               shorttext.substring(j));
          var suffixLength = diff_commonSuffix(longtext.substring(0, i),
                                               shorttext.substring(0, j));
          if (best_common.length < suffixLength + prefixLength) {
            best_common = shorttext.substring(j - suffixLength, j) +
                shorttext.substring(j, j + prefixLength);
            best_longtext_a = longtext.substring(0, i - suffixLength);
            best_longtext_b = longtext.substring(i + prefixLength);
            best_shorttext_a = shorttext.substring(0, j - suffixLength);
            best_shorttext_b = shorttext.substring(j + prefixLength);
          }
        }
        if (best_common.length * 2 >= longtext.length) {
          return [best_longtext_a, best_longtext_b,
                  best_shorttext_a, best_shorttext_b, best_common];
        } else {
          return null;
        }
      }

      // First check if the second quarter is the seed for a half-match.
      var hm1 = diff_halfMatchI_(longtext, shorttext,
                                 Math.ceil(longtext.length / 4));
      // Check again based on the third quarter.
      var hm2 = diff_halfMatchI_(longtext, shorttext,
                                 Math.ceil(longtext.length / 2));
      var hm;
      if (!hm1 && !hm2) {
        return null;
      } else if (!hm2) {
        hm = hm1;
      } else if (!hm1) {
        hm = hm2;
      } else {
        // Both matched.  Select the longest.
        hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
      }

      // A half-match was found, sort out the return data.
      var text1_a, text1_b, text2_a, text2_b;
      if (text1.length > text2.length) {
        text1_a = hm[0];
        text1_b = hm[1];
        text2_a = hm[2];
        text2_b = hm[3];
      } else {
        text2_a = hm[0];
        text2_b = hm[1];
        text1_a = hm[2];
        text1_b = hm[3];
      }
      var mid_common = hm[4];
      return [text1_a, text1_b, text2_a, text2_b, mid_common];
    }

    /**
     * Reorder and merge like edit sections.  Merge equalities.
     * Any edit section can move as long as it doesn't cross an equality.
     * @param {Array} diffs Array of diff tuples.
     */
    function diff_cleanupMerge(diffs) {
      diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.
      var pointer = 0;
      var count_delete = 0;
      var count_insert = 0;
      var text_delete = '';
      var text_insert = '';
      var commonlength;
      while (pointer < diffs.length) {
        switch (diffs[pointer][0]) {
          case DIFF_INSERT:
            count_insert++;
            text_insert += diffs[pointer][1];
            pointer++;
            break;
          case DIFF_DELETE:
            count_delete++;
            text_delete += diffs[pointer][1];
            pointer++;
            break;
          case DIFF_EQUAL:
            // Upon reaching an equality, check for prior redundancies.
            if (count_delete + count_insert > 1) {
              if (count_delete !== 0 && count_insert !== 0) {
                // Factor out any common prefixies.
                commonlength = diff_commonPrefix(text_insert, text_delete);
                if (commonlength !== 0) {
                  if ((pointer - count_delete - count_insert) > 0 &&
                      diffs[pointer - count_delete - count_insert - 1][0] ==
                      DIFF_EQUAL) {
                    diffs[pointer - count_delete - count_insert - 1][1] +=
                        text_insert.substring(0, commonlength);
                  } else {
                    diffs.splice(0, 0, [DIFF_EQUAL,
                                        text_insert.substring(0, commonlength)]);
                    pointer++;
                  }
                  text_insert = text_insert.substring(commonlength);
                  text_delete = text_delete.substring(commonlength);
                }
                // Factor out any common suffixies.
                commonlength = diff_commonSuffix(text_insert, text_delete);
                if (commonlength !== 0) {
                  diffs[pointer][1] = text_insert.substring(text_insert.length -
                      commonlength) + diffs[pointer][1];
                  text_insert = text_insert.substring(0, text_insert.length -
                      commonlength);
                  text_delete = text_delete.substring(0, text_delete.length -
                      commonlength);
                }
              }
              // Delete the offending records and add the merged ones.
              if (count_delete === 0) {
                diffs.splice(pointer - count_insert,
                    count_delete + count_insert, [DIFF_INSERT, text_insert]);
              } else if (count_insert === 0) {
                diffs.splice(pointer - count_delete,
                    count_delete + count_insert, [DIFF_DELETE, text_delete]);
              } else {
                diffs.splice(pointer - count_delete - count_insert,
                    count_delete + count_insert, [DIFF_DELETE, text_delete],
                    [DIFF_INSERT, text_insert]);
              }
              pointer = pointer - count_delete - count_insert +
                        (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;
            } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
              // Merge this equality with the previous one.
              diffs[pointer - 1][1] += diffs[pointer][1];
              diffs.splice(pointer, 1);
            } else {
              pointer++;
            }
            count_insert = 0;
            count_delete = 0;
            text_delete = '';
            text_insert = '';
            break;
        }
      }
      if (diffs[diffs.length - 1][1] === '') {
        diffs.pop();  // Remove the dummy entry at the end.
      }

      // Second pass: look for single edits surrounded on both sides by equalities
      // which can be shifted sideways to eliminate an equality.
      // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
      var changes = false;
      pointer = 1;
      // Intentionally ignore the first and last element (don't need checking).
      while (pointer < diffs.length - 1) {
        if (diffs[pointer - 1][0] == DIFF_EQUAL &&
            diffs[pointer + 1][0] == DIFF_EQUAL) {
          // This is a single edit surrounded by equalities.
          if (diffs[pointer][1].substring(diffs[pointer][1].length -
              diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
            // Shift the edit over the previous equality.
            diffs[pointer][1] = diffs[pointer - 1][1] +
                diffs[pointer][1].substring(0, diffs[pointer][1].length -
                                            diffs[pointer - 1][1].length);
            diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
            diffs.splice(pointer - 1, 1);
            changes = true;
          } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==
              diffs[pointer + 1][1]) {
            // Shift the edit over the next equality.
            diffs[pointer - 1][1] += diffs[pointer + 1][1];
            diffs[pointer][1] =
                diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
                diffs[pointer + 1][1];
            diffs.splice(pointer + 1, 1);
            changes = true;
          }
        }
        pointer++;
      }
      // If shifts were made, the diff needs reordering and another shift sweep.
      if (changes) {
        diff_cleanupMerge(diffs);
      }
    }

    var diff = diff_main;
    diff.INSERT = DIFF_INSERT;
    diff.DELETE = DIFF_DELETE;
    diff.EQUAL = DIFF_EQUAL;

    module.exports = diff;

    /*
     * Modify a diff such that the cursor position points to the start of a change:
     * E.g.
     *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)
     *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]
     *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)
     *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]
     *
     * @param {Array} diffs Array of diff tuples
     * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
     * @return {Array} A tuple [cursor location in the modified diff, modified diff]
     */
    function cursor_normalize_diff (diffs, cursor_pos) {
      if (cursor_pos === 0) {
        return [DIFF_EQUAL, diffs];
      }
      for (var current_pos = 0, i = 0; i < diffs.length; i++) {
        var d = diffs[i];
        if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {
          var next_pos = current_pos + d[1].length;
          if (cursor_pos === next_pos) {
            return [i + 1, diffs];
          } else if (cursor_pos < next_pos) {
            // copy to prevent side effects
            diffs = diffs.slice();
            // split d into two diff changes
            var split_pos = cursor_pos - current_pos;
            var d_left = [d[0], d[1].slice(0, split_pos)];
            var d_right = [d[0], d[1].slice(split_pos)];
            diffs.splice(i, 1, d_left, d_right);
            return [i + 1, diffs];
          } else {
            current_pos = next_pos;
          }
        }
      }
      throw new Error('cursor_pos is out of bounds!')
    }

    /*
     * Modify a diff such that the edit position is "shifted" to the proposed edit location (cursor_position).
     *
     * Case 1)
     *   Check if a naive shift is possible:
     *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)
     *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result
     * Case 2)
     *   Check if the following shifts are possible:
     *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']
     *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']
     *         ^            ^
     *         d          d_next
     *
     * @param {Array} diffs Array of diff tuples
     * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
     * @return {Array} Array of diff tuples
     */
    function fix_cursor (diffs, cursor_pos) {
      var norm = cursor_normalize_diff(diffs, cursor_pos);
      var ndiffs = norm[1];
      var cursor_pointer = norm[0];
      var d = ndiffs[cursor_pointer];
      var d_next = ndiffs[cursor_pointer + 1];

      if (d == null) {
        // Text was deleted from end of original string,
        // cursor is now out of bounds in new string
        return diffs;
      } else if (d[0] !== DIFF_EQUAL) {
        // A modification happened at the cursor location.
        // This is the expected outcome, so we can return the original diff.
        return diffs;
      } else {
        if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {
          // Case 1)
          // It is possible to perform a naive shift
          ndiffs.splice(cursor_pointer, 2, d_next, d);
          return merge_tuples(ndiffs, cursor_pointer, 2)
        } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {
          // Case 2)
          // d[1] is a prefix of d_next[1]
          // We can assume that d_next[0] !== 0, since d[0] === 0
          // Shift edit locations..
          ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);
          var suffix = d_next[1].slice(d[1].length);
          if (suffix.length > 0) {
            ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);
          }
          return merge_tuples(ndiffs, cursor_pointer, 3)
        } else {
          // Not possible to perform any modification
          return diffs;
        }
      }
    }

    /*
     * Check diff did not split surrogate pairs.
     * Ex. [0, '\uD83D'], [-1, '\uDC36'], [1, '\uDC2F'] -> [-1, '\uD83D\uDC36'], [1, '\uD83D\uDC2F']
     *     '\uD83D\uDC36' === '🐶', '\uD83D\uDC2F' === '🐯'
     *
     * @param {Array} diffs Array of diff tuples
     * @return {Array} Array of diff tuples
     */
    function fix_emoji (diffs) {
      var compact = false;
      var starts_with_pair_end = function(str) {
        return str.charCodeAt(0) >= 0xDC00 && str.charCodeAt(0) <= 0xDFFF;
      };
      var ends_with_pair_start = function(str) {
        return str.charCodeAt(str.length-1) >= 0xD800 && str.charCodeAt(str.length-1) <= 0xDBFF;
      };
      for (var i = 2; i < diffs.length; i += 1) {
        if (diffs[i-2][0] === DIFF_EQUAL && ends_with_pair_start(diffs[i-2][1]) &&
            diffs[i-1][0] === DIFF_DELETE && starts_with_pair_end(diffs[i-1][1]) &&
            diffs[i][0] === DIFF_INSERT && starts_with_pair_end(diffs[i][1])) {
          compact = true;

          diffs[i-1][1] = diffs[i-2][1].slice(-1) + diffs[i-1][1];
          diffs[i][1] = diffs[i-2][1].slice(-1) + diffs[i][1];

          diffs[i-2][1] = diffs[i-2][1].slice(0, -1);
        }
      }
      if (!compact) {
        return diffs;
      }
      var fixed_diffs = [];
      for (var i = 0; i < diffs.length; i += 1) {
        if (diffs[i][1].length > 0) {
          fixed_diffs.push(diffs[i]);
        }
      }
      return fixed_diffs;
    }

    /*
     * Try to merge tuples with their neigbors in a given range.
     * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']
     *
     * @param {Array} diffs Array of diff tuples.
     * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).
     * @param {Int} length Number of consecutive elements to check.
     * @return {Array} Array of merged diff tuples.
     */
    function merge_tuples (diffs, start, length) {
      // Check from (start-1) to (start+length).
      for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {
        if (i + 1 < diffs.length) {
          var left_d = diffs[i];
          var right_d = diffs[i+1];
          if (left_d[0] === right_d[1]) {
            diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);
          }
        }
      }
      return diffs;
    }


    /***/ }),
    /* 52 */
    /***/ (function(module, exports) {

    exports = module.exports = typeof Object.keys === 'function'
      ? Object.keys : shim;

    exports.shim = shim;
    function shim (obj) {
      var keys = [];
      for (var key in obj) keys.push(key);
      return keys;
    }


    /***/ }),
    /* 53 */
    /***/ (function(module, exports) {

    var supportsArgumentsClass = (function(){
      return Object.prototype.toString.call(arguments)
    })() == '[object Arguments]';

    exports = module.exports = supportsArgumentsClass ? supported : unsupported;

    exports.supported = supported;
    function supported(object) {
      return Object.prototype.toString.call(object) == '[object Arguments]';
    }
    exports.unsupported = unsupported;
    function unsupported(object){
      return object &&
        typeof object == 'object' &&
        typeof object.length == 'number' &&
        Object.prototype.hasOwnProperty.call(object, 'callee') &&
        !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
        false;
    }

    /***/ }),
    /* 54 */
    /***/ (function(module, exports) {

    var has = Object.prototype.hasOwnProperty
      , prefix = '~';

    /**
     * Constructor to create a storage for our `EE` objects.
     * An `Events` instance is a plain object whose properties are event names.
     *
     * @constructor
     * @api private
     */
    function Events() {}

    //
    // We try to not inherit from `Object.prototype`. In some engines creating an
    // instance in this way is faster than calling `Object.create(null)` directly.
    // If `Object.create(null)` is not supported we prefix the event names with a
    // character to make sure that the built-in object properties are not
    // overridden or used as an attack vector.
    //
    if (Object.create) {
      Events.prototype = Object.create(null);

      //
      // This hack is needed because the `__proto__` property is still inherited in
      // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
      //
      if (!new Events().__proto__) prefix = false;
    }

    /**
     * Representation of a single event listener.
     *
     * @param {Function} fn The listener function.
     * @param {Mixed} context The context to invoke the listener with.
     * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
     * @constructor
     * @api private
     */
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }

    /**
     * Minimal `EventEmitter` interface that is molded against the Node.js
     * `EventEmitter` interface.
     *
     * @constructor
     * @api public
     */
    function EventEmitter() {
      this._events = new Events();
      this._eventsCount = 0;
    }

    /**
     * Return an array listing the events for which the emitter has registered
     * listeners.
     *
     * @returns {Array}
     * @api public
     */
    EventEmitter.prototype.eventNames = function eventNames() {
      var names = []
        , events
        , name;

      if (this._eventsCount === 0) return names;

      for (name in (events = this._events)) {
        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
      }

      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }

      return names;
    };

    /**
     * Return the listeners registered for a given event.
     *
     * @param {String|Symbol} event The event name.
     * @param {Boolean} exists Only check if there are listeners.
     * @returns {Array|Boolean}
     * @api public
     */
    EventEmitter.prototype.listeners = function listeners(event, exists) {
      var evt = prefix ? prefix + event : event
        , available = this._events[evt];

      if (exists) return !!available;
      if (!available) return [];
      if (available.fn) return [available.fn];

      for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
        ee[i] = available[i].fn;
      }

      return ee;
    };

    /**
     * Calls each of the listeners registered for a given event.
     *
     * @param {String|Symbol} event The event name.
     * @returns {Boolean} `true` if the event had listeners, else `false`.
     * @api public
     */
    EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;

      if (!this._events[evt]) return false;

      var listeners = this._events[evt]
        , len = arguments.length
        , args
        , i;

      if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

        switch (len) {
          case 1: return listeners.fn.call(listeners.context), true;
          case 2: return listeners.fn.call(listeners.context, a1), true;
          case 3: return listeners.fn.call(listeners.context, a1, a2), true;
          case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }

        for (i = 1, args = new Array(len -1); i < len; i++) {
          args[i - 1] = arguments[i];
        }

        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length
          , j;

        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

          switch (len) {
            case 1: listeners[i].fn.call(listeners[i].context); break;
            case 2: listeners[i].fn.call(listeners[i].context, a1); break;
            case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
            case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
            default:
              if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
                args[j - 1] = arguments[j];
              }

              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }

      return true;
    };

    /**
     * Add a listener for a given event.
     *
     * @param {String|Symbol} event The event name.
     * @param {Function} fn The listener function.
     * @param {Mixed} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @api public
     */
    EventEmitter.prototype.on = function on(event, fn, context) {
      var listener = new EE(fn, context || this)
        , evt = prefix ? prefix + event : event;

      if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
      else if (!this._events[evt].fn) this._events[evt].push(listener);
      else this._events[evt] = [this._events[evt], listener];

      return this;
    };

    /**
     * Add a one-time listener for a given event.
     *
     * @param {String|Symbol} event The event name.
     * @param {Function} fn The listener function.
     * @param {Mixed} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @api public
     */
    EventEmitter.prototype.once = function once(event, fn, context) {
      var listener = new EE(fn, context || this, true)
        , evt = prefix ? prefix + event : event;

      if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
      else if (!this._events[evt].fn) this._events[evt].push(listener);
      else this._events[evt] = [this._events[evt], listener];

      return this;
    };

    /**
     * Remove the listeners of a given event.
     *
     * @param {String|Symbol} event The event name.
     * @param {Function} fn Only remove the listeners that match this function.
     * @param {Mixed} context Only remove the listeners that have this context.
     * @param {Boolean} once Only remove one-time listeners.
     * @returns {EventEmitter} `this`.
     * @api public
     */
    EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;

      if (!this._events[evt]) return this;
      if (!fn) {
        if (--this._eventsCount === 0) this._events = new Events();
        else delete this._events[evt];
        return this;
      }

      var listeners = this._events[evt];

      if (listeners.fn) {
        if (
             listeners.fn === fn
          && (!once || listeners.once)
          && (!context || listeners.context === context)
        ) {
          if (--this._eventsCount === 0) this._events = new Events();
          else delete this._events[evt];
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (
               listeners[i].fn !== fn
            || (once && !listeners[i].once)
            || (context && listeners[i].context !== context)
          ) {
            events.push(listeners[i]);
          }
        }

        //
        // Reset the array, or remove it completely if we have no more listeners.
        //
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else if (--this._eventsCount === 0) this._events = new Events();
        else delete this._events[evt];
      }

      return this;
    };

    /**
     * Remove all listeners, or those of the specified event.
     *
     * @param {String|Symbol} [event] The event name.
     * @returns {EventEmitter} `this`.
     * @api public
     */
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;

      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) {
          if (--this._eventsCount === 0) this._events = new Events();
          else delete this._events[evt];
        }
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }

      return this;
    };

    //
    // Alias methods names because people roll like that.
    //
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on;

    //
    // This function doesn't apply anymore.
    //
    EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
      return this;
    };

    //
    // Expose the prefix.
    //
    EventEmitter.prefixed = prefix;

    //
    // Allow `EventEmitter` to be imported as module namespace.
    //
    EventEmitter.EventEmitter = EventEmitter;

    //
    // Expose the module.
    //
    if ('undefined' !== typeof module) {
      module.exports = EventEmitter;
    }


    /***/ }),
    /* 55 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.matchText = exports.matchSpacing = exports.matchNewline = exports.matchBlot = exports.matchAttributor = exports.default = undefined;

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _extend2 = __webpack_require__(3);

    var _extend3 = _interopRequireDefault(_extend2);

    var _quillDelta = __webpack_require__(2);

    var _quillDelta2 = _interopRequireDefault(_quillDelta);

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    var _quill = __webpack_require__(5);

    var _quill2 = _interopRequireDefault(_quill);

    var _logger = __webpack_require__(10);

    var _logger2 = _interopRequireDefault(_logger);

    var _module = __webpack_require__(9);

    var _module2 = _interopRequireDefault(_module);

    var _align = __webpack_require__(36);

    var _background = __webpack_require__(37);

    var _code = __webpack_require__(13);

    var _code2 = _interopRequireDefault(_code);

    var _color = __webpack_require__(26);

    var _direction = __webpack_require__(38);

    var _font = __webpack_require__(39);

    var _size = __webpack_require__(40);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var debug = (0, _logger2.default)('quill:clipboard');

    var DOM_KEY = '__ql-matcher';

    var CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], [Node.TEXT_NODE, matchNewline], ['br', matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchSpacing], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ['li', matchIndent], ['b', matchAlias.bind(matchAlias, 'bold')], ['i', matchAlias.bind(matchAlias, 'italic')], ['style', matchIgnore]];

    var ATTRIBUTE_ATTRIBUTORS = [_align.AlignAttribute, _direction.DirectionAttribute].reduce(function (memo, attr) {
      memo[attr.keyName] = attr;
      return memo;
    }, {});

    var STYLE_ATTRIBUTORS = [_align.AlignStyle, _background.BackgroundStyle, _color.ColorStyle, _direction.DirectionStyle, _font.FontStyle, _size.SizeStyle].reduce(function (memo, attr) {
      memo[attr.keyName] = attr;
      return memo;
    }, {});

    var Clipboard = function (_Module) {
      _inherits(Clipboard, _Module);

      function Clipboard(quill, options) {
        _classCallCheck(this, Clipboard);

        var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this, quill, options));

        _this.quill.root.addEventListener('paste', _this.onPaste.bind(_this));
        _this.container = _this.quill.addContainer('ql-clipboard');
        _this.container.setAttribute('contenteditable', true);
        _this.container.setAttribute('tabindex', -1);
        _this.matchers = [];
        CLIPBOARD_CONFIG.concat(_this.options.matchers).forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              selector = _ref2[0],
              matcher = _ref2[1];

          if (!options.matchVisual && matcher === matchSpacing) return;
          _this.addMatcher(selector, matcher);
        });
        return _this;
      }

      _createClass(Clipboard, [{
        key: 'addMatcher',
        value: function addMatcher(selector, matcher) {
          this.matchers.push([selector, matcher]);
        }
      }, {
        key: 'convert',
        value: function convert(html) {
          if (typeof html === 'string') {
            this.container.innerHTML = html.replace(/\>\r?\n +\</g, '><'); // Remove spaces between tags
            return this.convert();
          }
          var formats = this.quill.getFormat(this.quill.selection.savedRange.index);
          if (formats[_code2.default.blotName]) {
            var text = this.container.innerText;
            this.container.innerHTML = '';
            return new _quillDelta2.default().insert(text, _defineProperty({}, _code2.default.blotName, formats[_code2.default.blotName]));
          }

          var _prepareMatching = this.prepareMatching(),
              _prepareMatching2 = _slicedToArray(_prepareMatching, 2),
              elementMatchers = _prepareMatching2[0],
              textMatchers = _prepareMatching2[1];

          var delta = traverse(this.container, elementMatchers, textMatchers);
          // Remove trailing newline
          if (deltaEndsWith(delta, '\n') && delta.ops[delta.ops.length - 1].attributes == null) {
            delta = delta.compose(new _quillDelta2.default().retain(delta.length() - 1).delete(1));
          }
          debug.log('convert', this.container.innerHTML, delta);
          this.container.innerHTML = '';
          return delta;
        }
      }, {
        key: 'dangerouslyPasteHTML',
        value: function dangerouslyPasteHTML(index, html) {
          var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _quill2.default.sources.API;

          if (typeof index === 'string') {
            this.quill.setContents(this.convert(index), html);
            this.quill.setSelection(0, _quill2.default.sources.SILENT);
          } else {
            var paste = this.convert(html);
            this.quill.updateContents(new _quillDelta2.default().retain(index).concat(paste), source);
            this.quill.setSelection(index + paste.length(), _quill2.default.sources.SILENT);
          }
        }
      }, {
        key: 'onPaste',
        value: function onPaste(e) {
          var _this2 = this;

          if (e.defaultPrevented || !this.quill.isEnabled()) return;
          var range = this.quill.getSelection();
          var delta = new _quillDelta2.default().retain(range.index);
          var scrollTop = this.quill.scrollingContainer.scrollTop;
          this.container.focus();
          this.quill.selection.update(_quill2.default.sources.SILENT);
          setTimeout(function () {
            delta = delta.concat(_this2.convert()).delete(range.length);
            _this2.quill.updateContents(delta, _quill2.default.sources.USER);
            // range.length contributes to delta.length()
            _this2.quill.setSelection(delta.length() - range.length, _quill2.default.sources.SILENT);
            _this2.quill.scrollingContainer.scrollTop = scrollTop;
            _this2.quill.focus();
          }, 1);
        }
      }, {
        key: 'prepareMatching',
        value: function prepareMatching() {
          var _this3 = this;

          var elementMatchers = [],
              textMatchers = [];
          this.matchers.forEach(function (pair) {
            var _pair = _slicedToArray(pair, 2),
                selector = _pair[0],
                matcher = _pair[1];

            switch (selector) {
              case Node.TEXT_NODE:
                textMatchers.push(matcher);
                break;
              case Node.ELEMENT_NODE:
                elementMatchers.push(matcher);
                break;
              default:
                [].forEach.call(_this3.container.querySelectorAll(selector), function (node) {
                  // TODO use weakmap
                  node[DOM_KEY] = node[DOM_KEY] || [];
                  node[DOM_KEY].push(matcher);
                });
                break;
            }
          });
          return [elementMatchers, textMatchers];
        }
      }]);

      return Clipboard;
    }(_module2.default);

    Clipboard.DEFAULTS = {
      matchers: [],
      matchVisual: true
    };

    function applyFormat(delta, format, value) {
      if ((typeof format === 'undefined' ? 'undefined' : _typeof(format)) === 'object') {
        return Object.keys(format).reduce(function (delta, key) {
          return applyFormat(delta, key, format[key]);
        }, delta);
      } else {
        return delta.reduce(function (delta, op) {
          if (op.attributes && op.attributes[format]) {
            return delta.push(op);
          } else {
            return delta.insert(op.insert, (0, _extend3.default)({}, _defineProperty({}, format, value), op.attributes));
          }
        }, new _quillDelta2.default());
      }
    }

    function computeStyle(node) {
      if (node.nodeType !== Node.ELEMENT_NODE) return {};
      var DOM_KEY = '__ql-computed-style';
      return node[DOM_KEY] || (node[DOM_KEY] = window.getComputedStyle(node));
    }

    function deltaEndsWith(delta, text) {
      var endText = "";
      for (var i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i) {
        var op = delta.ops[i];
        if (typeof op.insert !== 'string') break;
        endText = op.insert + endText;
      }
      return endText.slice(-1 * text.length) === text;
    }

    function isLine(node) {
      if (node.childNodes.length === 0) return false; // Exclude embed blocks
      var style = computeStyle(node);
      return ['block', 'list-item'].indexOf(style.display) > -1;
    }

    function traverse(node, elementMatchers, textMatchers) {
      // Post-order
      if (node.nodeType === node.TEXT_NODE) {
        return textMatchers.reduce(function (delta, matcher) {
          return matcher(node, delta);
        }, new _quillDelta2.default());
      } else if (node.nodeType === node.ELEMENT_NODE) {
        return [].reduce.call(node.childNodes || [], function (delta, childNode) {
          var childrenDelta = traverse(childNode, elementMatchers, textMatchers);
          if (childNode.nodeType === node.ELEMENT_NODE) {
            childrenDelta = elementMatchers.reduce(function (childrenDelta, matcher) {
              return matcher(childNode, childrenDelta);
            }, childrenDelta);
            childrenDelta = (childNode[DOM_KEY] || []).reduce(function (childrenDelta, matcher) {
              return matcher(childNode, childrenDelta);
            }, childrenDelta);
          }
          return delta.concat(childrenDelta);
        }, new _quillDelta2.default());
      } else {
        return new _quillDelta2.default();
      }
    }

    function matchAlias(format, node, delta) {
      return applyFormat(delta, format, true);
    }

    function matchAttributor(node, delta) {
      var attributes = _parchment2.default.Attributor.Attribute.keys(node);
      var classes = _parchment2.default.Attributor.Class.keys(node);
      var styles = _parchment2.default.Attributor.Style.keys(node);
      var formats = {};
      attributes.concat(classes).concat(styles).forEach(function (name) {
        var attr = _parchment2.default.query(name, _parchment2.default.Scope.ATTRIBUTE);
        if (attr != null) {
          formats[attr.attrName] = attr.value(node);
          if (formats[attr.attrName]) return;
        }
        attr = ATTRIBUTE_ATTRIBUTORS[name];
        if (attr != null && (attr.attrName === name || attr.keyName === name)) {
          formats[attr.attrName] = attr.value(node) || undefined;
        }
        attr = STYLE_ATTRIBUTORS[name];
        if (attr != null && (attr.attrName === name || attr.keyName === name)) {
          attr = STYLE_ATTRIBUTORS[name];
          formats[attr.attrName] = attr.value(node) || undefined;
        }
      });
      if (Object.keys(formats).length > 0) {
        delta = applyFormat(delta, formats);
      }
      return delta;
    }

    function matchBlot(node, delta) {
      var match = _parchment2.default.query(node);
      if (match == null) return delta;
      if (match.prototype instanceof _parchment2.default.Embed) {
        var embed = {};
        var value = match.value(node);
        if (value != null) {
          embed[match.blotName] = value;
          delta = new _quillDelta2.default().insert(embed, match.formats(node));
        }
      } else if (typeof match.formats === 'function') {
        delta = applyFormat(delta, match.blotName, match.formats(node));
      }
      return delta;
    }

    function matchBreak(node, delta) {
      if (!deltaEndsWith(delta, '\n')) {
        delta.insert('\n');
      }
      return delta;
    }

    function matchIgnore() {
      return new _quillDelta2.default();
    }

    function matchIndent(node, delta) {
      var match = _parchment2.default.query(node);
      if (match == null || match.blotName !== 'list-item' || !deltaEndsWith(delta, '\n')) {
        return delta;
      }
      var indent = -1,
          parent = node.parentNode;
      while (!parent.classList.contains('ql-clipboard')) {
        if ((_parchment2.default.query(parent) || {}).blotName === 'list') {
          indent += 1;
        }
        parent = parent.parentNode;
      }
      if (indent <= 0) return delta;
      return delta.compose(new _quillDelta2.default().retain(delta.length() - 1).retain(1, { indent: indent }));
    }

    function matchNewline(node, delta) {
      if (!deltaEndsWith(delta, '\n')) {
        if (isLine(node) || delta.length() > 0 && node.nextSibling && isLine(node.nextSibling)) {
          delta.insert('\n');
        }
      }
      return delta;
    }

    function matchSpacing(node, delta) {
      if (isLine(node) && node.nextElementSibling != null && !deltaEndsWith(delta, '\n\n')) {
        var nodeHeight = node.offsetHeight + parseFloat(computeStyle(node).marginTop) + parseFloat(computeStyle(node).marginBottom);
        if (node.nextElementSibling.offsetTop > node.offsetTop + nodeHeight * 1.5) {
          delta.insert('\n');
        }
      }
      return delta;
    }

    function matchStyles(node, delta) {
      var formats = {};
      var style = node.style || {};
      if (style.fontStyle && computeStyle(node).fontStyle === 'italic') {
        formats.italic = true;
      }
      if (style.fontWeight && (computeStyle(node).fontWeight.startsWith('bold') || parseInt(computeStyle(node).fontWeight) >= 700)) {
        formats.bold = true;
      }
      if (Object.keys(formats).length > 0) {
        delta = applyFormat(delta, formats);
      }
      if (parseFloat(style.textIndent || 0) > 0) {
        // Could be 0.5in
        delta = new _quillDelta2.default().insert('\t').concat(delta);
      }
      return delta;
    }

    function matchText(node, delta) {
      var text = node.data;
      // Word represents empty line with <o:p>&nbsp;</o:p>
      if (node.parentNode.tagName === 'O:P') {
        return delta.insert(text.trim());
      }
      if (text.trim().length === 0 && node.parentNode.classList.contains('ql-clipboard')) {
        return delta;
      }
      if (!computeStyle(node.parentNode).whiteSpace.startsWith('pre')) {
        // eslint-disable-next-line func-style
        var replacer = function replacer(collapse, match) {
          match = match.replace(/[^\u00a0]/g, ''); // \u00a0 is nbsp;
          return match.length < 1 && collapse ? ' ' : match;
        };
        text = text.replace(/\r\n/g, ' ').replace(/\n/g, ' ');
        text = text.replace(/\s\s+/g, replacer.bind(replacer, true)); // collapse whitespace
        if (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {
          text = text.replace(/^\s+/, replacer.bind(replacer, false));
        }
        if (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {
          text = text.replace(/\s+$/, replacer.bind(replacer, false));
        }
      }
      return delta.insert(text);
    }

    exports.default = Clipboard;
    exports.matchAttributor = matchAttributor;
    exports.matchBlot = matchBlot;
    exports.matchNewline = matchNewline;
    exports.matchSpacing = matchSpacing;
    exports.matchText = matchText;

    /***/ }),
    /* 56 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _inline = __webpack_require__(6);

    var _inline2 = _interopRequireDefault(_inline);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var Bold = function (_Inline) {
      _inherits(Bold, _Inline);

      function Bold() {
        _classCallCheck(this, Bold);

        return _possibleConstructorReturn(this, (Bold.__proto__ || Object.getPrototypeOf(Bold)).apply(this, arguments));
      }

      _createClass(Bold, [{
        key: 'optimize',
        value: function optimize(context) {
          _get(Bold.prototype.__proto__ || Object.getPrototypeOf(Bold.prototype), 'optimize', this).call(this, context);
          if (this.domNode.tagName !== this.statics.tagName[0]) {
            this.replaceWith(this.statics.blotName);
          }
        }
      }], [{
        key: 'create',
        value: function create() {
          return _get(Bold.__proto__ || Object.getPrototypeOf(Bold), 'create', this).call(this);
        }
      }, {
        key: 'formats',
        value: function formats() {
          return true;
        }
      }]);

      return Bold;
    }(_inline2.default);

    Bold.blotName = 'bold';
    Bold.tagName = ['STRONG', 'B'];

    exports.default = Bold;

    /***/ }),
    /* 57 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.addControls = exports.default = undefined;

    var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _quillDelta = __webpack_require__(2);

    var _quillDelta2 = _interopRequireDefault(_quillDelta);

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    var _quill = __webpack_require__(5);

    var _quill2 = _interopRequireDefault(_quill);

    var _logger = __webpack_require__(10);

    var _logger2 = _interopRequireDefault(_logger);

    var _module = __webpack_require__(9);

    var _module2 = _interopRequireDefault(_module);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var debug = (0, _logger2.default)('quill:toolbar');

    var Toolbar = function (_Module) {
      _inherits(Toolbar, _Module);

      function Toolbar(quill, options) {
        _classCallCheck(this, Toolbar);

        var _this = _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call(this, quill, options));

        if (Array.isArray(_this.options.container)) {
          var container = document.createElement('div');
          addControls(container, _this.options.container);
          quill.container.parentNode.insertBefore(container, quill.container);
          _this.container = container;
        } else if (typeof _this.options.container === 'string') {
          _this.container = document.querySelector(_this.options.container);
        } else {
          _this.container = _this.options.container;
        }
        if (!(_this.container instanceof HTMLElement)) {
          var _ret;

          return _ret = debug.error('Container required for toolbar', _this.options), _possibleConstructorReturn(_this, _ret);
        }
        _this.container.classList.add('ql-toolbar');
        _this.controls = [];
        _this.handlers = {};
        Object.keys(_this.options.handlers).forEach(function (format) {
          _this.addHandler(format, _this.options.handlers[format]);
        });
        [].forEach.call(_this.container.querySelectorAll('button, select'), function (input) {
          _this.attach(input);
        });
        _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (type, range) {
          if (type === _quill2.default.events.SELECTION_CHANGE) {
            _this.update(range);
          }
        });
        _this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
          var _this$quill$selection = _this.quill.selection.getRange(),
              _this$quill$selection2 = _slicedToArray(_this$quill$selection, 1),
              range = _this$quill$selection2[0]; // quill.getSelection triggers update


          _this.update(range);
        });
        return _this;
      }

      _createClass(Toolbar, [{
        key: 'addHandler',
        value: function addHandler(format, handler) {
          this.handlers[format] = handler;
        }
      }, {
        key: 'attach',
        value: function attach(input) {
          var _this2 = this;

          var format = [].find.call(input.classList, function (className) {
            return className.indexOf('ql-') === 0;
          });
          if (!format) return;
          format = format.slice('ql-'.length);
          if (input.tagName === 'BUTTON') {
            input.setAttribute('type', 'button');
          }
          if (this.handlers[format] == null) {
            if (this.quill.scroll.whitelist != null && this.quill.scroll.whitelist[format] == null) {
              debug.warn('ignoring attaching to disabled format', format, input);
              return;
            }
            if (_parchment2.default.query(format) == null) {
              debug.warn('ignoring attaching to nonexistent format', format, input);
              return;
            }
          }
          var eventName = input.tagName === 'SELECT' ? 'change' : 'click';
          input.addEventListener(eventName, function (e) {
            var value = void 0;
            if (input.tagName === 'SELECT') {
              if (input.selectedIndex < 0) return;
              var selected = input.options[input.selectedIndex];
              if (selected.hasAttribute('selected')) {
                value = false;
              } else {
                value = selected.value || false;
              }
            } else {
              if (input.classList.contains('ql-active')) {
                value = false;
              } else {
                value = input.value || !input.hasAttribute('value');
              }
              e.preventDefault();
            }
            _this2.quill.focus();

            var _quill$selection$getR = _this2.quill.selection.getRange(),
                _quill$selection$getR2 = _slicedToArray(_quill$selection$getR, 1),
                range = _quill$selection$getR2[0];

            if (_this2.handlers[format] != null) {
              _this2.handlers[format].call(_this2, value);
            } else if (_parchment2.default.query(format).prototype instanceof _parchment2.default.Embed) {
              value = prompt('Enter ' + format);
              if (!value) return;
              _this2.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert(_defineProperty({}, format, value)), _quill2.default.sources.USER);
            } else {
              _this2.quill.format(format, value, _quill2.default.sources.USER);
            }
            _this2.update(range);
          });
          // TODO use weakmap
          this.controls.push([format, input]);
        }
      }, {
        key: 'update',
        value: function update(range) {
          var formats = range == null ? {} : this.quill.getFormat(range);
          this.controls.forEach(function (pair) {
            var _pair = _slicedToArray(pair, 2),
                format = _pair[0],
                input = _pair[1];

            if (input.tagName === 'SELECT') {
              var option = void 0;
              if (range == null) {
                option = null;
              } else if (formats[format] == null) {
                option = input.querySelector('option[selected]');
              } else if (!Array.isArray(formats[format])) {
                var value = formats[format];
                if (typeof value === 'string') {
                  value = value.replace(/\"/g, '\\"');
                }
                option = input.querySelector('option[value="' + value + '"]');
              }
              if (option == null) {
                input.value = ''; // TODO make configurable?
                input.selectedIndex = -1;
              } else {
                option.selected = true;
              }
            } else {
              if (range == null) {
                input.classList.remove('ql-active');
              } else if (input.hasAttribute('value')) {
                // both being null should match (default values)
                // '1' should match with 1 (headers)
                var isActive = formats[format] === input.getAttribute('value') || formats[format] != null && formats[format].toString() === input.getAttribute('value') || formats[format] == null && !input.getAttribute('value');
                input.classList.toggle('ql-active', isActive);
              } else {
                input.classList.toggle('ql-active', formats[format] != null);
              }
            }
          });
        }
      }]);

      return Toolbar;
    }(_module2.default);

    Toolbar.DEFAULTS = {};

    function addButton(container, format, value) {
      var input = document.createElement('button');
      input.setAttribute('type', 'button');
      input.classList.add('ql-' + format);
      if (value != null) {
        input.value = value;
      }
      container.appendChild(input);
    }

    function addControls(container, groups) {
      if (!Array.isArray(groups[0])) {
        groups = [groups];
      }
      groups.forEach(function (controls) {
        var group = document.createElement('span');
        group.classList.add('ql-formats');
        controls.forEach(function (control) {
          if (typeof control === 'string') {
            addButton(group, control);
          } else {
            var format = Object.keys(control)[0];
            var value = control[format];
            if (Array.isArray(value)) {
              addSelect(group, format, value);
            } else {
              addButton(group, format, value);
            }
          }
        });
        container.appendChild(group);
      });
    }

    function addSelect(container, format, values) {
      var input = document.createElement('select');
      input.classList.add('ql-' + format);
      values.forEach(function (value) {
        var option = document.createElement('option');
        if (value !== false) {
          option.setAttribute('value', value);
        } else {
          option.setAttribute('selected', 'selected');
        }
        input.appendChild(option);
      });
      container.appendChild(input);
    }

    Toolbar.DEFAULTS = {
      container: null,
      handlers: {
        clean: function clean() {
          var _this3 = this;

          var range = this.quill.getSelection();
          if (range == null) return;
          if (range.length == 0) {
            var formats = this.quill.getFormat();
            Object.keys(formats).forEach(function (name) {
              // Clean functionality in existing apps only clean inline formats
              if (_parchment2.default.query(name, _parchment2.default.Scope.INLINE) != null) {
                _this3.quill.format(name, false);
              }
            });
          } else {
            this.quill.removeFormat(range, _quill2.default.sources.USER);
          }
        },
        direction: function direction(value) {
          var align = this.quill.getFormat()['align'];
          if (value === 'rtl' && align == null) {
            this.quill.format('align', 'right', _quill2.default.sources.USER);
          } else if (!value && align === 'right') {
            this.quill.format('align', false, _quill2.default.sources.USER);
          }
          this.quill.format('direction', value, _quill2.default.sources.USER);
        },
        indent: function indent(value) {
          var range = this.quill.getSelection();
          var formats = this.quill.getFormat(range);
          var indent = parseInt(formats.indent || 0);
          if (value === '+1' || value === '-1') {
            var modifier = value === '+1' ? 1 : -1;
            if (formats.direction === 'rtl') modifier *= -1;
            this.quill.format('indent', indent + modifier, _quill2.default.sources.USER);
          }
        },
        link: function link(value) {
          if (value === true) {
            value = prompt('Enter link URL:');
          }
          this.quill.format('link', value, _quill2.default.sources.USER);
        },
        list: function list(value) {
          var range = this.quill.getSelection();
          var formats = this.quill.getFormat(range);
          if (value === 'check') {
            if (formats['list'] === 'checked' || formats['list'] === 'unchecked') {
              this.quill.format('list', false, _quill2.default.sources.USER);
            } else {
              this.quill.format('list', 'unchecked', _quill2.default.sources.USER);
            }
          } else {
            this.quill.format('list', value, _quill2.default.sources.USER);
          }
        }
      }
    };

    exports.default = Toolbar;
    exports.addControls = addControls;

    /***/ }),
    /* 58 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <polyline class=\"ql-even ql-stroke\" points=\"5 7 3 9 5 11\"></polyline> <polyline class=\"ql-even ql-stroke\" points=\"13 7 15 9 13 11\"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>";

    /***/ }),
    /* 59 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _picker = __webpack_require__(28);

    var _picker2 = _interopRequireDefault(_picker);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var ColorPicker = function (_Picker) {
      _inherits(ColorPicker, _Picker);

      function ColorPicker(select, label) {
        _classCallCheck(this, ColorPicker);

        var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this, select));

        _this.label.innerHTML = label;
        _this.container.classList.add('ql-color-picker');
        [].slice.call(_this.container.querySelectorAll('.ql-picker-item'), 0, 7).forEach(function (item) {
          item.classList.add('ql-primary');
        });
        return _this;
      }

      _createClass(ColorPicker, [{
        key: 'buildItem',
        value: function buildItem(option) {
          var item = _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'buildItem', this).call(this, option);
          item.style.backgroundColor = option.getAttribute('value') || '';
          return item;
        }
      }, {
        key: 'selectItem',
        value: function selectItem(item, trigger) {
          _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'selectItem', this).call(this, item, trigger);
          var colorLabel = this.label.querySelector('.ql-color-label');
          var value = item ? item.getAttribute('data-value') || '' : '';
          if (colorLabel) {
            if (colorLabel.tagName === 'line') {
              colorLabel.style.stroke = value;
            } else {
              colorLabel.style.fill = value;
            }
          }
        }
      }]);

      return ColorPicker;
    }(_picker2.default);

    exports.default = ColorPicker;

    /***/ }),
    /* 60 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _picker = __webpack_require__(28);

    var _picker2 = _interopRequireDefault(_picker);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var IconPicker = function (_Picker) {
      _inherits(IconPicker, _Picker);

      function IconPicker(select, icons) {
        _classCallCheck(this, IconPicker);

        var _this = _possibleConstructorReturn(this, (IconPicker.__proto__ || Object.getPrototypeOf(IconPicker)).call(this, select));

        _this.container.classList.add('ql-icon-picker');
        [].forEach.call(_this.container.querySelectorAll('.ql-picker-item'), function (item) {
          item.innerHTML = icons[item.getAttribute('data-value') || ''];
        });
        _this.defaultItem = _this.container.querySelector('.ql-selected');
        _this.selectItem(_this.defaultItem);
        return _this;
      }

      _createClass(IconPicker, [{
        key: 'selectItem',
        value: function selectItem(item, trigger) {
          _get(IconPicker.prototype.__proto__ || Object.getPrototypeOf(IconPicker.prototype), 'selectItem', this).call(this, item, trigger);
          item = item || this.defaultItem;
          this.label.innerHTML = item.innerHTML;
        }
      }]);

      return IconPicker;
    }(_picker2.default);

    exports.default = IconPicker;

    /***/ }),
    /* 61 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var Tooltip = function () {
      function Tooltip(quill, boundsContainer) {
        var _this = this;

        _classCallCheck(this, Tooltip);

        this.quill = quill;
        this.boundsContainer = boundsContainer || document.body;
        this.root = quill.addContainer('ql-tooltip');
        this.root.innerHTML = this.constructor.TEMPLATE;
        if (this.quill.root === this.quill.scrollingContainer) {
          this.quill.root.addEventListener('scroll', function () {
            _this.root.style.marginTop = -1 * _this.quill.root.scrollTop + 'px';
          });
        }
        this.hide();
      }

      _createClass(Tooltip, [{
        key: 'hide',
        value: function hide() {
          this.root.classList.add('ql-hidden');
        }
      }, {
        key: 'position',
        value: function position(reference) {
          var left = reference.left + reference.width / 2 - this.root.offsetWidth / 2;
          // root.scrollTop should be 0 if scrollContainer !== root
          var top = reference.bottom + this.quill.root.scrollTop;
          this.root.style.left = left + 'px';
          this.root.style.top = top + 'px';
          this.root.classList.remove('ql-flip');
          var containerBounds = this.boundsContainer.getBoundingClientRect();
          var rootBounds = this.root.getBoundingClientRect();
          var shift = 0;
          if (rootBounds.right > containerBounds.right) {
            shift = containerBounds.right - rootBounds.right;
            this.root.style.left = left + shift + 'px';
          }
          if (rootBounds.left < containerBounds.left) {
            shift = containerBounds.left - rootBounds.left;
            this.root.style.left = left + shift + 'px';
          }
          if (rootBounds.bottom > containerBounds.bottom) {
            var height = rootBounds.bottom - rootBounds.top;
            var verticalShift = reference.bottom - reference.top + height;
            this.root.style.top = top - verticalShift + 'px';
            this.root.classList.add('ql-flip');
          }
          return shift;
        }
      }, {
        key: 'show',
        value: function show() {
          this.root.classList.remove('ql-editing');
          this.root.classList.remove('ql-hidden');
        }
      }]);

      return Tooltip;
    }();

    exports.default = Tooltip;

    /***/ }),
    /* 62 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _extend = __webpack_require__(3);

    var _extend2 = _interopRequireDefault(_extend);

    var _emitter = __webpack_require__(8);

    var _emitter2 = _interopRequireDefault(_emitter);

    var _base = __webpack_require__(43);

    var _base2 = _interopRequireDefault(_base);

    var _link = __webpack_require__(27);

    var _link2 = _interopRequireDefault(_link);

    var _selection = __webpack_require__(15);

    var _icons = __webpack_require__(41);

    var _icons2 = _interopRequireDefault(_icons);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var TOOLBAR_CONFIG = [[{ header: ['1', '2', '3', false] }], ['bold', 'italic', 'underline', 'link'], [{ list: 'ordered' }, { list: 'bullet' }], ['clean']];

    var SnowTheme = function (_BaseTheme) {
      _inherits(SnowTheme, _BaseTheme);

      function SnowTheme(quill, options) {
        _classCallCheck(this, SnowTheme);

        if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
          options.modules.toolbar.container = TOOLBAR_CONFIG;
        }

        var _this = _possibleConstructorReturn(this, (SnowTheme.__proto__ || Object.getPrototypeOf(SnowTheme)).call(this, quill, options));

        _this.quill.container.classList.add('ql-snow');
        return _this;
      }

      _createClass(SnowTheme, [{
        key: 'extendToolbar',
        value: function extendToolbar(toolbar) {
          toolbar.container.classList.add('ql-snow');
          this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
          this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
          this.tooltip = new SnowTooltip(this.quill, this.options.bounds);
          if (toolbar.container.querySelector('.ql-link')) {
            this.quill.keyboard.addBinding({ key: 'K', shortKey: true }, function (range, context) {
              toolbar.handlers['link'].call(toolbar, !context.format.link);
            });
          }
        }
      }]);

      return SnowTheme;
    }(_base2.default);

    SnowTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
      modules: {
        toolbar: {
          handlers: {
            link: function link(value) {
              if (value) {
                var range = this.quill.getSelection();
                if (range == null || range.length == 0) return;
                var preview = this.quill.getText(range);
                if (/^\S+@\S+\.\S+$/.test(preview) && preview.indexOf('mailto:') !== 0) {
                  preview = 'mailto:' + preview;
                }
                var tooltip = this.quill.theme.tooltip;
                tooltip.edit('link', preview);
              } else {
                this.quill.format('link', false);
              }
            }
          }
        }
      }
    });

    var SnowTooltip = function (_BaseTooltip) {
      _inherits(SnowTooltip, _BaseTooltip);

      function SnowTooltip(quill, bounds) {
        _classCallCheck(this, SnowTooltip);

        var _this2 = _possibleConstructorReturn(this, (SnowTooltip.__proto__ || Object.getPrototypeOf(SnowTooltip)).call(this, quill, bounds));

        _this2.preview = _this2.root.querySelector('a.ql-preview');
        return _this2;
      }

      _createClass(SnowTooltip, [{
        key: 'listen',
        value: function listen() {
          var _this3 = this;

          _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'listen', this).call(this);
          this.root.querySelector('a.ql-action').addEventListener('click', function (event) {
            if (_this3.root.classList.contains('ql-editing')) {
              _this3.save();
            } else {
              _this3.edit('link', _this3.preview.textContent);
            }
            event.preventDefault();
          });
          this.root.querySelector('a.ql-remove').addEventListener('click', function (event) {
            if (_this3.linkRange != null) {
              var range = _this3.linkRange;
              _this3.restoreFocus();
              _this3.quill.formatText(range, 'link', false, _emitter2.default.sources.USER);
              delete _this3.linkRange;
            }
            event.preventDefault();
            _this3.hide();
          });
          this.quill.on(_emitter2.default.events.SELECTION_CHANGE, function (range, oldRange, source) {
            if (range == null) return;
            if (range.length === 0 && source === _emitter2.default.sources.USER) {
              var _quill$scroll$descend = _this3.quill.scroll.descendant(_link2.default, range.index),
                  _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),
                  link = _quill$scroll$descend2[0],
                  offset = _quill$scroll$descend2[1];

              if (link != null) {
                _this3.linkRange = new _selection.Range(range.index - offset, link.length());
                var preview = _link2.default.formats(link.domNode);
                _this3.preview.textContent = preview;
                _this3.preview.setAttribute('href', preview);
                _this3.show();
                _this3.position(_this3.quill.getBounds(_this3.linkRange));
                return;
              }
            } else {
              delete _this3.linkRange;
            }
            _this3.hide();
          });
        }
      }, {
        key: 'show',
        value: function show() {
          _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'show', this).call(this);
          this.root.removeAttribute('data-mode');
        }
      }]);

      return SnowTooltip;
    }(_base.BaseTooltip);

    SnowTooltip.TEMPLATE = ['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-action"></a>', '<a class="ql-remove"></a>'].join('');

    exports.default = SnowTheme;

    /***/ }),
    /* 63 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _core = __webpack_require__(29);

    var _core2 = _interopRequireDefault(_core);

    var _align = __webpack_require__(36);

    var _direction = __webpack_require__(38);

    var _indent = __webpack_require__(64);

    var _blockquote = __webpack_require__(65);

    var _blockquote2 = _interopRequireDefault(_blockquote);

    var _header = __webpack_require__(66);

    var _header2 = _interopRequireDefault(_header);

    var _list = __webpack_require__(67);

    var _list2 = _interopRequireDefault(_list);

    var _background = __webpack_require__(37);

    var _color = __webpack_require__(26);

    var _font = __webpack_require__(39);

    var _size = __webpack_require__(40);

    var _bold = __webpack_require__(56);

    var _bold2 = _interopRequireDefault(_bold);

    var _italic = __webpack_require__(68);

    var _italic2 = _interopRequireDefault(_italic);

    var _link = __webpack_require__(27);

    var _link2 = _interopRequireDefault(_link);

    var _script = __webpack_require__(69);

    var _script2 = _interopRequireDefault(_script);

    var _strike = __webpack_require__(70);

    var _strike2 = _interopRequireDefault(_strike);

    var _underline = __webpack_require__(71);

    var _underline2 = _interopRequireDefault(_underline);

    var _image = __webpack_require__(72);

    var _image2 = _interopRequireDefault(_image);

    var _video = __webpack_require__(73);

    var _video2 = _interopRequireDefault(_video);

    var _code = __webpack_require__(13);

    var _code2 = _interopRequireDefault(_code);

    var _formula = __webpack_require__(74);

    var _formula2 = _interopRequireDefault(_formula);

    var _syntax = __webpack_require__(75);

    var _syntax2 = _interopRequireDefault(_syntax);

    var _toolbar = __webpack_require__(57);

    var _toolbar2 = _interopRequireDefault(_toolbar);

    var _icons = __webpack_require__(41);

    var _icons2 = _interopRequireDefault(_icons);

    var _picker = __webpack_require__(28);

    var _picker2 = _interopRequireDefault(_picker);

    var _colorPicker = __webpack_require__(59);

    var _colorPicker2 = _interopRequireDefault(_colorPicker);

    var _iconPicker = __webpack_require__(60);

    var _iconPicker2 = _interopRequireDefault(_iconPicker);

    var _tooltip = __webpack_require__(61);

    var _tooltip2 = _interopRequireDefault(_tooltip);

    var _bubble = __webpack_require__(108);

    var _bubble2 = _interopRequireDefault(_bubble);

    var _snow = __webpack_require__(62);

    var _snow2 = _interopRequireDefault(_snow);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    _core2.default.register({
      'attributors/attribute/direction': _direction.DirectionAttribute,

      'attributors/class/align': _align.AlignClass,
      'attributors/class/background': _background.BackgroundClass,
      'attributors/class/color': _color.ColorClass,
      'attributors/class/direction': _direction.DirectionClass,
      'attributors/class/font': _font.FontClass,
      'attributors/class/size': _size.SizeClass,

      'attributors/style/align': _align.AlignStyle,
      'attributors/style/background': _background.BackgroundStyle,
      'attributors/style/color': _color.ColorStyle,
      'attributors/style/direction': _direction.DirectionStyle,
      'attributors/style/font': _font.FontStyle,
      'attributors/style/size': _size.SizeStyle
    }, true);

    _core2.default.register({
      'formats/align': _align.AlignClass,
      'formats/direction': _direction.DirectionClass,
      'formats/indent': _indent.IndentClass,

      'formats/background': _background.BackgroundStyle,
      'formats/color': _color.ColorStyle,
      'formats/font': _font.FontClass,
      'formats/size': _size.SizeClass,

      'formats/blockquote': _blockquote2.default,
      'formats/code-block': _code2.default,
      'formats/header': _header2.default,
      'formats/list': _list2.default,

      'formats/bold': _bold2.default,
      'formats/code': _code.Code,
      'formats/italic': _italic2.default,
      'formats/link': _link2.default,
      'formats/script': _script2.default,
      'formats/strike': _strike2.default,
      'formats/underline': _underline2.default,

      'formats/image': _image2.default,
      'formats/video': _video2.default,

      'formats/list/item': _list.ListItem,

      'modules/formula': _formula2.default,
      'modules/syntax': _syntax2.default,
      'modules/toolbar': _toolbar2.default,

      'themes/bubble': _bubble2.default,
      'themes/snow': _snow2.default,

      'ui/icons': _icons2.default,
      'ui/picker': _picker2.default,
      'ui/icon-picker': _iconPicker2.default,
      'ui/color-picker': _colorPicker2.default,
      'ui/tooltip': _tooltip2.default
    }, true);

    exports.default = _core2.default;

    /***/ }),
    /* 64 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.IndentClass = undefined;

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var IdentAttributor = function (_Parchment$Attributor) {
      _inherits(IdentAttributor, _Parchment$Attributor);

      function IdentAttributor() {
        _classCallCheck(this, IdentAttributor);

        return _possibleConstructorReturn(this, (IdentAttributor.__proto__ || Object.getPrototypeOf(IdentAttributor)).apply(this, arguments));
      }

      _createClass(IdentAttributor, [{
        key: 'add',
        value: function add(node, value) {
          if (value === '+1' || value === '-1') {
            var indent = this.value(node) || 0;
            value = value === '+1' ? indent + 1 : indent - 1;
          }
          if (value === 0) {
            this.remove(node);
            return true;
          } else {
            return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'add', this).call(this, node, value);
          }
        }
      }, {
        key: 'canAdd',
        value: function canAdd(node, value) {
          return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, value) || _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, parseInt(value));
        }
      }, {
        key: 'value',
        value: function value(node) {
          return parseInt(_get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'value', this).call(this, node)) || undefined; // Don't return NaN
        }
      }]);

      return IdentAttributor;
    }(_parchment2.default.Attributor.Class);

    var IndentClass = new IdentAttributor('indent', 'ql-indent', {
      scope: _parchment2.default.Scope.BLOCK,
      whitelist: [1, 2, 3, 4, 5, 6, 7, 8]
    });

    exports.IndentClass = IndentClass;

    /***/ }),
    /* 65 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _block = __webpack_require__(4);

    var _block2 = _interopRequireDefault(_block);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var Blockquote = function (_Block) {
      _inherits(Blockquote, _Block);

      function Blockquote() {
        _classCallCheck(this, Blockquote);

        return _possibleConstructorReturn(this, (Blockquote.__proto__ || Object.getPrototypeOf(Blockquote)).apply(this, arguments));
      }

      return Blockquote;
    }(_block2.default);

    Blockquote.blotName = 'blockquote';
    Blockquote.tagName = 'blockquote';

    exports.default = Blockquote;

    /***/ }),
    /* 66 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _block = __webpack_require__(4);

    var _block2 = _interopRequireDefault(_block);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var Header = function (_Block) {
      _inherits(Header, _Block);

      function Header() {
        _classCallCheck(this, Header);

        return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));
      }

      _createClass(Header, null, [{
        key: 'formats',
        value: function formats(domNode) {
          return this.tagName.indexOf(domNode.tagName) + 1;
        }
      }]);

      return Header;
    }(_block2.default);

    Header.blotName = 'header';
    Header.tagName = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];

    exports.default = Header;

    /***/ }),
    /* 67 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.ListItem = undefined;

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    var _block = __webpack_require__(4);

    var _block2 = _interopRequireDefault(_block);

    var _container = __webpack_require__(25);

    var _container2 = _interopRequireDefault(_container);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var ListItem = function (_Block) {
      _inherits(ListItem, _Block);

      function ListItem() {
        _classCallCheck(this, ListItem);

        return _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));
      }

      _createClass(ListItem, [{
        key: 'format',
        value: function format(name, value) {
          if (name === List.blotName && !value) {
            this.replaceWith(_parchment2.default.create(this.statics.scope));
          } else {
            _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'format', this).call(this, name, value);
          }
        }
      }, {
        key: 'remove',
        value: function remove() {
          if (this.prev == null && this.next == null) {
            this.parent.remove();
          } else {
            _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'remove', this).call(this);
          }
        }
      }, {
        key: 'replaceWith',
        value: function replaceWith(name, value) {
          this.parent.isolate(this.offset(this.parent), this.length());
          if (name === this.parent.statics.blotName) {
            this.parent.replaceWith(name, value);
            return this;
          } else {
            this.parent.unwrap();
            return _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'replaceWith', this).call(this, name, value);
          }
        }
      }], [{
        key: 'formats',
        value: function formats(domNode) {
          return domNode.tagName === this.tagName ? undefined : _get(ListItem.__proto__ || Object.getPrototypeOf(ListItem), 'formats', this).call(this, domNode);
        }
      }]);

      return ListItem;
    }(_block2.default);

    ListItem.blotName = 'list-item';
    ListItem.tagName = 'LI';

    var List = function (_Container) {
      _inherits(List, _Container);

      _createClass(List, null, [{
        key: 'create',
        value: function create(value) {
          var tagName = value === 'ordered' ? 'OL' : 'UL';
          var node = _get(List.__proto__ || Object.getPrototypeOf(List), 'create', this).call(this, tagName);
          if (value === 'checked' || value === 'unchecked') {
            node.setAttribute('data-checked', value === 'checked');
          }
          return node;
        }
      }, {
        key: 'formats',
        value: function formats(domNode) {
          if (domNode.tagName === 'OL') return 'ordered';
          if (domNode.tagName === 'UL') {
            if (domNode.hasAttribute('data-checked')) {
              return domNode.getAttribute('data-checked') === 'true' ? 'checked' : 'unchecked';
            } else {
              return 'bullet';
            }
          }
          return undefined;
        }
      }]);

      function List(domNode) {
        _classCallCheck(this, List);

        var _this2 = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, domNode));

        var listEventHandler = function listEventHandler(e) {
          if (e.target.parentNode !== domNode) return;
          var format = _this2.statics.formats(domNode);
          var blot = _parchment2.default.find(e.target);
          if (format === 'checked') {
            blot.format('list', 'unchecked');
          } else if (format === 'unchecked') {
            blot.format('list', 'checked');
          }
        };

        domNode.addEventListener('touchstart', listEventHandler);
        domNode.addEventListener('mousedown', listEventHandler);
        return _this2;
      }

      _createClass(List, [{
        key: 'format',
        value: function format(name, value) {
          if (this.children.length > 0) {
            this.children.tail.format(name, value);
          }
        }
      }, {
        key: 'formats',
        value: function formats() {
          // We don't inherit from FormatBlot
          return _defineProperty({}, this.statics.blotName, this.statics.formats(this.domNode));
        }
      }, {
        key: 'insertBefore',
        value: function insertBefore(blot, ref) {
          if (blot instanceof ListItem) {
            _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'insertBefore', this).call(this, blot, ref);
          } else {
            var index = ref == null ? this.length() : ref.offset(this);
            var after = this.split(index);
            after.parent.insertBefore(blot, after);
          }
        }
      }, {
        key: 'optimize',
        value: function optimize(context) {
          _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'optimize', this).call(this, context);
          var next = this.next;
          if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName && next.domNode.getAttribute('data-checked') === this.domNode.getAttribute('data-checked')) {
            next.moveChildren(this);
            next.remove();
          }
        }
      }, {
        key: 'replace',
        value: function replace(target) {
          if (target.statics.blotName !== this.statics.blotName) {
            var item = _parchment2.default.create(this.statics.defaultChild);
            target.moveChildren(item);
            this.appendChild(item);
          }
          _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'replace', this).call(this, target);
        }
      }]);

      return List;
    }(_container2.default);

    List.blotName = 'list';
    List.scope = _parchment2.default.Scope.BLOCK_BLOT;
    List.tagName = ['OL', 'UL'];
    List.defaultChild = 'list-item';
    List.allowedChildren = [ListItem];

    exports.ListItem = ListItem;
    exports.default = List;

    /***/ }),
    /* 68 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _bold = __webpack_require__(56);

    var _bold2 = _interopRequireDefault(_bold);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var Italic = function (_Bold) {
      _inherits(Italic, _Bold);

      function Italic() {
        _classCallCheck(this, Italic);

        return _possibleConstructorReturn(this, (Italic.__proto__ || Object.getPrototypeOf(Italic)).apply(this, arguments));
      }

      return Italic;
    }(_bold2.default);

    Italic.blotName = 'italic';
    Italic.tagName = ['EM', 'I'];

    exports.default = Italic;

    /***/ }),
    /* 69 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _inline = __webpack_require__(6);

    var _inline2 = _interopRequireDefault(_inline);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var Script = function (_Inline) {
      _inherits(Script, _Inline);

      function Script() {
        _classCallCheck(this, Script);

        return _possibleConstructorReturn(this, (Script.__proto__ || Object.getPrototypeOf(Script)).apply(this, arguments));
      }

      _createClass(Script, null, [{
        key: 'create',
        value: function create(value) {
          if (value === 'super') {
            return document.createElement('sup');
          } else if (value === 'sub') {
            return document.createElement('sub');
          } else {
            return _get(Script.__proto__ || Object.getPrototypeOf(Script), 'create', this).call(this, value);
          }
        }
      }, {
        key: 'formats',
        value: function formats(domNode) {
          if (domNode.tagName === 'SUB') return 'sub';
          if (domNode.tagName === 'SUP') return 'super';
          return undefined;
        }
      }]);

      return Script;
    }(_inline2.default);

    Script.blotName = 'script';
    Script.tagName = ['SUB', 'SUP'];

    exports.default = Script;

    /***/ }),
    /* 70 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _inline = __webpack_require__(6);

    var _inline2 = _interopRequireDefault(_inline);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var Strike = function (_Inline) {
      _inherits(Strike, _Inline);

      function Strike() {
        _classCallCheck(this, Strike);

        return _possibleConstructorReturn(this, (Strike.__proto__ || Object.getPrototypeOf(Strike)).apply(this, arguments));
      }

      return Strike;
    }(_inline2.default);

    Strike.blotName = 'strike';
    Strike.tagName = 'S';

    exports.default = Strike;

    /***/ }),
    /* 71 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _inline = __webpack_require__(6);

    var _inline2 = _interopRequireDefault(_inline);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var Underline = function (_Inline) {
      _inherits(Underline, _Inline);

      function Underline() {
        _classCallCheck(this, Underline);

        return _possibleConstructorReturn(this, (Underline.__proto__ || Object.getPrototypeOf(Underline)).apply(this, arguments));
      }

      return Underline;
    }(_inline2.default);

    Underline.blotName = 'underline';
    Underline.tagName = 'U';

    exports.default = Underline;

    /***/ }),
    /* 72 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    var _link = __webpack_require__(27);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var ATTRIBUTES = ['alt', 'height', 'width'];

    var Image = function (_Parchment$Embed) {
      _inherits(Image, _Parchment$Embed);

      function Image() {
        _classCallCheck(this, Image);

        return _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).apply(this, arguments));
      }

      _createClass(Image, [{
        key: 'format',
        value: function format(name, value) {
          if (ATTRIBUTES.indexOf(name) > -1) {
            if (value) {
              this.domNode.setAttribute(name, value);
            } else {
              this.domNode.removeAttribute(name);
            }
          } else {
            _get(Image.prototype.__proto__ || Object.getPrototypeOf(Image.prototype), 'format', this).call(this, name, value);
          }
        }
      }], [{
        key: 'create',
        value: function create(value) {
          var node = _get(Image.__proto__ || Object.getPrototypeOf(Image), 'create', this).call(this, value);
          if (typeof value === 'string') {
            node.setAttribute('src', this.sanitize(value));
          }
          return node;
        }
      }, {
        key: 'formats',
        value: function formats(domNode) {
          return ATTRIBUTES.reduce(function (formats, attribute) {
            if (domNode.hasAttribute(attribute)) {
              formats[attribute] = domNode.getAttribute(attribute);
            }
            return formats;
          }, {});
        }
      }, {
        key: 'match',
        value: function match(url) {
          return (/\.(jpe?g|gif|png)$/.test(url) || /^data:image\/.+;base64/.test(url)
          );
        }
      }, {
        key: 'sanitize',
        value: function sanitize(url) {
          return (0, _link.sanitize)(url, ['http', 'https', 'data']) ? url : '//:0';
        }
      }, {
        key: 'value',
        value: function value(domNode) {
          return domNode.getAttribute('src');
        }
      }]);

      return Image;
    }(_parchment2.default.Embed);

    Image.blotName = 'image';
    Image.tagName = 'IMG';

    exports.default = Image;

    /***/ }),
    /* 73 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _block = __webpack_require__(4);

    var _link = __webpack_require__(27);

    var _link2 = _interopRequireDefault(_link);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var ATTRIBUTES = ['height', 'width'];

    var Video = function (_BlockEmbed) {
      _inherits(Video, _BlockEmbed);

      function Video() {
        _classCallCheck(this, Video);

        return _possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).apply(this, arguments));
      }

      _createClass(Video, [{
        key: 'format',
        value: function format(name, value) {
          if (ATTRIBUTES.indexOf(name) > -1) {
            if (value) {
              this.domNode.setAttribute(name, value);
            } else {
              this.domNode.removeAttribute(name);
            }
          } else {
            _get(Video.prototype.__proto__ || Object.getPrototypeOf(Video.prototype), 'format', this).call(this, name, value);
          }
        }
      }], [{
        key: 'create',
        value: function create(value) {
          var node = _get(Video.__proto__ || Object.getPrototypeOf(Video), 'create', this).call(this, value);
          node.setAttribute('frameborder', '0');
          node.setAttribute('allowfullscreen', true);
          node.setAttribute('src', this.sanitize(value));
          return node;
        }
      }, {
        key: 'formats',
        value: function formats(domNode) {
          return ATTRIBUTES.reduce(function (formats, attribute) {
            if (domNode.hasAttribute(attribute)) {
              formats[attribute] = domNode.getAttribute(attribute);
            }
            return formats;
          }, {});
        }
      }, {
        key: 'sanitize',
        value: function sanitize(url) {
          return _link2.default.sanitize(url);
        }
      }, {
        key: 'value',
        value: function value(domNode) {
          return domNode.getAttribute('src');
        }
      }]);

      return Video;
    }(_block.BlockEmbed);

    Video.blotName = 'video';
    Video.className = 'ql-video';
    Video.tagName = 'IFRAME';

    exports.default = Video;

    /***/ }),
    /* 74 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.FormulaBlot = undefined;

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _embed = __webpack_require__(35);

    var _embed2 = _interopRequireDefault(_embed);

    var _quill = __webpack_require__(5);

    var _quill2 = _interopRequireDefault(_quill);

    var _module = __webpack_require__(9);

    var _module2 = _interopRequireDefault(_module);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var FormulaBlot = function (_Embed) {
      _inherits(FormulaBlot, _Embed);

      function FormulaBlot() {
        _classCallCheck(this, FormulaBlot);

        return _possibleConstructorReturn(this, (FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot)).apply(this, arguments));
      }

      _createClass(FormulaBlot, null, [{
        key: 'create',
        value: function create(value) {
          var node = _get(FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot), 'create', this).call(this, value);
          if (typeof value === 'string') {
            window.katex.render(value, node, {
              throwOnError: false,
              errorColor: '#f00'
            });
            node.setAttribute('data-value', value);
          }
          return node;
        }
      }, {
        key: 'value',
        value: function value(domNode) {
          return domNode.getAttribute('data-value');
        }
      }]);

      return FormulaBlot;
    }(_embed2.default);

    FormulaBlot.blotName = 'formula';
    FormulaBlot.className = 'ql-formula';
    FormulaBlot.tagName = 'SPAN';

    var Formula = function (_Module) {
      _inherits(Formula, _Module);

      _createClass(Formula, null, [{
        key: 'register',
        value: function register() {
          _quill2.default.register(FormulaBlot, true);
        }
      }]);

      function Formula() {
        _classCallCheck(this, Formula);

        var _this2 = _possibleConstructorReturn(this, (Formula.__proto__ || Object.getPrototypeOf(Formula)).call(this));

        if (window.katex == null) {
          throw new Error('Formula module requires KaTeX.');
        }
        return _this2;
      }

      return Formula;
    }(_module2.default);

    exports.FormulaBlot = FormulaBlot;
    exports.default = Formula;

    /***/ }),
    /* 75 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.CodeToken = exports.CodeBlock = undefined;

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _parchment = __webpack_require__(0);

    var _parchment2 = _interopRequireDefault(_parchment);

    var _quill = __webpack_require__(5);

    var _quill2 = _interopRequireDefault(_quill);

    var _module = __webpack_require__(9);

    var _module2 = _interopRequireDefault(_module);

    var _code = __webpack_require__(13);

    var _code2 = _interopRequireDefault(_code);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var SyntaxCodeBlock = function (_CodeBlock) {
      _inherits(SyntaxCodeBlock, _CodeBlock);

      function SyntaxCodeBlock() {
        _classCallCheck(this, SyntaxCodeBlock);

        return _possibleConstructorReturn(this, (SyntaxCodeBlock.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock)).apply(this, arguments));
      }

      _createClass(SyntaxCodeBlock, [{
        key: 'replaceWith',
        value: function replaceWith(block) {
          this.domNode.textContent = this.domNode.textContent;
          this.attach();
          _get(SyntaxCodeBlock.prototype.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock.prototype), 'replaceWith', this).call(this, block);
        }
      }, {
        key: 'highlight',
        value: function highlight(_highlight) {
          var text = this.domNode.textContent;
          if (this.cachedText !== text) {
            if (text.trim().length > 0 || this.cachedText == null) {
              this.domNode.innerHTML = _highlight(text);
              this.domNode.normalize();
              this.attach();
            }
            this.cachedText = text;
          }
        }
      }]);

      return SyntaxCodeBlock;
    }(_code2.default);

    SyntaxCodeBlock.className = 'ql-syntax';

    var CodeToken = new _parchment2.default.Attributor.Class('token', 'hljs', {
      scope: _parchment2.default.Scope.INLINE
    });

    var Syntax = function (_Module) {
      _inherits(Syntax, _Module);

      _createClass(Syntax, null, [{
        key: 'register',
        value: function register() {
          _quill2.default.register(CodeToken, true);
          _quill2.default.register(SyntaxCodeBlock, true);
        }
      }]);

      function Syntax(quill, options) {
        _classCallCheck(this, Syntax);

        var _this2 = _possibleConstructorReturn(this, (Syntax.__proto__ || Object.getPrototypeOf(Syntax)).call(this, quill, options));

        if (typeof _this2.options.highlight !== 'function') {
          throw new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');
        }
        var timer = null;
        _this2.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
          clearTimeout(timer);
          timer = setTimeout(function () {
            _this2.highlight();
            timer = null;
          }, _this2.options.interval);
        });
        _this2.highlight();
        return _this2;
      }

      _createClass(Syntax, [{
        key: 'highlight',
        value: function highlight() {
          var _this3 = this;

          if (this.quill.selection.composing) return;
          this.quill.update(_quill2.default.sources.USER);
          var range = this.quill.getSelection();
          this.quill.scroll.descendants(SyntaxCodeBlock).forEach(function (code) {
            code.highlight(_this3.options.highlight);
          });
          this.quill.update(_quill2.default.sources.SILENT);
          if (range != null) {
            this.quill.setSelection(range, _quill2.default.sources.SILENT);
          }
        }
      }]);

      return Syntax;
    }(_module2.default);

    Syntax.DEFAULTS = {
      highlight: function () {
        if (window.hljs == null) return null;
        return function (text) {
          var result = window.hljs.highlightAuto(text);
          return result.value;
        };
      }(),
      interval: 1000
    };

    exports.CodeBlock = SyntaxCodeBlock;
    exports.CodeToken = CodeToken;
    exports.default = Syntax;

    /***/ }),
    /* 76 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>";

    /***/ }),
    /* 77 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>";

    /***/ }),
    /* 78 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>";

    /***/ }),
    /* 79 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>";

    /***/ }),
    /* 80 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <g class=\"ql-fill ql-color-label\"> <polygon points=\"6 6.868 6 6 5 6 5 7 5.942 7 6 6.868\"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points=\"6.817 5 6 5 6 6 6.38 6 6.817 5\"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points=\"4 11.439 4 11 3 11 3 12 3.755 12 4 11.439\"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points=\"4.63 10 4 10 4 11 4.192 11 4.63 10\"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points=\"13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174\"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points=\"12 6.868 12 6 11.62 6 12 6.868\"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points=\"12.933 9 13 9 13 8 12.495 8 12.933 9\"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points=\"5.5 13 9 5 12.5 13\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>";

    /***/ }),
    /* 81 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=4 y=5></rect> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=11 y=5></rect> <path class=\"ql-even ql-fill ql-stroke\" d=M7,8c0,4.031-3,5-3,5></path> <path class=\"ql-even ql-fill ql-stroke\" d=M14,8c0,4.031-3,5-3,5></path> </svg>";

    /***/ }),
    /* 82 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>";

    /***/ }),
    /* 83 */
    /***/ (function(module, exports) {

    module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>";

    /***/ }),
    /* 84 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-color-label ql-stroke ql-transparent\" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points=\"5.5 11 9 3 12.5 11\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>";

    /***/ }),
    /* 85 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"3 11 5 9 3 7 3 11\"></polygon> <line class=\"ql-stroke ql-fill\" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>";

    /***/ }),
    /* 86 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"15 12 13 10 15 8 15 12\"></polygon> <line class=\"ql-stroke ql-fill\" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>";

    /***/ }),
    /* 87 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>";

    /***/ }),
    /* 88 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>";

    /***/ }),
    /* 89 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>";

    /***/ }),
    /* 90 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform=\"translate(24 18) rotate(-180)\"/> </svg>";

    /***/ }),
    /* 91 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>";

    /***/ }),
    /* 92 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>";

    /***/ }),
    /* 93 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>";

    /***/ }),
    /* 94 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>";

    /***/ }),
    /* 95 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class=\"ql-even ql-fill\" points=\"5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12\"></polyline> </svg>";

    /***/ }),
    /* 96 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=\"ql-fill ql-stroke\" points=\"3 7 3 11 5 9 3 7\"></polyline> </svg>";

    /***/ }),
    /* 97 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"5 7 5 11 3 9 5 7\"></polyline> </svg>";

    /***/ }),
    /* 98 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class=\"ql-even ql-stroke\" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class=\"ql-even ql-stroke\" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>";

    /***/ }),
    /* 99 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class=\"ql-stroke ql-thin\" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class=\"ql-stroke ql-thin\" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class=\"ql-stroke ql-thin\" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>";

    /***/ }),
    /* 100 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>";

    /***/ }),
    /* 101 */
    /***/ (function(module, exports) {

    module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points=\"3 4 4 5 6 3\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points=\"3 14 4 15 6 13\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"3 9 4 10 6 8\"></polyline> </svg>";

    /***/ }),
    /* 102 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>";

    /***/ }),
    /* 103 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>";

    /***/ }),
    /* 104 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-stroke ql-thin\" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>";

    /***/ }),
    /* 105 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>";

    /***/ }),
    /* 106 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>";

    /***/ }),
    /* 107 */
    /***/ (function(module, exports) {

    module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=ql-stroke points=\"7 11 9 13 11 11 7 11\"></polygon> <polygon class=ql-stroke points=\"7 7 9 5 11 7 7 7\"></polygon> </svg>";

    /***/ }),
    /* 108 */
    /***/ (function(module, exports, __webpack_require__) {


    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.BubbleTooltip = undefined;

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _extend = __webpack_require__(3);

    var _extend2 = _interopRequireDefault(_extend);

    var _emitter = __webpack_require__(8);

    var _emitter2 = _interopRequireDefault(_emitter);

    var _base = __webpack_require__(43);

    var _base2 = _interopRequireDefault(_base);

    var _selection = __webpack_require__(15);

    var _icons = __webpack_require__(41);

    var _icons2 = _interopRequireDefault(_icons);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var TOOLBAR_CONFIG = [['bold', 'italic', 'link'], [{ header: 1 }, { header: 2 }, 'blockquote']];

    var BubbleTheme = function (_BaseTheme) {
      _inherits(BubbleTheme, _BaseTheme);

      function BubbleTheme(quill, options) {
        _classCallCheck(this, BubbleTheme);

        if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
          options.modules.toolbar.container = TOOLBAR_CONFIG;
        }

        var _this = _possibleConstructorReturn(this, (BubbleTheme.__proto__ || Object.getPrototypeOf(BubbleTheme)).call(this, quill, options));

        _this.quill.container.classList.add('ql-bubble');
        return _this;
      }

      _createClass(BubbleTheme, [{
        key: 'extendToolbar',
        value: function extendToolbar(toolbar) {
          this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);
          this.tooltip.root.appendChild(toolbar.container);
          this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
          this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
        }
      }]);

      return BubbleTheme;
    }(_base2.default);

    BubbleTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
      modules: {
        toolbar: {
          handlers: {
            link: function link(value) {
              if (!value) {
                this.quill.format('link', false);
              } else {
                this.quill.theme.tooltip.edit();
              }
            }
          }
        }
      }
    });

    var BubbleTooltip = function (_BaseTooltip) {
      _inherits(BubbleTooltip, _BaseTooltip);

      function BubbleTooltip(quill, bounds) {
        _classCallCheck(this, BubbleTooltip);

        var _this2 = _possibleConstructorReturn(this, (BubbleTooltip.__proto__ || Object.getPrototypeOf(BubbleTooltip)).call(this, quill, bounds));

        _this2.quill.on(_emitter2.default.events.EDITOR_CHANGE, function (type, range, oldRange, source) {
          if (type !== _emitter2.default.events.SELECTION_CHANGE) return;
          if (range != null && range.length > 0 && source === _emitter2.default.sources.USER) {
            _this2.show();
            // Lock our width so we will expand beyond our offsetParent boundaries
            _this2.root.style.left = '0px';
            _this2.root.style.width = '';
            _this2.root.style.width = _this2.root.offsetWidth + 'px';
            var lines = _this2.quill.getLines(range.index, range.length);
            if (lines.length === 1) {
              _this2.position(_this2.quill.getBounds(range));
            } else {
              var lastLine = lines[lines.length - 1];
              var index = _this2.quill.getIndex(lastLine);
              var length = Math.min(lastLine.length() - 1, range.index + range.length - index);
              var _bounds = _this2.quill.getBounds(new _selection.Range(index, length));
              _this2.position(_bounds);
            }
          } else if (document.activeElement !== _this2.textbox && _this2.quill.hasFocus()) {
            _this2.hide();
          }
        });
        return _this2;
      }

      _createClass(BubbleTooltip, [{
        key: 'listen',
        value: function listen() {
          var _this3 = this;

          _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'listen', this).call(this);
          this.root.querySelector('.ql-close').addEventListener('click', function () {
            _this3.root.classList.remove('ql-editing');
          });
          this.quill.on(_emitter2.default.events.SCROLL_OPTIMIZE, function () {
            // Let selection be restored by toolbar handlers before repositioning
            setTimeout(function () {
              if (_this3.root.classList.contains('ql-hidden')) return;
              var range = _this3.quill.getSelection();
              if (range != null) {
                _this3.position(_this3.quill.getBounds(range));
              }
            }, 1);
          });
        }
      }, {
        key: 'cancel',
        value: function cancel() {
          this.show();
        }
      }, {
        key: 'position',
        value: function position(reference) {
          var shift = _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'position', this).call(this, reference);
          var arrow = this.root.querySelector('.ql-tooltip-arrow');
          arrow.style.marginLeft = '';
          if (shift === 0) return shift;
          arrow.style.marginLeft = -1 * shift - arrow.offsetWidth / 2 + 'px';
        }
      }]);

      return BubbleTooltip;
    }(_base.BaseTooltip);

    BubbleTooltip.TEMPLATE = ['<span class="ql-tooltip-arrow"></span>', '<div class="ql-tooltip-editor">', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-close"></a>', '</div>'].join('');

    exports.BubbleTooltip = BubbleTooltip;
    exports.default = BubbleTheme;

    /***/ }),
    /* 109 */
    /***/ (function(module, exports, __webpack_require__) {

    module.exports = __webpack_require__(63);


    /***/ })
    /******/ ])["default"];
    });
    });

    var Quill = /*@__PURE__*/getDefaultExportFromCjs(quill);

    /* src/components/Button.svelte generated by Svelte v3.44.1 */
    const file$2 = "src/components/Button.svelte";

    function create_fragment$3(ctx) {
    	let button;
    	let p;
    	let t;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			p = element("p");
    			t = text(/*title*/ ctx[0]);
    			add_location(p, file$2, 34, 2, 775);
    			attr_dev(button, "style", /*getDynamicStyles*/ ctx[2]());
    			attr_dev(button, "class", "svelte-1sbswzc");
    			add_location(button, file$2, 33, 0, 714);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, p);
    			append_dev(p, t);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*onClick*/ ctx[1])) /*onClick*/ ctx[1].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			if (dirty & /*title*/ 1) set_data_dev(t, /*title*/ ctx[0]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Button', slots, []);

    	const genericFunction = () => {
    		
    	};

    	let { title = "" } = $$props;
    	let { onClick = genericFunction } = $$props;
    	let { variant = "primary" } = $$props;

    	const getDynamicStyles = () => `
  background-color: ${variant === "primary" ? Theme.PALETTE.primary : "white"};
  color: ${variant === "primary" ? "white" : Theme.PALETTE.primary};
  border: ${variant === "primary"
	? "none"
	: `1px solid ${Theme.PALETTE.primary}`}
`;

    	const writable_props = ['title', 'onClick', 'variant'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Button> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('title' in $$props) $$invalidate(0, title = $$props.title);
    		if ('onClick' in $$props) $$invalidate(1, onClick = $$props.onClick);
    		if ('variant' in $$props) $$invalidate(3, variant = $$props.variant);
    	};

    	$$self.$capture_state = () => ({
    		Theme,
    		genericFunction,
    		title,
    		onClick,
    		variant,
    		getDynamicStyles
    	});

    	$$self.$inject_state = $$props => {
    		if ('title' in $$props) $$invalidate(0, title = $$props.title);
    		if ('onClick' in $$props) $$invalidate(1, onClick = $$props.onClick);
    		if ('variant' in $$props) $$invalidate(3, variant = $$props.variant);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [title, onClick, getDynamicStyles, variant];
    }

    class Button extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { title: 0, onClick: 1, variant: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Button",
    			options,
    			id: create_fragment$3.name
    		});
    	}

    	get title() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClick() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClick(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get variant() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set variant(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/pages/BookPages.svelte generated by Svelte v3.44.1 */

    const { console: console_1 } = globals;
    const file$1 = "src/pages/BookPages.svelte";

    // (181:0) {#if showBook}
    function create_if_block$1(ctx) {
    	let mainlayout;
    	let current;

    	mainlayout = new Main({
    			props: {
    				logoPath,
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mainlayout.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mainlayout, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mainlayout_changes = {};

    			if (dirty & /*$$scope, currentPageIndex, allPages, currentPage, bookAuthor, currentBook*/ 16439) {
    				mainlayout_changes.$$scope = { dirty, ctx };
    			}

    			mainlayout.$set(mainlayout_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mainlayout.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mainlayout.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mainlayout, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(181:0) {#if showBook}",
    		ctx
    	});

    	return block;
    }

    // (186:6) {#if currentPage}
    function create_if_block_1(ctx) {
    	let section2;
    	let h3;
    	let t0_value = /*currentPage*/ ctx[5].title + "";
    	let t0;
    	let t1;
    	let section0;
    	let div0;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t2;
    	let span;
    	let t3;
    	let t4_value = /*bookAuthor*/ ctx[4].nickname + "";
    	let t4;
    	let t5;
    	let section1;
    	let stats;
    	let t6;
    	let div1;
    	let t7;
    	let div2;
    	let raw_value = /*currentPage*/ ctx[5].content + "";
    	let t8;
    	let t9;
    	let t10;
    	let current;
    	let mounted;
    	let dispose;

    	stats = new Stats({
    			props: {
    				justViews: true,
    				views: /*currentPage*/ ctx[5].views.length
    			},
    			$$inline: true
    		});

    	let if_block0 = /*allPages*/ ctx[0].length > 1 && /*currentPageIndex*/ ctx[1] === 0 && create_if_block_4(ctx);
    	let if_block1 = /*allPages*/ ctx[0].length > 1 && /*currentPageIndex*/ ctx[1] > 0 && /*currentPageIndex*/ ctx[1] < /*allPages*/ ctx[0].length - 1 && create_if_block_3(ctx);
    	let if_block2 = /*allPages*/ ctx[0].length > 1 && /*currentPageIndex*/ ctx[1] === /*allPages*/ ctx[0].length - 1 && create_if_block_2(ctx);

    	const block = {
    		c: function create() {
    			section2 = element("section");
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			section0 = element("section");
    			div0 = element("div");
    			img = element("img");
    			t2 = space();
    			span = element("span");
    			t3 = text("Escrito por @");
    			t4 = text(t4_value);
    			t5 = space();
    			section1 = element("section");
    			create_component(stats.$$.fragment);
    			t6 = space();
    			div1 = element("div");
    			t7 = space();
    			div2 = element("div");
    			t8 = space();
    			if (if_block0) if_block0.c();
    			t9 = space();
    			if (if_block1) if_block1.c();
    			t10 = space();
    			if (if_block2) if_block2.c();
    			attr_dev(h3, "class", "current-page-title svelte-1ltiq12");
    			add_location(h3, file$1, 187, 10, 3746);
    			attr_dev(img, "class", "small-avatar svelte-1ltiq12");
    			if (!src_url_equal(img.src, img_src_value = /*bookAuthor*/ ctx[4].photo)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*bookAuthor*/ ctx[4].nickname);
    			add_location(img, file$1, 195, 14, 3992);
    			attr_dev(div0, "class", "avatar-wrapper svelte-1ltiq12");
    			add_location(div0, file$1, 194, 12, 3949);
    			attr_dev(span, "class", "svelte-1ltiq12");
    			add_location(span, file$1, 200, 12, 4153);
    			attr_dev(section0, "class", "creation-section svelte-1ltiq12");
    			add_location(section0, file$1, 193, 10, 3902);
    			attr_dev(section1, "class", "stats-section svelte-1ltiq12");
    			add_location(section1, file$1, 203, 10, 4233);
    			attr_dev(div1, "class", "divider svelte-1ltiq12");
    			add_location(div1, file$1, 207, 10, 4373);
    			attr_dev(div2, "class", "page-content ql-editor svelte-1ltiq12");
    			add_location(div2, file$1, 209, 10, 4412);
    			attr_dev(section2, "class", "page-contenet-container svelte-1ltiq12");
    			add_location(section2, file$1, 186, 8, 3694);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section2, anchor);
    			append_dev(section2, h3);
    			append_dev(h3, t0);
    			append_dev(section2, t1);
    			append_dev(section2, section0);
    			append_dev(section0, div0);
    			append_dev(div0, img);
    			append_dev(section0, t2);
    			append_dev(section0, span);
    			append_dev(span, t3);
    			append_dev(span, t4);
    			append_dev(section2, t5);
    			append_dev(section2, section1);
    			mount_component(stats, section1, null);
    			append_dev(section2, t6);
    			append_dev(section2, div1);
    			append_dev(section2, t7);
    			append_dev(section2, div2);
    			div2.innerHTML = raw_value;
    			append_dev(section2, t8);
    			if (if_block0) if_block0.m(section2, null);
    			append_dev(section2, t9);
    			if (if_block1) if_block1.m(section2, null);
    			append_dev(section2, t10);
    			if (if_block2) if_block2.m(section2, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(h3, "click", /*click_handler*/ ctx[9], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*currentPage*/ 32) && t0_value !== (t0_value = /*currentPage*/ ctx[5].title + "")) set_data_dev(t0, t0_value);

    			if (!current || dirty & /*bookAuthor*/ 16 && !src_url_equal(img.src, img_src_value = /*bookAuthor*/ ctx[4].photo)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (!current || dirty & /*bookAuthor*/ 16 && img_alt_value !== (img_alt_value = /*bookAuthor*/ ctx[4].nickname)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if ((!current || dirty & /*bookAuthor*/ 16) && t4_value !== (t4_value = /*bookAuthor*/ ctx[4].nickname + "")) set_data_dev(t4, t4_value);
    			const stats_changes = {};
    			if (dirty & /*currentPage*/ 32) stats_changes.views = /*currentPage*/ ctx[5].views.length;
    			stats.$set(stats_changes);
    			if ((!current || dirty & /*currentPage*/ 32) && raw_value !== (raw_value = /*currentPage*/ ctx[5].content + "")) div2.innerHTML = raw_value;
    			if (/*allPages*/ ctx[0].length > 1 && /*currentPageIndex*/ ctx[1] === 0) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*allPages, currentPageIndex*/ 3) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_4(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(section2, t9);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*allPages*/ ctx[0].length > 1 && /*currentPageIndex*/ ctx[1] > 0 && /*currentPageIndex*/ ctx[1] < /*allPages*/ ctx[0].length - 1) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*allPages, currentPageIndex*/ 3) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_3(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(section2, t10);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*allPages*/ ctx[0].length > 1 && /*currentPageIndex*/ ctx[1] === /*allPages*/ ctx[0].length - 1) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty & /*allPages, currentPageIndex*/ 3) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_2(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(section2, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stats.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stats.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section2);
    			destroy_component(stats);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(186:6) {#if currentPage}",
    		ctx
    	});

    	return block;
    }

    // (214:10) {#if allPages.length > 1 && currentPageIndex === 0}
    function create_if_block_4(ctx) {
    	let section;
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				title: "Siguiente página",
    				onClick: /*handleGoToNextPage*/ ctx[6]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(button.$$.fragment);
    			attr_dev(section, "class", "single-button-section svelte-1ltiq12");
    			add_location(section, file$1, 214, 12, 4581);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(button, section, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(214:10) {#if allPages.length > 1 && currentPageIndex === 0}",
    		ctx
    	});

    	return block;
    }

    // (220:10) {#if allPages.length > 1 && currentPageIndex > 0 && currentPageIndex < allPages.length - 1}
    function create_if_block_3(ctx) {
    	let section;
    	let button0;
    	let t;
    	let button1;
    	let current;

    	button0 = new Button({
    			props: {
    				variant: "outline",
    				title: "Página anterior",
    				onClick: /*func*/ ctx[10]
    			},
    			$$inline: true
    		});

    	button1 = new Button({
    			props: {
    				title: "Siguiente página",
    				onClick: /*handleGoToNextPage*/ ctx[6]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(button0.$$.fragment);
    			t = space();
    			create_component(button1.$$.fragment);
    			attr_dev(section, "class", "two-button-section svelte-1ltiq12");
    			add_location(section, file$1, 220, 12, 4856);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(button0, section, null);
    			append_dev(section, t);
    			mount_component(button1, section, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button0_changes = {};
    			if (dirty & /*currentPageIndex*/ 2) button0_changes.onClick = /*func*/ ctx[10];
    			button0.$set(button0_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button0.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button0.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(button0);
    			destroy_component(button1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(220:10) {#if allPages.length > 1 && currentPageIndex > 0 && currentPageIndex < allPages.length - 1}",
    		ctx
    	});

    	return block;
    }

    // (230:10) {#if allPages.length > 1 && currentPageIndex === allPages.length - 1}
    function create_if_block_2(ctx) {
    	let section;
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				variant: "outline",
    				title: "Página anterior",
    				onClick: /*func_1*/ ctx[11]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(button.$$.fragment);
    			attr_dev(section, "class", "single-button-section svelte-1ltiq12");
    			add_location(section, file$1, 230, 12, 5258);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(button, section, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};
    			if (dirty & /*currentPageIndex*/ 2) button_changes.onClick = /*func_1*/ ctx[11];
    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(230:10) {#if allPages.length > 1 && currentPageIndex === allPages.length - 1}",
    		ctx
    	});

    	return block;
    }

    // (182:2) <MainLayout logoPath="{logoPath}">
    function create_default_slot$1(ctx) {
    	let div;
    	let h1;
    	let t0_value = /*currentBook*/ ctx[2].title + "";
    	let t0;
    	let t1;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*currentPage*/ ctx[5] && create_if_block_1(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			h1 = element("h1");
    			t0 = text(t0_value);
    			t1 = space();
    			if (if_block) if_block.c();
    			attr_dev(h1, "class", "svelte-1ltiq12");
    			add_location(h1, file$1, 183, 6, 3610);
    			attr_dev(div, "class", "book-wrapper svelte-1ltiq12");
    			add_location(div, file$1, 182, 4, 3577);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h1);
    			append_dev(h1, t0);
    			append_dev(div, t1);
    			if (if_block) if_block.m(div, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(h1, "click", /*goToBook*/ ctx[7], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*currentBook*/ 4) && t0_value !== (t0_value = /*currentBook*/ ctx[2].title + "")) set_data_dev(t0, t0_value);

    			if (/*currentPage*/ ctx[5]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*currentPage*/ 32) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(182:2) <MainLayout logoPath=\\\"{logoPath}\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let link;
    	let t;
    	let if_block_anchor;
    	let current;
    	let if_block = /*showBook*/ ctx[3] && create_if_block$1(ctx);

    	const block = {
    		c: function create() {
    			link = element("link");
    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr_dev(link, "href", "https://cdn.quilljs.com/1.3.6/quill.core.css");
    			attr_dev(link, "rel", "stylesheet");
    			add_location(link, file$1, 177, 2, 3427);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, link);
    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*showBook*/ ctx[3]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*showBook*/ 8) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			detach_dev(link);
    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const logoPath = "images/dbook-logo.svg";

    function instance$2($$self, $$props, $$invalidate) {
    	let currentPage;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BookPages', slots, []);
    	Quill.register("attributors/class/color", true);
    	Quill.register("attributors/class/size", true);
    	let { bookId } = $$props;
    	let currentBook;
    	let showBook = false;
    	let myUser;
    	let allPages = [];
    	let currentPageIndex = 0;
    	let bookAuthor;

    	const handleAddPageView = index => {
    		currentBook.createdBy !== myUser.uuid && addPageView(allPages[index].id);
    	};

    	onMount(() => {
    		// Get book
    		gun.get(bookId).once(async _book => {
    			if (_book) {
    				const book = await decryptData(_book.data);
    				$$invalidate(2, currentBook = book);

    				// If not published go yo home (in case of getting from url)
    				if (!book.published) {
    					navigate("/home");
    				}

    				// Get book pages
    				gun.get(bookId).get(PAGES).map().once(async _page => {
    					const page = await decryptData(_page.data);
    					$$invalidate(0, allPages = [...allPages, page].sort((a, b) => a.createdAt - b.createdAt));
    					handleAddPageView(allPages[currentPageIndex].id);
    				});

    				// Get book author
    				gun.get(book.createdBy).once(async _author => {
    					const author = await decryptData(_author.data);
    					$$invalidate(4, bookAuthor = author);
    					$$invalidate(3, showBook = true);
    				});
    			}
    		});
    	});

    	currentUser.subscribe(_user => {
    		myUser = _user;
    	});

    	const handleGoToNextPage = () => {
    		handleAddPageView(currentPageIndex + 1);
    		$$invalidate(1, currentPageIndex++, currentPageIndex);
    	};

    	const goToBook = () => {
    		navigate(`/book/${bookId}`);
    	};

    	const writable_props = ['bookId'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<BookPages> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => console.log(allPages);
    	const func = () => $$invalidate(1, currentPageIndex--, currentPageIndex);
    	const func_1 = () => $$invalidate(1, currentPageIndex--, currentPageIndex);

    	$$self.$$set = $$props => {
    		if ('bookId' in $$props) $$invalidate(8, bookId = $$props.bookId);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		Quill,
    		navigate,
    		MainLayout: Main,
    		gun,
    		decryptData,
    		PAGES,
    		currentUser,
    		addPageView,
    		Button,
    		Stats,
    		logoPath,
    		bookId,
    		currentBook,
    		showBook,
    		myUser,
    		allPages,
    		currentPageIndex,
    		bookAuthor,
    		handleAddPageView,
    		handleGoToNextPage,
    		goToBook,
    		currentPage
    	});

    	$$self.$inject_state = $$props => {
    		if ('bookId' in $$props) $$invalidate(8, bookId = $$props.bookId);
    		if ('currentBook' in $$props) $$invalidate(2, currentBook = $$props.currentBook);
    		if ('showBook' in $$props) $$invalidate(3, showBook = $$props.showBook);
    		if ('myUser' in $$props) myUser = $$props.myUser;
    		if ('allPages' in $$props) $$invalidate(0, allPages = $$props.allPages);
    		if ('currentPageIndex' in $$props) $$invalidate(1, currentPageIndex = $$props.currentPageIndex);
    		if ('bookAuthor' in $$props) $$invalidate(4, bookAuthor = $$props.bookAuthor);
    		if ('currentPage' in $$props) $$invalidate(5, currentPage = $$props.currentPage);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*allPages, currentPageIndex*/ 3) {
    			$$invalidate(5, currentPage = allPages[currentPageIndex]);
    		}
    	};

    	return [
    		allPages,
    		currentPageIndex,
    		currentBook,
    		showBook,
    		bookAuthor,
    		currentPage,
    		handleGoToNextPage,
    		goToBook,
    		bookId,
    		click_handler,
    		func,
    		func_1
    	];
    }

    class BookPages extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, { bookId: 8 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BookPages",
    			options,
    			id: create_fragment$2.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*bookId*/ ctx[8] === undefined && !('bookId' in props)) {
    			console_1.warn("<BookPages> was created without expected prop 'bookId'");
    		}
    	}

    	get bookId() {
    		throw new Error("<BookPages>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set bookId(value) {
    		throw new Error("<BookPages>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/secure-routes/SecureBookPages.svelte generated by Svelte v3.44.1 */
    const file = "src/secure-routes/SecureBookPages.svelte";

    // (24:2) {#if canShow}
    function create_if_block(ctx) {
    	let bookpages;
    	let current;

    	bookpages = new BookPages({
    			props: { bookId: /*id*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(bookpages.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(bookpages, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const bookpages_changes = {};
    			if (dirty & /*id*/ 1) bookpages_changes.bookId = /*id*/ ctx[0];
    			bookpages.$set(bookpages_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(bookpages.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(bookpages.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(bookpages, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(24:2) {#if canShow}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let main;
    	let current;
    	let if_block = /*canShow*/ ctx[1] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			main = element("main");
    			if (if_block) if_block.c();
    			add_location(main, file, 22, 0, 302);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			if (if_block) if_block.m(main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*canShow*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*canShow*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(main, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SecureBookPages', slots, []);
    	let canShow = false;
    	let { id } = $$props;

    	onMount(() => {
    		if (!user.is) {
    			navigate("/");
    			return;
    		}

    		$$invalidate(1, canShow = true);
    	});

    	const writable_props = ['id'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SecureBookPages> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    	};

    	$$self.$capture_state = () => ({
    		navigate,
    		onMount,
    		user,
    		BookPages,
    		canShow,
    		id
    	});

    	$$self.$inject_state = $$props => {
    		if ('canShow' in $$props) $$invalidate(1, canShow = $$props.canShow);
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [id, canShow];
    }

    class SecureBookPages extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, { id: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SecureBookPages",
    			options,
    			id: create_fragment$1.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[0] === undefined && !('id' in props)) {
    			console.warn("<SecureBookPages> was created without expected prop 'id'");
    		}
    	}

    	get id() {
    		throw new Error("<SecureBookPages>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<SecureBookPages>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/App.svelte generated by Svelte v3.44.1 */

    // (23:0) <Router>
    function create_default_slot(ctx) {
    	let route0;
    	let t0;
    	let route1;
    	let t1;
    	let route2;
    	let t2;
    	let route3;
    	let t3;
    	let route4;
    	let t4;
    	let route5;
    	let t5;
    	let route6;
    	let t6;
    	let route7;
    	let t7;
    	let route8;
    	let current;

    	route0 = new Route({
    			props: { path: "/", component: Auth },
    			$$inline: true
    		});

    	route1 = new Route({
    			props: {
    				path: "/my-profile",
    				component: SecureMyProfile
    			},
    			$$inline: true
    		});

    	route2 = new Route({
    			props: {
    				path: "/user/:userId",
    				component: SecureMyProfile
    			},
    			$$inline: true
    		});

    	route3 = new Route({
    			props: { path: "/home", component: SecureHome },
    			$$inline: true
    		});

    	route4 = new Route({
    			props: {
    				path: "/create-book",
    				component: SecureBookForm
    			},
    			$$inline: true
    		});

    	route5 = new Route({
    			props: {
    				path: "/my-books",
    				component: SecureBooksList
    			},
    			$$inline: true
    		});

    	route6 = new Route({
    			props: {
    				path: "/my-books/:id",
    				component: SecureBookEdit
    			},
    			$$inline: true
    		});

    	route7 = new Route({
    			props: { path: "/book/:id", component: SecureBook },
    			$$inline: true
    		});

    	route8 = new Route({
    			props: {
    				path: "/book/:id/pages",
    				component: SecureBookPages
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(route0.$$.fragment);
    			t0 = space();
    			create_component(route1.$$.fragment);
    			t1 = space();
    			create_component(route2.$$.fragment);
    			t2 = space();
    			create_component(route3.$$.fragment);
    			t3 = space();
    			create_component(route4.$$.fragment);
    			t4 = space();
    			create_component(route5.$$.fragment);
    			t5 = space();
    			create_component(route6.$$.fragment);
    			t6 = space();
    			create_component(route7.$$.fragment);
    			t7 = space();
    			create_component(route8.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(route0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(route1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(route2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(route3, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(route4, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(route5, target, anchor);
    			insert_dev(target, t5, anchor);
    			mount_component(route6, target, anchor);
    			insert_dev(target, t6, anchor);
    			mount_component(route7, target, anchor);
    			insert_dev(target, t7, anchor);
    			mount_component(route8, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(route0.$$.fragment, local);
    			transition_in(route1.$$.fragment, local);
    			transition_in(route2.$$.fragment, local);
    			transition_in(route3.$$.fragment, local);
    			transition_in(route4.$$.fragment, local);
    			transition_in(route5.$$.fragment, local);
    			transition_in(route6.$$.fragment, local);
    			transition_in(route7.$$.fragment, local);
    			transition_in(route8.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(route0.$$.fragment, local);
    			transition_out(route1.$$.fragment, local);
    			transition_out(route2.$$.fragment, local);
    			transition_out(route3.$$.fragment, local);
    			transition_out(route4.$$.fragment, local);
    			transition_out(route5.$$.fragment, local);
    			transition_out(route6.$$.fragment, local);
    			transition_out(route7.$$.fragment, local);
    			transition_out(route8.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(route0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(route1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(route2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(route3, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(route4, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(route5, detaching);
    			if (detaching) detach_dev(t5);
    			destroy_component(route6, detaching);
    			if (detaching) detach_dev(t6);
    			destroy_component(route7, detaching);
    			if (detaching) detach_dev(t7);
    			destroy_component(route8, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(23:0) <Router>",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let router;
    	let current;

    	router = new Router({
    			props: {
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(router.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(router, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const router_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				router_changes.$$scope = { dirty, ctx };
    			}

    			router.$set(router_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(router.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(router.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(router, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);

    	onMount(() => {
    		if (user.is) {
    			setCurrentUser();
    		}
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		setCurrentUser,
    		Route,
    		Router,
    		user,
    		Auth,
    		SecureHome,
    		SecureBookForm,
    		SecureBook,
    		SecureBookEdit,
    		SecureBooksList,
    		SecureMyProfile,
    		SecureBookPages
    	});

    	return [];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
      target: document.body,
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
